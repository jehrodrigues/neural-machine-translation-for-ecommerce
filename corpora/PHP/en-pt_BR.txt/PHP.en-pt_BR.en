PHP Manual
Prev
Appendix K.
About the manual
Next
This manual is written in XML using the DocBook XML DTD, using DSSSL (Document Style and Semantics Specification Language) for formatting, and experimentally the XSLT (Extensible Stylesheet Language Transformations) for maintenance and formatting.
Using XML as a source format gives us the ability to generate many output formats from the source files, while only maintaining one source document for all formats.
The tools used for formatting HTML and TeX versions are Jade, written by James Clark and The Modular DocBook Stylesheets written by Norman Walsh.
We use Microsoft HTML Help Workshop to generate the Windows HTML Help format of the manual, and of course PHP itself to do some additional conversions and formatting.
You can download the manual in various languages and formats, including plain text, plain HTML, PDF, PalmPilot DOC, PalmPilot iSilo and Windows HTML Help, from http: / /www.php.net / docs.php.
The manuals are updated automatically as the text is updated.
You can find more information about downloading the XML source code of this documentation at http: / /cvs.php.net /.
The documentation is stored in the phpdoc module.
Prev
Home
Next
How to help improve the documentation
Up
Translations
PHP Manual
Prev
Appendix K.
About the manual
Next
There are three ways you can help to improve this documentation.
If you find errors in this manual, in any language, please report them using the bug system at http: / /bugs.php.net /.
Classify the bug as "Documentation Problem".
You can also submit problems related to specific manual formats here.
Note:
Please don 't abuse the bug system by submitting requests for help.
Use the mailing lists or community sites mentioned earlier, instead.
By contributing notes, you can provide additional examples, caveats, and clarifications for other readers.
But do not submit bug reports using the annotation system please.
You can read more about annotations in the 'About user notes' section of this appendix.
If you know English and some foreign language, you may also help out in the translations.
If you would like to start a new translation, or help in a translation project, please read http: / /cvs.php.net / co.php / phpdoc / howto / howto.html.tar.gz.
Prev
Home
Next
How to find more information about PHP
Up
How we generate the formats
PHP Manual
Prev
Next
The PHP manual is provided in several formats.
These formats can be divided into two groups: online readable formats, and downloadable packages.
Some publishers have made available printed versions of this manual.
We cannot recommend any of those, as they tend to become out-of-date very quickly.
You can read the manual online at http: / /www.php.net / You can read the manual online at http: / /www.php.net / and on the numerous mirror sites.
For best performance, you should choose the mirror site closest to you.
You can view the manual in either its plain (print-friendly) HTML format or an HTML format that integrates the manual into the look and feel of the PHP website itself.
An advantage of the online manual over most of the offline formats is the integration of user-contributed notes.
An obvious disadvantage is that you have to be online to view the manual in the online formats.
There are several offline formats of the manual, and the most appropriate format for you depends on what operating system you use and your personal reading style.
For information on how the manual is generated in so many formats, read the 'How we generate the formats' section of this appendix.
The most cross-platform formats of the manual are the HTML and plain-text versions.
The HTML format is provided both as a single HTML file and as a package of individual files for each section (which results in a collection of several thousand files).
The HTML and plaintext formats are provided as tar files compressed using the bzip2 archiver.
Another popular cross-platform format, and the format most suited to printing, is PDF (also known as Adobe Acrobat).
But before you rush to download this format and hit the Print button, be warned that the manual is nearly 2000 pages long, and constantly being revised.
Note:
If you do not already have a program capable of viewing PDF format files, you may need to download Adobe Acrobat Reader.
For owners of Palm-compatible handhelds, the Palm document and iSilo formats are ideal for this platform.
You can bring your handheld with you on your daily commute and use a DOC or iSilo reader to brush up on your PHP knowledge, or just use it as a quick reference.
For Windows platforms, the Windows HTML Help version of the manual soups up the HTML format for use with the Windows HTML Help application.
This version provides full-text search, a full index, and bookmarking.
Many popular Windows PHP development environments also integrate with this version of the documentation to provide easy access.
Prev
Home
Next
Up
About user notes
PHP Manual
Prev
Appendix K.
About the manual
Next
This manual does not attempt to provide instruction about general programming practices.
If you are a first-time, or even just a beginning, programmer, you may find it difficult to learn how to program in PHP using just this manual.
You may want to seek out a text more oriented towards beginners.
You can find a list of PHP-related books at http: / /www.php.net / books.php.
There are a number of active mailing lists for discussion of all aspects of programming with PHP.
If you find yourself stuck on a problem for which you can 't find your own solution, you may be able to get help from someone on these lists.
You can find a list of the mailing lists at http: / /www.php.net / support.php, as well as links to the mailing list archives and other online support resources.
Furthermore, at http: / /www.php.net / links.php there is a list of websites devoted to PHP articles, forums, and code galleries.
Prev
Home
Next
PHP versions documented in this manual
Up
How to help improve the documentation
PHP Manual
Prev
Appendix K.
About the manual
Next
The user-contributed notes play an important role in the development of this manual.
By allowing readers of the manual to contribute examples, caveats, and further clarifications from their browser, we are able to incorporate that feedback into the main text of the manual.
Note:
The user-contributed notes are not moderated before they appear online, so the quality of the writing or code examples, and even the veracity of the contribution, cannot be guaranteed. (Not that there is any guarantee of the quality or accuracy of the manual text itself.)
Note:
For more details see the Manual 's Copyright page.
Prev
Home
Next
About the manual
Up
How to read a function definition (prototype)
PHP Manual
Prev
Appendix K.
About the manual
Next
Each function is documented for quick reference, knowing how to read and understand the manual will make using PHP much easier.
Rather than relying on examples or cut / paste, you want to know how to read function definitions (prototypes).
Let 's begin:
Prerequisite:
Basic understanding of types:
Although PHP is a loosly typed language, it 's important to have a basic understanding of types as they have important meaning.
Function definitions tell us what type of value is returned, let' s use the definition for strlen() as our first example:
strlen (PHP 3, PHP 4 = 4.0.0) strlen - - Get string length Description int strlen (string str) Returns the length of string.
Table K-1.
Explanation of a function definition
Part
Description
The function name.
strlen() has been around in both all of PHP 3 and PHP 4
The length of a string is measured in numbers).
The first (and in this case the only) parameter / argument for the function strlen() is named str, and it's a string.
We could rewrite the above function definition in a generic way:
returned type function name (parameter type parameter name)
Many functions take on multiple parameters, such as in_array().
It 's prototype is as follows:
What does this mean? in_array() returns a boolean value, TRUE on success (the needle was found in the haystack) or FALSE on failure (the needle was not found in the haystack).
The first parameter is named needle and it can be many different types, so we call it "mixed".
This mixed needle (what we're looking for) can either be a scalar value (string, integer, or float), or an array. haystack (the array we're searching in) is the second parameter.
The third optional parameter is named strict.
All optional parameters are seen in [brackets].
The manual states that the strict parameter defaults to boolean FALSE.
See the manual page on each function for details on how they work.
Prev
Home
Next
About user notes
Up
PHP versions documented in this manual
PHP Manual
Prev
Appendix K.
About the manual
Next
The PHP manual is not only available in various formats, it is also available in various languages.
The text of the manual is first written in english, then teams of people across the world take care of translating it to their native language.
If a translation for a specified function or chapter has not yet been made, the build system of the manual falls back to the english version of it.
Peoples involved in the translations start from the XML source code available from http: / /cvs.php.net / and from it they translate to thier mother language.
They do not use the HTML, the plain text, or the PDF version.
It is the build system which takes care of the conversions from XML to human readable formats.
Note:
If you would like to help translating the documentation to your native language, please get in touch with the translation / documentation team subscribing to the phpdoc mailinglist: send an empty mail to phpdoc-subscribe@lists.php.net.
The mailing list address is phpdoc@lists.php.net.
State in the message that you are interested in translating the manual to a language and someone will get back to you, helping you start a new language translation or reach the already active documentation team for your language.
At the moment the manual is available, partly or not, in the following languages:
Brazilian Portuguese, Chinese, Czech, Dutch, French, German, Hungarian, Italian, Japanese, Korean, Polish and Spanish.
They all can be downloaded here: http: / /www.php.net / docs.php.
Prev
Home
Next
How we generate the formats
Up
Missing Stuff
PHP Manual
Prev
Next
Here is the aliases list.
All aliases are listed here.
It is usually a bad idea to use aliases, as they may be bound to obsolescence or renaming, which will lead to unportable script.
This list is provided to help those who want to upgrade their old scripts to newer syntax.
However, some functions simply have two names, and there is no real preference. (For example, is_int() and is_integer() are equally good)
For an alias list that updates daily, have a look here.
Table F-1.
Aliases
Alias
Master function
Extension used
Prev
Home
Next
Up
List of Reserved Words
PHP Manual
Prev
Next
Prev
Home
Next
Miscellaneous Questions
History of PHP and related projects
PHP Manual
Prev
Appendix E.
Next
This is the hash table in which the function is to be looked up.
This is a pointer to an object on which the function is invoked.
The name of the function to call.
The structure must be previously allocated - call_user_function() does NOT allocate it by itself.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
A pseudo-object oriented mechanism for reading a directory.
The given directory is opened.
Two properties are available once the directory has been opened.
The handle property can be used with other directory functions such as readdir(), rewinddir() and closedir().
The path property is set to path the directory that was opened.
Three methods are available: read, rewind and close.
Please note the fashion in which dir() 's return value is checked in the example below.
We are explicitly testing whether the return value is identical to (equal to and of the same type as--see Comparison Operators for more information) FALSE since otherwise, any directory entry whose name evaluates to FALSE will stop the loop.
Example 1. dir() example
$d = dir( "/ etc"); echo "Handle: ".$d - handle." br \n"; echo "Path: ".$d - path. "br \n"; while (false !== ($entry = $d - read())) {echo $entry." br \n";} $d - close();
Note:
The order in which directory entries are returned by the read method is system-dependent.
Note:
This defines the internal class Directory, meaning that you will not be able to define your own classes with that name.
For a full list of predefined classes in PHP, please see Predefined Classes.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 4.
Configuration
Next
When using PHP as an Apache module, you can also change the configuration settings using directives in Apache configuration files (e.g. httpd.conf) and .htaccess files (You will need "AllowOverride Options "or "AllowOverride All" privileges)
For a listing of which directives are PHP_INI_ALL, PHP_INI_PERDIR, or PHP_INI_SYSTEM, have a look at the table found within the ini_set() documentation.
With PHP 3.0, there are Apache directives that correspond to each configuration setting in the php3.ini name, except the name is prefixed by "php3_".
Can be used only with PHP_INI_ALL and PHP_INI_PERDIR type directives.
To clear a previously set value use none as the value.
Used to set a Boolean configuration directive.
Can be used only with PHP_INI_ALL and PHP_INI_PERDIR type directives.
This can NOT be used in .htaccess files.
Any directive type set with php_admin_value can not be overridden by .htaccess or virtualhost directives.
Used to set a Boolean configuration directive.
Example 4-2.
Apache configuration example
Note:
PHP constants do not exist outside of PHP.
Use the associated bitmask values instead.
Regardless of the interface to PHP you can change certain values at runtime of your scripts through ini_set().
The following table provides an overview at which level a directive can be set / changed.
Table 4-1.
Definition of PHP_INI_* constants
Constant
Value
Meaning
Entry can be set in user scripts
Entry can be set in php.ini, .htaccess or httpd.conf
Entry can be set in php.ini or httpd.conf
Entry can be set anywhere
You can view the settings of the configuration values in the output of phpinfo().
You can also access the values of individual configuration directives using ini_get() or get_cfg_var().
Prev
Home
Next
Configuration
Up
Configuration directives
PHP Manual
Prev
Chapter 4.
Configuration
Next
Table 4-2.
Httpd Options
Name
Default
Changeable
async_send
Table 4-3.
Language and Misc Configuration Options
Name
Default
Changeable
Here is a short explanation of the configuration directives.
Tells whether the short form (??) of PHP's open tag should be allowed.
If you want to use PHP in combination with XML, you can disable this option in order to use ?xml? inline.
Otherwise, you can print it with PHP, for example: ?php echo '?xml version="1.0"';?.
Also if disabled, you must use the long form of the PHP open tag (?php?).
Note:
This directive also affects the shorthand ?=, which is identical to? echo.
Use of this shortcut requires short_open_tag to be on.
Enables the use of ASP-like%% tags in addition to the usual ?php? tags.
This includes the variable-value printing shorthand of %= $value%.
For more information, see Escaping from HTML.
Note:
Support for ASP-style tags was added in 3.0.4.
The number of significant digits displayed in floating point numbers.
Enforce year 2000 compliance (will cause problems with non-compliant browsers)
Whether to enable the ability to force arguments to be passed by reference at function call time.
This method is deprecated and is likely to be unsupported in future versions of PHP / Zend.
The encouraged method of specifying which arguments should be passed by reference is in the function declaration.
You' re encouraged to try and turn this option Off and make sure your scripts work properly with it in order to ensure they will work with future versions of the language (you will receive a warning each time you use this feature, and the argument will be passed by value instead of by reference).
See also References Explained.
Decides whether PHP may expose the fact that it is installed on the server (e.g. by adding its signature to the Web server header).
It is no security threat in any way, but it makes it possible to determine whether you use PHP on your server or not.
Resource Limits
Name
Default
Changeable
memory_limit
"8M"
This sets the maximum amount of memory in bytes that a script is allowed to allocate.
This helps prevent poorly written scripts for eating up all available memory on a server.
In order to use this directive you must have enabled it at compile time.
So, your configure line would have included: --enable-memory-limit.
Note that you have to set it to -1 if you don 't want any limit for your memory.
See also: max_execution_time.
Data Handling Configuration Options
Name
Default
Changeable
Here is a short explanation of the configuration directives.
If enabled, then Environment, GET, POST, Cookie, and Server variables can be found in the global associative arrays $_ENV, $_GET, $_POST, $_COOKIE, and $_SERVER.
Note that as of PHP 4.0.3, track_vars is always turned on.
The separator used in PHP generated URLs to separate arguments.
List of separator( s) used by PHP to parse input URLs into variables.
Note:
Every character in this directive is considered as separator!
Set the order of the EGPCS (Environment, GET, POST, Cookie, Server) variable parsing.
The default setting of this directive is "EGPCS".
Setting this to "GP", for example, will cause PHP to completely ignore environment variables, cookies and server variables, and to overwrite any GET method variables with POST-method variables of the same name.
See also register_globals.
Tells whether or not to register the EGPCS (Environment, GET, POST, Cookie, Server) variables as global variables.
For example; if register_globals = on, the url http: / /www.example.com / test.php?id=3 will produce $id.
Or, $DOCUMENT_ROOT from $_SERVER[ 'DOCUMENT_ROOT'].
You may want to turn this off if you don' t want to clutter your scripts' global scope with user data.
As of PHP 4.2.0, this directive defaults to off.
It 's preferred to go through PHP Predefined Variables instead, such as the superglobals: $_ENV, $_GET, $_POST, $_COOKIE, and $_SERVER.
Please read the security chapter on Using register_globals for related information.
Please note that register_globals cannot be set at runtime (ini_set()).
Although, you can use .htaccess if your host allows it as described above.
An example .htaccess entry: php_flag register_globals on.
Tells PHP whether to declare the argv argc variables (that would contain the GET information).
See also command line.
Also, this directive became available in PHP 4.0.0 and was always "on" before that.
Sets max size of post data allowed.
This setting also affects file upload.
To upload large files, this value must be larger than upload_max_filesize.
If memory limit is enabled by your configure script, memory_limit also affects file uploading.
Generally speaking, memory_limit should be larger than post_max_size.
Set the order of GET / POST / COOKIE variable parsing.
The default setting of this directive is "GPC".
Setting this to "GP", for example, will cause PHP to completely ignore cookies and to overwrite any GET method variables with POST-method variables of the same name.
Note:
This option is not available in PHP 4.
Use variables_order instead.
Specifies the name of a file that is automatically parsed before the main file.
The file is included as if it was called with the include() function, so include_path is used.
The special value none disables auto-prepending.
Specifies the name of a file that is automatically parsed after the main file.
The file is included as if it was called with the include() function, so include_path is used.
The special value none disables auto-appending.
Note:
If the script is terminated with exit(), auto-append will not occur.
As of 4.0b4, PHP always outputs a character encoding by default in the Content-type: header.
To disable sending of the charset, simply set it to be empty.
Always populate the $HTTP_RAW_POST_DATA variable.
Allow handling of WebDAV http requests within PHP scripts (eg.
PROPFIND, PROPPATCH, MOVE, COPY, etc..) If you want to get the post data of those requests, you have to set always_populate_raw_post_data as well.
See also: magic_quotes_gpc, magic-quotes-runtime, and magic_quotes_sybase.
Table 4-6.
Paths and Directories Configuration Options
Name
Default
Changeable
Here is a short explanation of the configuration directives.
Specifies a list of directories where the require(), include() and fopen_with_path() functions look for files.
The format is like the system 's PATH environment variable: a list of directories separated with a colon in UNIX or semicolon in Windows.
UNIX include_path
include_path=".: / php / includes "
Windows include_path
include_path=" .;c:\php\includes "
Using a. in the include path allows for relative includes as it means the current directory.
PHP' s "root directory "on the server.
If PHP is configured with safe mode, no files outside this directory are served.
If PHP was not compiled with FORCE_REDIRECT, you SHOULD set doc_root if you are running php as a CGI under any web server (other than IIS) The alternative is to use the cgi.force_redirect configuration below.
The base name of the directory used on a user 's home directory for PHP files, for example public_html.
In what directory PHP should look for dynamically loadable extensions.
See also: enable_dl, and dl().
Which dynamically loadable extensions to load when PHP starts up.
cgi.force_redirect is necessary to provide security running PHP as a CGI under most web servers.
Left undefined, PHP turns this on by default.
You can turn it off AT YOUR OWN RISK.
Note:
Windows Users:
You CAN safely turn this off for IIS, in fact, you MUST.
To get OmniHTTPD or Xitami to work you MUST turn it off.
If cgi.force_redirect is turned on, and you are not running under Apache or Netscape (iPlanet) web servers, you MAY need to set an environment variable name that PHP will look for to know it is OK to continue execution.
Note:
Setting this variable MAY cause security issues, KNOW WHAT YOU ARE DOING FIRST.
FastCGI under IIS (on WINNT based OS) supports the ability to impersonate security tokens of the calling client.
This allows IIS to define the security context that the request runs under. mod_fastcgi under Apache does not currently support this feature (03 / 17 / 2002) Set to 1 if running under IIS.
Default is zero.
Table 4-7.
File Uploads Configuration Options
Name
Default
Changeable
Here is a short explanation of the configuration directives.
Whether or not to allow HTTP file uploads.
See also the upload_max_filesize, upload_tmp_dir, and post_max_size directives.
The temporary directory used for storing files when doing file upload.
Must be writable by whatever user PHP is running as.
If not specified PHP will use the system 's default.
The maximum size of an uploaded file.
Table 4-8.
General SQL Configuration Options
Name
Default
Changeable
Here is a short explanation of the configuration directives.
DNS name or IP address of host used by the debugger.
Port number used by the debugger.
Whether the debugger is enabled.
Prev
Home
Next
How to change configuration settings
Up
PHP Manual
Prev
Next
The configuration file (called php3.ini in PHP 3.0, and simply php.ini as of PHP 4.0) is read when PHP starts up.
For the server module versions of PHP, this happens only once when the web server is started.
For the CGI and CLI version, it happens on every invocation.
The default location of php.ini is a compile time option (see the FAQ entry), but can be changed for the CGI and CLI version with the -c command line switch, see the chapter about using PHP from the command line.
You can also use the environment variable PHPRC for an additional path to search for a php.ini file.
Not every PHP directive is documented below.
For a list of all directives, please read your well commented php.ini file.
You may want to view the latest php.ini here from CVS.
Note:
The default value for the PHP directive register_globals changed from on to off in PHP 4.2.0.
Example 4-1. php.ini example
; any text on a line after an unquoted semicolon (;) is ignored [php]; section markers (text within square brackets) are also ignored; Boolean values can be set to either:; true, on, yes; or false, off, no, none register_globals = off magic_quotes_gpc = yes; you can enclose strings in double-quotes include_path = ".: / usr / local / lib / php "; backslashes are treated the same as any other character include_path = ".;c:\php\lib"
Prev
Home
Next
Up
How to change configuration settings
PHP Manual
Prev
Chapter 12.
Control Structures
Next
PHP offers an alternative syntax for some of its control structures; namely, if, while, for, foreach, and switch.
In each case, the basic form of the alternate syntax is to change the opening brace to a colon (:) and the closing brace to endif;, endwhile;, endfor;, endforeach;, or endswitch;, respectively.
A is equal to 5 ?php endif;?
In the above example, the HTML block "A is equal to 5" is nested within an if statement written in the alternative syntax.
The HTML block would be displayed only if $a is equal to 5.
The alternative syntax applies to else and elseif as well.
The following is an if structure with elseif and else in the alternative format:
if ($a == 5): print "a equals 5"; print ".. ."; elseif ($a == 6): print "a equals 6"; print "!! !"; else: print "a is neither 5 nor 6"; endif;
See also while, for, and if for further examples.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
break ends execution of the current for, foreach while, do..while or switch structure.
break accepts an optional numeric argument which tells it how many nested enclosing structures are to be broken out of.
$arr = array ('one', 'two', 'three', 'four', 'stop', 'five'); while (list (, $val) = each ($arr)) {if ($val == 'stop') {break; / * You could also write'break 1; 'here. * /} echo "$val br \n";} / * Using the optional argument. * / $i = 0; while (++$i) {switch ($i) {case 5: echo "At 5 br \n"; break 1; / * Exit only the switch. * / case 10: echo "At 10; quitting br \n"; break 2; / * Exit the switch and the while. * / default: break;}}
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
continue is used within looping structures to skip the rest of the current loop iteration and continue execution at the beginning of the next iteration.
continue accepts an optional numeric argument which tells it how many levels of enclosing loops it should skip to the end of.
while (list ($key, $value) = each ($arr)) {if (!($key% 2)) {/ / skip odd members continue;} do_something_odd ($value);} $i = 0; while ($i+ + 5) {echo "Outer br \n"; while (1) {echo "nbsp; nbsp;Middle br \n"; while (1) {echo" nbsp; nbsp;Inner br \n"; continue 3;} echo "This never gets output. br \n";} echo "Neither does this. br \n";}
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
The declare construct is used to set execution directives for a block of code.
The syntax of declare is similar to the syntax of other flow control constructs:
declare (directive) statement
The directive section allows the behavior of the declare block to be set.
Currently only one directive is recognized: the ticks directive. (See below for more information on the ticks directive)
The statement part of the declare block will be executed - - how it is executed and what side effects occur during execution may depend on the directive set in the directive block.
A tick is an event that occurs for every N low-level statements executed by the parser within the declare A tick is an event that occurs for every N low-level statements executed by the parser within the declare block.
The value for N is specified using ticks= N within the declare blocks' s directive section.
The event( s) that occur on each tick are specified using the register_tick_function().
See the example below for more details.
Note that more than one event can occur for each tick.
Example 12-1.
Profile a section of PHP code
?php / / A function that records the time when it is called function profile ($dump = FALSE) {static $profile; / / Return the times stored in profile, then erase it if ($dump) {$temp = $profile; unset ($profile); return ($temp);} $profile[] = microtime ();} / / Set up a tick handler register_tick_function("profile"); / / Initialize the function before the declare block profile (); / / Run a block of code, throw a tick every 2nd statement declare (ticks=2) {for ($x = 1; $x 50; ++$x) {echo similar_text (md5($x), md5($x*$x)), "br / ;";}} / / Display the data stored in the profiler print_r (profile (TRUE));?
Ticks are well suited for debugging, implementing simple multitasking, backgrounded I / O and many other tasks.
See also register_tick_function() and unregister_tick_function().
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
do..while loops are very similar to while loops, except the truth expression is checked at the end of each iteration instead of in the beginning.
The main difference from regular while loops is that the first iteration of a do..while loop is guaranteed to run (the truth expression is only checked at the end of the iteration), whereas it's may not necessarily run with a regular while loop (the truth expression is checked at the beginning of each iteration, if it evaluates to FALSE right from the beginning, the loop execution would end immediately).
There is just one syntax for do..while loops:
The above loop would run one time exactly, since after the first iteration, when truth expression is checked, it evaluates to FALSE ($i is not bigger than 0) and the loop execution ends.
Advanced C users may be familiar with a different usage of the do..while loop, to allow stopping execution in the middle of code blocks, by encapsulating them with do..while (0), and using the break statement.
The following code fragment demonstrates this:
do {if ($i 5) {print "i is not big enough"; break;} $i *= $factor; if ($i $minimum_limit) {break;} print "i is ok"; ...process i...} while(0);
Don' t worry if you don't understand this right away or at all.
You can code scripts and even powerful scripts without using this' feature '.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
Often you 'd want to execute a statement if a certain condition is met, and a different statement if the condition is not met.
This is what else is for. else extends an if statement to execute a statement in case the expression in the if statement evaluates to FALSE.
For example, the following code would display a is bigger than b if $a is bigger than $b, and a is NOT bigger than b otherwise:
if ($a $b) {print "a is bigger than b";} else {print "a is NOT bigger than b";}
Prev
Home
Next
Control Structures
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
elseif, as its name suggests, is a combination of if and else.
Like else, it extends an if statement to execute a different statement in case the original if expression evaluates to FALSE.
However, unlike else, it will execute that alternative expression only if the elseif conditional expression evaluates to TRUE.
For example, the following code would display a is bigger than b, a equal to b or a is smaller than b:
if ($a $b) {print "a is bigger than b";} elseif ($a == $b) {print "a is equal to b";} else {print "a is smaller than b";}
There may be several elseif s within the same if statement.
The first elseif expression (if any) that evaluates to TRUE would be executed.
In PHP, you can also write 'else if' (in two words) and the behavior would be identical to the one of'elseif '(in a single word).
The syntactic meaning is slightly different (if you're familiar with C, this is the same behavior) but the bottom line is that both would result in exactly the same behavior.
The elseif statement is only executed if the preceding if expression and any preceding elseif expressions evaluated to FALSE, and the current elseif expression evaluated to TRUE.
Prev
Home
Next
Up
Alternative syntax for control structures
PHP Manual
Prev
Chapter 12.
Control Structures
Next
PHP 4 (not PHP 3) includes a foreach construct, much like Perl and some other languages.
This simply gives an easy way to iterate over arrays. foreach works only on arrays, and will issue an error when you try to use it on a variable with a different data type or an uninitialized variables.
There are two syntaxes; the second is a minor but useful extension of the first:
foreach( array_expression as $value) statement foreach(array_expression as $key = $value) statement
The first form loops over the array given by array_expression.
On each loop, the value of the current element is assigned to $value and the internal array pointer is advanced by one (so on the next loop, you'll be looking at the next element).
The second form does the same thing, except that the current element 's key will be assigned to the variable $key on each loop.
Note:
When foreach first starts executing, the internal array pointer is automatically reset to the first element of the array.
This means that you do not need to call reset() before a foreach loop.
Note:
However, the internal pointer of the original array is advanced with the processing of the array.
You may have noticed that the following are functionally identical:
reset ($arr); while (list(, $value) = each ($arr)) {echo "Value: $value br \n";} foreach ($arr as $value) {echo "Value: $value br \n";}
reset ($arr); while (list($key, $value) = each ($arr)) {echo "Key: $key; Value: $value br \n";} foreach ($arr as $key = $value) {echo "Key: $key; Value: $value br \n";}
Some more examples to demonstrate usages:
/* foreach example 1: value only * / $a = array (1, 2, 3, 17); foreach ($a as $v) {print "Current value of \$a: $v.\n";} / * foreach example 2: value (with key printed for illustration) * / $a = array (1, 2, 3, 17); $i = 0; / * for illustrative purposes only * / foreach($a as $v) {print "\$a[$i] = $v.\n"; $i++;} / * foreach example 3: key and value * / $a = array ("one "= 1, "two" = 2, "three "= 3, "seventeen" = 17); foreach($a as $k = $v) {print "\$a[$k] = $v.\n";} / * foreach example 4: multi-dimensional arrays * / $a[0][0] = "a"; $a[0][1] = "b"; $a[1][0] = "y"; $a[1][1] = "z"; foreach($a as $v1) {foreach ($v1 as $v2) {print "$v2\n";}} / * foreach example 5: dynamic arrays * / foreach(array(1, 2, 3, 4, 5) as $v) {print "$v\n";}
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
for loops are the most complex loops in PHP.
They behave like their C counterparts.
The syntax of a for loop is:
for (expr1; expr2; expr3) statement
The first expression (expr1) is evaluated (executed) once unconditionally at the beginning of the loop.
In the beginning of each iteration, expr2 is evaluated.
If it evaluates to TRUE, the loop continues and the nested statement( s) are executed.
If it evaluates to FALSE, the execution of the loop ends.
At the end of each iteration, expr3 is evaluated (executed).
Each of the expressions can be empty. expr2 being empty means the loop should be run indefinitely (PHP implicitly considers it as TRUE, like C).
This may not be as useless as you might think, since often you 'd want to end the loop using a conditional break statement instead of using the for truth expression.
Consider the following examples.
All of them display numbers from 1 to 10:
/* example 1 * / for ($i = 1; $i = 10; $i++) {print $i;} / * example 2 * / for ($i = 1;;$i++) {if ($i 10) {break;} print $i;} / * example 3 * / $i = 1; for (;;) {if ($i 10) {break;} print $i; $i++;} / * example 4 * / for ($i = 1; $i = 10; print $i, $i++);
Of course, the first example appears to be the nicest one (or perhaps the fourth), but you may find that being able to use empty expressions in for loops comes in handy in many occasions.
PHP also supports the alternate "colon syntax" for for loops.
for (expr1; expr2; expr3): statement;...; endfor;
Other languages have a foreach Other languages have a foreach statement to traverse an array or hash.
PHP 3 has no such construct; PHP 4 does (see foreach).
In PHP 3, you can combine while with the list() and each() functions to achieve the same effect.
See the documentation for these functions for an example.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Any PHP script is built out of a series of statements.
A statement can be an assignment, a function call, a loop, a conditional statement of even a statement that does nothing (an empty statement).
Statements usually end with a semicolon.
In addition, statements can be grouped into a statement-group by encapsulating a group of statements with curly braces.
A statement-group is a statement by itself as well.
The various statement types are described in this chapter.
The if construct is one of the most important features of many languages, PHP included.
It allows for conditional execution of code fragments.
PHP features an if structure that is similar to that of C:
if (expr) statement
As described in the section about expressions, expr is evaluated to its Boolean value.
If expr evaluates to TRUE, PHP will execute statement, and if it evaluates to FALSE - it 'll ignore it.
More information about what values evaluate to FALSE can be found in the 'Converting to boolean' section.
The following example would display a is bigger than b if $a is bigger than $b:
if ($a $b) print "a is bigger than b";
Often you 'd want to have more than one statement to be executed conditionally.
Of course, there 's no need to wrap each statement with an if clause.
Instead, you can group several statements into a statement group.
For example, this code would display a is bigger than b if $a is bigger than $b, and would then assign the value of $a into $b:
if ($a $b) {print "a is bigger than b"; $b = $a;}
If statements can be nested indefinitely within other if statements, which provides you with complete flexibility for conditional execution of the various parts of your program.
Prev
Home
Next
Array Operators
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
The switch statement is similar to a series of IF statements on the same expression.
In many occasions, you may want to compare the same variable (or expression) with many different values, and execute a different piece of code depending on which value it equals to.
This is exactly what the switch statement is for.
The following two examples are two different ways to write the same thing, one using a series of if statements, and the other using the switch statement:
if ($i == 0) {print "i equals 0";} if ($i == 1) {print "i equals 1";} if ($i == 2) {print "i equals 2";} switch ($i) {case 0: print "i equals 0"; break; case 1: print "i equals 1"; break; case 2: print "i equals 2"; break;}
It is important to understand how the switch statement is executed in order to avoid mistakes.
The switch statement executes line by line (actually, statement by statement).
In the beginning, no code is executed.
Only when a case statement is found with a value that matches the value of the switch Only when a case statement is found with a value that matches the value of the switch expression does PHP begin to execute the statements.
PHP continues to execute the statements until the end of the switch block, or the first time it sees a break statement.
If you don' t write a break statement at the end of a case's statement list, PHP will go on executing the statements of the following case.
For example:
switch ($i) {case 0: print "i equals 0"; case 1: print "i equals 1"; case 2: print "i equals 2";}
Here, if $i is equal to 0, PHP would execute all of the print statements!
You would get the expected behavior ('i equals 2 'would be displayed) only if $i is equal to 2.
Thus, it is important not to forget break statements (even though you may want to avoid supplying them on purpose under certain circumstances).
In a switch statement, the condition is evaluated only once and the result is compared to each case statement.
In an elseif statement, the condition is evaluated again.
If your condition is more complicated than a simple compare and / or is in a tight loop, a switch may be faster.
The statement list for a case can also be empty, which simply passes control into the statement list for the next case.
switch ($i) {case 0: case 1: case 2: print "i is less than 3 but not negative"; break; case 3: print "i is 3";}
A special case is the default case.
This case matches anything that wasn 't matched by the other cases, and should be the last case statement.
For example:
switch ($i) {case 0: print "i equals 0"; break; case 1: print "i equals 1"; break; case 2: print "i equals 2"; break; default: print "i is not equal to 0, 1 or 2";}
The case expression may be any expression that evaluates to a simple type, that is, integer or floating-point numbers and strings.
Arrays or objects cannot be used here unless they are dereferenced to a simple type.
The alternative syntax for control structures is supported with switches.
For more information, see Alternative syntax for control structures.
switch ($i): case 0: print "i equals 0"; break; case 1: print "i equals 1"; break; case 2: print "i equals 2"; break; default: print "i is not equal to 0, 1 or 2"; endswitch;
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
while loops are the simplest type of loop in PHP.
They behave just like their C counterparts.
The basic form of a while statement is:
while (expr) statement
The meaning of a while The meaning of a while statement is simple.
It tells PHP to execute the nested statement( s) repeatedly, as long as the while expression evaluates to TRUE.
The value of the expression is checked each time at the beginning of the loop, so even if this value changes during the execution of the nested statement( s), execution will not stop until the end of the iteration (each time PHP runs the statements in the loop is one iteration).
Sometimes, if the while expression evaluates to FALSE from the very beginning, the nested statement( s) won't even be run once.
Like with the if statement, you can group multiple statements within the same while loop by surrounding a group of statements with curly braces, or by using the alternate syntax:
while (expr): statement... endwhile;
The following examples are identical, and both print numbers from 1 to 10:
/* example 1 * / $i = 1; while ($i = 10) {print $i++; / * the printed value would be $i before the increment (post-increment) * /} / * example 2 * / $i = 1; while ($i = 10): print $i; $i++; endwhile;
Prev
Home
Next
Alternative syntax for control structures
Up
PHP Manual
This manual is © Copyright 1997 - 2003 by the PHP Documentation Group.
The members of this group are listed on the front page of this manual.
This manual can be redistributed under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
The 'Extending PHP 4.0' section of this manual is copyright © 2000 by Zend Technologies, Ltd.
This material may be distributed only subject to the terms and conditions set forth in the Open Publication License, v1.0 or later (the latest version is presently available at http: / /www.opencontent.org / openpub /).
Home
PHP Manual
Prev
Next
PHP 3 includes support for a network-based debugger.
PHP 4 does not have an internal debugging facility.
You can use one of the external debuggers though.
The Zend IDE includes a debugger, and there are also some free debugger extensions like DBG at http: / /dd.cron.ru / dbg /, the Advanced PHP Debugger (APD) or Xdebug which even has a compatible debugger interface as PHP 3's debugging functionality as is described in this section.
Prev
Home
Next
Up
Using the Debugger
PHP Manual
Prev
Appendix D.
Debugging PHP
Next
The PHP 3 debugger protocol is line-based.
Each line has a type, and several lines compose a message.
Each message starts with a line of the type start and terminates with a line of the type end.
PHP 3 may send lines for different messages simultaneously.
A line has this format:
Date in ISO 8601 format (yyyy - mm - dd)
Time including microseconds: hh: mm: uuuuuu
DNS name or IP address of the host where the script error was generated.
PID (process id) on host of the process with the PHP 3 script that generated this error.
Type of line.
Tells the receiving program about what it should treat the following data as:
Table D-1.
Debugger Line Types
Name
Meaning
Tells the receiving program that a debugger message starts here.
The contents of data will be the type of error message, listed below.
The PHP 3 error message.
File name and line number where the error occurred.
The first location line will always contain the top-level location. data will contain file: line.
There will always be a location line after message and after every function.
Number of frames in the following stack dump.
If there are four frames, expect information about four levels of called functions.
If no "frames" line is given, the depth should be assumed to be 0 (the error occurred at top-level).
Name of function where the error occurred.
Will be repeated once for every level in the function call stack.
Tells the receiving program that a debugger message ends here.
Line data.
Table D-2.
Debugger Error Types
Debugger
PHP 3 Internal
warning
error
parse
notice
core-error
core-warning
unknown
(any other)
Example D-1.
Example Debugger Message
Prev
Home
Next
Using the Debugger
Up
PHP Manual
Prev
Appendix D.
Debugging PHP
Next
The internal debugger in PHP 3 is useful for tracking down evasive bugs.
The debugger works by connecting to a TCP port for every time PHP 3 starts up.
All error messages from that request will be sent to this TCP connection.
This information is intended for "debugging server" that can run inside an IDE or programmable editor (such as Emacs).
How to set up the debugger:
Set up a TCP port for the debugger in the configuration file (debugger.port) and enable it (debugger.enabled).
Set up a TCP listener on that port somewhere (for example socket -l -s 1400 on UNIX).
In your code, run "debugger_on (host)", where host is the IP number or name of the host running the TCP listener.
Prev
Home
Next
Debugging PHP
Up
Debugger Protocol
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 52-1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Frequently Asked Questions
Up
PHP Manual
Prev
Next
Prev
Home
Next
Stream open options
PHP Manual
Prev
Next
Example 51-1.
Note:
Example 51-2.
Note:
Example 51-3.
Note:
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
Appendixes
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
As of version 4.3.0, PHP supports a new SAPI type (Server Application Programming Interface) named CLI which means Command Line Interface.
As the name implies, this SAPI type main focus is on developing shell (or desktop as well) applications with PHP.
It' s worth mentioning that CLI and CGI are different SAPI's although they do share many of the same behaviors.
Since PHP 4.3.0 the CLI SAPI is no longer experimental and the option --enable-cli is on by default.
As of PHP 4.3.0, the name, location and existence of the CLI / CGI binaries will differ depending on how PHP is installed on your system.
You will note that both are named php.
If a module SAPI is chosen during configure, such as apxs, or the --disable-cgi option is used, the CLI is copied to {PREFIX} / bin / php during make install otherwise the CGI is placed there.
So, for example, if --with--apxs is in your configure line then the CLI is copied to {PREFIX} / bin / php during make install.
Alternatively you can specify --disable-cgi in your configure line.
Because both --enable-cli and --enable-cgi are enabled by default, simply having --enable-cli in your configure line does not necessarily mean the CLI will be copied as {PREFIX} / bin / php during make install.
What SAPI do I have?:
See also the function php_sapi_name() and the constant PHP_SAPI.
Unlike the CGI SAPI, no headers are written to the output.
Though the CGI SAPI provides a way to suppress HTTP headers, there 's no equivalent switch to enable them in the CLI SAPI.
It does not change the working directory to that of the script. (-C switch kept for compatibility)
Plain text error messages (no HTML formatting).
There are certain php.ini directives which are overriden by the CLI SAPI because they do not make sense in shell environments:
Table 23-1.
Overriden php.ini directives
Directive
It can be quite hard to read the error message in your shell when it 's cluttered with all those meaningless HTML tags, therefore this directive defaults to FALSE.
It is desired that any output coming from print(), echo() and friends is immediately written to the output and not cached in any buffer.
You still can use output buffering if you want to defer or manipulate standard output.
Due to endless possibilities of using PHP in shell environments, the maximum execution time has been set to unlimited.
Whereas applications written for the web are often executed very quickly, shell application tend to have a much longer execution time.
As of PHP 4.3.0, the PHP variables $argc and $argv are registered and filled in with the appropriate values when using the CLI SAPI.
Prior to this version, the creation of these variables behaved as they do in CGI and MODULE versions which requires the PHP directive register_globals to be on.
Example: $_SERVER[ 'argv']
These directives cannot be initialized with another value from the configuration file php.ini or a custom one (if specified).
However, their value can be changed during runtime (which does not make sense for all of those directives, e.g. register_argc_argv).
To ease working in the shell environment, the following constants are defined:
CLI specific Constants
Constant
Description
Given the above, you don 't need to open e.g. a stream for stderr yourself but simply use the constant instead of the stream resource:
The CLI SAPI does not change the current directory to the directory of the executed script!
Example showing the difference to the CGI SAPI:
?php / * Our simple test application named test.php* / echo getcwd(), "\n";?
When using the CGI version, the output is:
$pwd / tmp $php -q another_directory / test.php / tmp / another_directory
Using the CLI SAPI yields:
$pwd / tmp $php -f another_directory / test.php / tmp
Note:
The CGI SAPI supports the CLI SAPI behaviour by means of the -C switch when run from the command line.
The list of command line options provided by the PHP binary can be queried anytime by running PHP with the -h switch:
The CLI SAPI has three different ways of getting the PHP code you want to execute:
Telling PHP to execute a certain file.
Pass the PHP code to execute directly on the command line.
Note:
Read the example carefully, there are no beginning or ending tags!
The -r switch simply does not need them.
Using them will lead to a parser error.
Provide the PHP code to execute via standard input (stdin).
This gives the powerful ability to dynamically create PHP code and feed it to the binary, as shown in this (fictional) example:
$some_application _BAR_ some_filter _BAR_ php _BAR_ sort -u final_output.txt
Like every shell application, the PHP binary accepts a number of arguments but your PHP script can also receive arguments.
The number of arguments which can be passed to your script is not limited by PHP (the shell has a certain size limit in the number of characters which can be passed; usually you won't hit this limit).
The arguments passed to your script are available in the global array $argv.
The zero index always contains the script name (which is - in case the PHP code is coming from either standard input or from the command line switch -r).
The second registered global variable is $argc which contains the number of elements in the $argv array (not the number of arguments passed to the script).
As long as the arguments you want to pass to your script do not start with the - character, there 's nothing special to watch out for.
Passing an argument to your script which starts with a - will cause trouble because PHP Passing an argument to your script which starts with a - will cause trouble because PHP itself thinks it has to handle it.
To prevent this, use the argument list separator - -.
After this separator has been parsed by PHP, every argument following it is passed untouched to your script.
# This will not execute the given code but will show the PHP usage $php -r 'var_dump($argv);' -h Usage: php [options] [-f] file [args...] [...] # This will pass the '-h 'argument to your script and prevent PHP from showing it's usage $php -r'var_dump($argv);' - - -h array(2) {[0]= string(1) "-" [1]= string(2) "-h "}
However, there 's another way of using PHP for shell scripting.
Following this you can place normal PHP code included within the PHP starting and end tags.
Once you have set the execution attributes of the file appropriately (e.g. chmod +x test) your script can be executed like a normal shell or perl script:
$chmod 755 test $. / test -h - - foo array( 4) {[0]= string(6) ". / test" [1]= string(2) "-h "[2]= string(2) "- -" [3]= string(3) "foo "}
Table 23-3.
Command line options
Option
Description
Display colour syntax highlighted source.
This option uses the internal mechanism to parse the file and produces a HTML highlighted version of it and writes it to standard output.
Note that all it does it to generate a block of code [...] / code HTML tags, no HTML headers.
Note:
This option does not work together with the -r option.
Display source with stripped comments and whitespace.
Note:
This option does not work together with the -r option.
This switch is optional and can be left out.
Only providing the filename to execute is sufficient.
Writes the PHP, PHP SAPI, and Zend version to standard output, e.g.
$php -v PHP 4.3.0 (cli), Copyright (c) 1997-2002 The PHP Group Zend Engine v1.3.0, Copyright (c) 1998-2002 Zend Technologies
With this option one can either specify a directory where to look for php.ini or you can specify a custom INI file directly (which does not need to be named php.ini), e.g.:
Runs PHP interactively.
This option allows you to set a custom value for any of the configuration directives allowed in php.ini.
The syntax is:
-d configuration_directive[ =value]
# Omitting the value part will set the given configuration directive to "1" $php -d max_execution_time -r '$foo = ini_get("max_execution_time"); var_dump($foo); 'string(1) "1 "# Passing an empty value part will set the configuration directive to" "php -d max_execution_time= -r '$foo = ini_get("max_execution_time"); var_dump($foo);' string(0)" "# The configuration directive will be set to anything passed after the '= 'character $php -d max_execution_time=20 -r '$foo = ini_get("max_execution_time"); var_dump($foo);' string(2) "20" $php -d max_execution_time=doesntmakesense -r '$foo = ini_get("max_execution_time"); var_dump($foo); 'string(15) "doesntmakesense "
Generate extended information for debugger / profiler.
Load Zend extension.
If only a filename is given, PHP tries to load this extension from the current default library path on your system (usually specified / etc / ld.so.conf on Linux systems).
Passing a filename with an absolute path information will not use the systems library search path.
A relative filename with a directory information will tell PHP only to try to load the extension relative to the current directory.
This option provides a convenient way to only perform a syntax check on the given PHP code.
On succes, the text No syntax errors detected in filename is written to standard output and the shell return code is 0.
On failure, the text Errors parsing filename in addition to the internal parser error message is written to standard output and the shell return code is set to 255.
This option won' t find fatal errors (like undefined functions).
Use -f if you would like to test for fatal errors too.
Note:
This option does not work together with the -r option.
Using this option, PHP prints out the built in (and loaded) PHP and Zend modules:
This command line option calls phpinfo(), and prints out the results.
If PHP is not working correctly, it is advisable to use php -i and see whether any error messages are printed out before or in place of the information tables.
Beware that the output is in HTML and therefore quite huge.
This option allows execution of PHP right from within the command line.
The PHP start and end tags (?php and?) are not needed and will cause a parser error if present.
Note:
Care has to be taken when using this form of PHP to not collide with command line variable substitution done by the shell.
Example showing a parser error
With this option, you can get information about the actual list of command line options and some one line descriptions about what they do.
The PHP executable can be used to run PHP scripts absolutely independent from the web server.
If you are on a Unix system, you should add a special first line to your PHP script, and make it executable, so the system will know, what program should run the script.
On a Windows platform you can associate php.exe with the double click option of the .php files, or you can make a batch file to run the script through PHP.
The first line added to the script to work on Unix won 't hurt on Windows, so you can write cross platform programs this way.
A simple example of writing a command line PHP program can be found below.
Example 23-1.
Script intended to be run from command line (script.php)
This is a command line PHP script with one option.
Usage: ?php echo $argv[ 0];? option option can be some word you would like to print out.
With the --help, -help, -h, or -? options, you can get this help. ?php} else {echo $argv[1];}?
In the script above, we used the special first line to indicate that this file should be run by PHP.
We work with a CLI version here, so there will be no HTTP header printouts.
There are two variables you can use while writing command line applications with PHP: $argc and $argv.
The first is the number of arguments plus one (the name of the script running).
The second is an array containing the arguments, starting with the script name as number zero ($argv[0]).
In the program above we checked if there are less or more than one arguments.
Also if the argument was --help, -help, -h or -?, we printed out the help message, printing the script name dynamically.
If we received some other argument we echoed that out.
If you would like to run the above script on Unix, you need to make it executable, and simply call it as script.php echothis or script.php -h.
On Windows, you can make a batch file for this task:
Example 23-2.
Batch file to run a command line PHP script (script.bat)
@c:\php\cli\php.exe script.php %1 %2 %3 %4
Assuming you named the above program script.php, and you have your CLI php.exe in c:\php\cli\php.exe this batch file will run it for you with your added options: script.bat echothis or script.bat -h.
See also the Readline extension documentation for more functions you can use to enhance your command line applications in PHP.
Prev
Home
Next
Up
Function Reference
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
PHP transparently supports HTTP cookies.
Cookies are a mechanism for storing data in the remote browser and thus tracking or identifying return users.
You can set cookies using the setcookie() function.
Cookies are part of the HTTP header, so setcookie() must be called before any output is sent to the browser.
This is the same limitation that header() has.
You can use the output buffering functions to delay the script output until you have decided whether or not to set any cookies or send any headers.
Any cookies sent to you from the client will automatically be turned into a PHP variable just like GET and POST method data, depending on the register_globals and variables_order configuration variables.
If you wish to assign multiple values to a single cookie, just add [] to the cookie name.
In PHP 4.1.0 and later, the $_COOKIE auto-global array will always be set with any cookies sent from the client. $HTTP_COOKIE_VARS is also set in earlier versions of PHP when the track_vars configuration variable is set.
For more details, including notes on browser bugs, see the setcookie() function.
Prev
Home
Next
Up
Handling file uploads
PHP Manual
Prev
Chapter 18.
Handling file uploads
Next
The MAX_FILE_SIZE item cannot specify a file size greater than the file size that has been set in the upload_max_filesize ini-setting.
The default is 2 Megabytes.
Make sure to set memory_limit large enough.
If max_execution_time is set too small, script execution may be exceeded the value.
Make sure to set max_execution_time large enough.
If post_max_size set too small, large files cannot be uploaded.
Make sure to set post_max_size large enough.
Not validating which file you operate on may mean that users can access sensitive information in other directories.
Please note that the CERN httpd seems to strip off everything starting at the first whitespace in the content-type mime header it gets from the client.
As long as this is the case, CERN httpd will not support the file upload feature.
Due to the large amount of directory listing styles we cannot guarantee that files with exotic names (like containing spaces) are handled properly.
Prev
Home
Next
Error Messages Explained
Up
Uploading multiple files
PHP Manual
Prev
Chapter 18.
Handling file uploads
Next
Since PHP 4.2.0, PHP returns an appropriate error code along with the file array.
The error code can be found in the ['error'] segment of the file array that is created during the file upload by PHP.
In otherwords, the error might be found in $_FILES[ 'userfile']['error'].
Value:
0; There is no error, the file uploaded with success.
1; The uploaded file exceeds the upload_max_filesize directive in php.ini.
Value:
2; The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the html form.
Value:
3; The uploaded file was only partially uploaded.
Value:
4; No file was uploaded.
Note:
These became PHP constants in PHP 4.3.0
Prev
Home
Next
Handling file uploads
Up
Common Pitfalls
PHP Manual
Prev
Next
PHP is capable of receiving file uploads from any RFC-1867 compliant browser (which includes Netscape Navigator 3 or later, Microsoft Internet Explorer 3 with a patch from Microsoft, or later without a patch).
This feature lets people upload both text and binary files.
With PHP 's authentication and file manipulation functions, you have full control over who is allowed to upload and what is to be done with the file once it has been uploaded.
Related Configurations Note:
See also the file_uploads, upload_max_filesize, upload_tmp_dir, and post_max_size directives in php.ini
Note that PHP also supports PUT-method file uploads as used by Netscape Composer and W3C 's Amaya clients.
See the PUT Method Support for more details.
A file upload screen can be built by creating a special form which looks something like this:
Example 18-1.
File Upload Form
form enctype=" multipart / form-data "action="_URL_" method="post "input type="hidden" name="MAX_FILE_SIZE "value="30000" Send this file: input name="userfile "type="file" input type="submit "value="Send File" / form
Warning
The MAX_FILE_SIZE is advisory to the browser.
It is easy to circumvent this maximum.
So don 't count on it that the browser obeys your wish!
The PHP-settings for maximum-size, however, cannot be fooled.
The Variables defined for uploaded files differs depending on the PHP version and configuration.
The autoglobal $_FILES exists as of PHP 4.1.0 The $HTTP_POST_FILES array has existed since PHP 4.0.0.
These arrays will contain all your uploaded file information.
Using $_FILES is preferred.
If the PHP directive register_globals is on, related variable names will also exist. register_globals defaults to off as of PHP 4.2.0.
The contents of $_FILES from our example script is as follows.
Note that this assumes the use of the file upload name userfile, as used in the example script above.
The original name of the file on the client machine.
The mime type of the file, if the browser provided this information.
An example would be "image / gif".
The size, in bytes, of the uploaded file.
The temporary filename of the file in which the uploaded file was stored on the server.
The error code associated with this file upload. ['error'] was added in PHP 4.2.0
Note:
In PHP versions prior 4.1.0 this was named $HTTP_POST_FILES and it 's not an autoglobal variable like $_FILES is.
PHP 3 does not support $HTTP_POST_FILES.
When register_globals is turned on in php.ini, additional variables are available.
For example, $userfile_name will equal $_FILES[ 'userfile']['name'], $userfile_type will equal $_FILES['userfile']['type'], etc.
Keep in mind that as of PHP 4.2.0, register_globals defaults to off.
It 's preferred to not rely on this directive.
Files will by default be stored in the server 's default temporary directory, unless another location has been given with the upload_tmp_dir directive in php.ini.
The server 's default directory can be changed by setting the environment variable TMPDIR in the environment in which PHP runs.
Setting it using putenv() from within a PHP script will not work.
This environment variable can also be used to make sure that other operations are working on uploaded files, as well.
Example 18-2.
Validating file uploads
See also the function entries for is_uploaded_file() and move_uploaded_file() for further information.
The following example will process the file upload that came from a form.
?php / / In PHP earlier then 4.1.0, $HTTP_POST_FILES should be used instead of $_FILES. / / In PHP earlier then 4.0.3, use copy() and is_uploaded_file() instead of move_uploaded_file $uploaddir = '/ var / www / uploads /'; print "pre"; if (move_uploaded_file($_FILES['userfile']['tmp_name'], $uploaddir. $_FILES['userfile']['name'])) {print "File is valid, and was successfully uploaded.
Here' s some more debugging info:\n"; print_r($_FILES);} else {print "Possible file upload attack!
Here' s some debugging info:\n"; print_r($_FILES);}?
The PHP script which receives the uploaded file should implement whatever logic is necessary for determining what should be done with the uploaded file.
You can for example use the $_FILES[ 'userfile']['size'] variable to throw away any files that are either too small or too big.
You could use the $_FILES[ 'userfile']['type'] You could use the $_FILES['userfile']['type'] variable to throw away any files that didn't match a certain type criteria.
As of PHP 4.2.0, you could use $_FILES[ 'userfile']['error'] and plan your logic according to the error codes.
Whatever the logic, you should either delete the file from the temporary directory or move it elsewhere.
The file will be deleted from the temporary directory at the end of the request if it has not been moved away or renamed.
Prev
Home
Next
Up
Error Messages Explained
PHP Manual
Prev
Chapter 18.
Handling file uploads
Next
Multiple files can be uploaded using different name for input.
It is also possible to upload multiple files simultaneously and have the information organized automatically in arrays for you.
To do so, you need to use the same array submission syntax in the HTML form as you do with multiple selects and checkboxes:
Note:
Support for multiple file uploads was added in version 3.0.10.
Example 18-3.
Uploading multiple files
When the above form is submitted, the arrays $_FILES[ 'userfile'], $_FILES['userfile']['name'], and $_FILES['userfile']['size'] will be initialized (as well as in $HTTP_POST_FILES for PHP version prior 4.1.0).
When register_globals is on, globals for uploaded files are also initialized.
Each of these will be a numerically indexed array of the appropriate values for the submitted files.
For instance, assume that the filenames / home / test / review.html and / home / test / xwp.out are submitted.
In this case, $_FILES[ 'userfile']['name'][0] would contain the value review.html, and $_FILES['userfile']['name'][1] would contain the value xwp.out.
Similarly, $_FILES[ 'userfile']['size'][0] would contain review.html's filesize, and so forth.
$_FILES[ 'userfile']['name'][0], $_FILES['userfile']['tmp_name'][0], $_FILES['userfile']['size'][0], and $_FILES['userfile']['type'][0] are also set.
Prev
Home
Next
Common Pitfalls
Up
PUT method support
PHP Manual
Prev
Chapter 18.
Handling file uploads
Next
PUT method support has changed between PHP 3 and PHP 4.
In PHP 4, one should use the standard input stream to read the contents of an HTTP PUT.
Example 18-4.
Saving HTTP PUT files with PHP 4
?php / * PUT data comes in on the stdin stream * / $putdata = fopen( "php: / /stdin" ,"r"); / * Open a file for writting * / $fp = fopen("myputfile.ext" ,"w"); / * Read the data 1kb at a time and write to the file * / while ($data = fread($putdata,1024)) fwrite($fp,$data); / * Close the streams * / fclose($fp); fclose($putdata);?
Note:
All documentation below applies to PHP 3 only.
PHP provides support for the HTTP PUT method used by clients such as Netscape Composer and W3C Amaya.
PUT requests are much simpler than a file upload and they look something like this:
This would normally mean that the remote client would like to save the content that follows as: / path / filename.html in your web tree.
It is obviously not a good idea for Apache or PHP to automatically let everybody overwrite any files in your web tree.
So, to handle such a request you have to first tell your web server that you want a certain PHP script to handle the request.
In Apache you do this with the Script In Apache you do this with the Script directive.
It can be placed almost anywhere in your Apache configuration file.
A common place is inside a Directory block or perhaps inside a Virtualhost block.
A line like this would do the trick:
This tells Apache to send all PUT requests for URIs that match the context in which you put this line to the put.php script.
This assumes, of course, that you have PHP enabled for the .php extension and PHP is active.
Inside your put.php file you would then do something like this:
This would copy the file to the location requested by the remote client.
You would probably want to perform some checks and / or authenticate the user before performing this file copy.
The only trick here is that when PHP sees a PUT-method request it stores the uploaded file in a temporary file just like those handled but the POST-method.
When the request ends, this temporary file is deleted.
So, your PUT handling PHP script has to copy that file somewhere.
The filename of this temporary file is in the $PHP_PUT_FILENAME variable, and you can see the suggested destination filename in the $REQUEST_URI (may vary on non-Apache web servers).
This destination filename is the one that the remote client specified.
You do not have to listen to this client.
You could, for example, copy all uploaded files to a special uploads directory.
Prev
Home
Next
Uploading multiple files
Up
PHP Manual
Prev
Next
Prev
Home
Next
Spotting References
PHP Manual
Prev
Next
Example 16-1.
Example 16-2.
Note:
Prev
Home
Next
Features
Up
PHP Manual
Prev
Next
Note:
Warning
Prev
Home
Next
Up
PHP Manual
Prev
Next
See Appendix I for more information about the protocols supported by PHP.
Note:
Note:
The Windows versions of PHP earlier than PHP 4.3 did not support remote file accessing for the following functions: include(), include_once(), require(), require_once(), and the imagecreatefromXXX functions in the Reference XLI, Image functions extension.
Example 19-1.
Example 19-2.
Note:
Prev
Home
Next
PUT method support
Up
PHP Manual
Prev
Chapter 22.
Safe Mode
Next
Table 22-2.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the directory in which you are about to operate has the same UID (owner) as the script that is being executed.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the directory in which you are about to operate has the same UID (owner) as the script that is being executed.
This function is disabled in safe mode.
This function is disabled in safe mode.
This function is disabled in safe mode.
Checks whether the directory in which you are about to operate has the same UID (owner) as the script that is being executed.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the directory in which you are about to operate has the same UID (owner) as the script that is being executed.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the directory in which you are about to operate has the same UID (owner) as the script that is being executed.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the directory in which you are about to operate has the same UID (owner) as the script that is being executed. (on source and target)
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the directory in which you are about to operate has the same UID (owner) as the script that is being executed.
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the directory in which you are about to operate has the same UID (owner) as the script that is being executed. (note: only the target is checked)
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the directory in which you are about to operate has the same UID (owner) as the script that is being executed. (note: only the target is checked)
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the directory in which you are about to operate has the same UID (owner) as the script that is being executed. (note: only affected since PHP 4.2.1)
Checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Checks whether the directory in which you are about to operate has the same UID (owner) as the script that is being executed. (note: only affected since PHP 4.2.1)
Prev
Home
Next
Up
Using PHP from the command line
PHP Manual
Prev
Next
The PHP safe mode is an attempt to solve the shared-server security problem.
Table 22-1.
Security and Safe Mode Configuration Directives
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Using PHP from the command line
Apache-specific Functions
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the absolute value of number.
If the argument number is of type float, the return type is also float, otherwise it is integer (as float usually has a bigger value range than integer).
Example 1. abs() example
$abs = abs( -4.2); / / $abs = 4.2; (double / float) $abs2 = abs(5); / / $abs2 = 5; (integer) $abs3 = abs(-5); / / $abs3 = 5; (integer)
Prev
Home
Next
Mathematical Functions
Up
PHP Manual
Prev
Next
Note:
This function is not implemented on Windows platforms.
See also acos(), asinh() and atanh().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the arc cosine of arg in radians. acos() is the complementary function of cos(), which means that a==cos(acos(a)) for every value of a that is within acos() 'range.
See also acosh(), asin() and atan().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string with backslashes before characters that are listed in charlist Returns a string with backslashes before characters that are listed in charlist parameter.
It escapes \n, \r etc. in C-like style, characters with ASCII code lower than 32 and higher than 126 are converted to octal representation.
Be careful if you choose to escape characters 0, a, b, f, n, r, t and v.
They will be converted to \0, \a, \b, \f, \n, \r, \t and \v.
In PHP \0 (NULL), \r (carriage return), \n (newline) and \t (tab) are predefined escape sequences, while in C all of these are predefined escape sequences.
charlist like "\0..\37", which would escape all characters with ASCII code between 0 and 31.
Example 1. addcslashes() example
When you define a sequence of characters in the charlist argument make sure that you know what characters come between the characters that you set as the start and end of the range.
See also stripcslashes(), stripslashes(), htmlspecialchars(), and quotemeta().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string with backslashes before characters that need to be quoted in database queries etc.
These characters are single quote ('), double quote ("), backslash (\) and NUL (the NULL byte).
See also stripslashes(), htmlspecialchars(), and quotemeta().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
apache_child_terminate() will register the Apache process executing the current PHP request for termination once execution of PHP code it is completed.
It may be used to terminate a process after a script with high memory consumption has been run as memory will usually only be freed internally but not given back to the operating system.
Note:
The availability of this feature is controlled by the php.ini directive apache.child_terminate, which is set to off by default.
This feature is also not available on multithreaded versions of apache like the win32 version.
See also exit().
Prev
Home
Next
Apache-specific Functions
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.4, PHP 4)
This performs a partial request for a URI.
It goes just far enough to obtain all the important information about the given resource and returns this information in a class.
The properties of the returned class are:
Prev
Home
Next
Up
PHP Manual
Prev
Next
apache_note() is an Apache-specific function which gets and sets values in a request's notes table.
If called with one argument, it returns the current value of note note_name.
If called with two arguments, it sets the value of note note_name to note_value and returns the previous value of note note_name.
Prev
Home
Next
Up
PHP Manual
Prev
Next
apache_request_headers() returns an associative array of all the HTTP headers in the current request.
This is only supported when PHP runs as an Apache module.
Note:
Prior to PHP 4.3.0, apache_request_headers() was called getallheaders().
After PHP 4.3.0, getallheaders() is an alias for apache_request_headers().
Example 1. apache_request_headers() Example
Note:
You can also get at the value of the common CGI variables by reading them from the environment, which works whether or not you are using PHP as an Apache module.
Use phpinfo() to see a list of all of the available environment variables.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Returns an array of all Apache response headers.
This functionality is only available in PHP version 4.3.0 and greater.
See also getallheaders() and headers_sent().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
array_change_key_case() changes the keys in the input array to be all lowercase or uppercase.
The change depends on the last optional case The change depends on the last optional case parameter.
You can pass two constants there, CASE_UPPER and CASE_LOWER.
The default is CASE_LOWER.
The function will leave number indices as is.
Example 1. array_change_key_case() example
$input_array = array( "FirSt "= 1, "SecOnd" = 4); print_r(array_change_key_case($input_array, CASE_UPPER));
The printout of the above program will be:
Array ([FIRST] = 1 [SECOND] = 2)
Prev
Home
Next
Array Functions
Up
PHP Manual
Prev
Next
array_chunk() splits the array into several arrays with size values in them.
You may also have an array with less values at the end.
You get the arrays as members of a multidimensional array indexed with numbers starting from zero.
By setting the optional preserve_keys parameter to TRUE, you can force PHP to preserve the original keys from the input array.
If you specify FALSE new number indices will be used in each resulting array with indices starting from zero.
The default is FALSE.
Example 1. array_chunk() example
The printout of the above program will be:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. array_count_values() example
$array = array (1, "hello", 1, "world", "hello"); print_r(array_count_values ($array));
The printout of the above program will be:
Array ([1] = 2 [hello] = 2 [world] = 1)
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. array_diff_assoc() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_diff() returns an array containing all the values of array1 that are not present in any of the other arguments.
Note that keys are preserved.
Example 1. array_diff() example
$array1 = array ("a "= "green", "red", "blue", "red"); $array2 = array ("b" = "green", "yellow", "red"); $result = array_diff ($array1, $array2);
This makes $result have array ("blue");.
Multiple occurrences in $array1 are all treated the same way.
Note:
Two elements are considered equal if and only if (string) $elem1 === (string) $elem2.
In words: when the string representation is the same.
Note:
Please note that this function only checks one dimension of a n-dimensional array.
Of course you can check deeper dimensions by using array_diff( $array1[0], $array2[0]);.
Warning
This was broken in PHP 4.0.4!
See also array_diff_assoc(), array_intersect() and array_intersect_assoc().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_fill() fills an array with num entries of the value of the value parameter, keys starting at the start_index parameter.
Example 1. array_fill() example
$a = array_fill( 5, 6, 'banana');
$a now has the following entries using print_r():
Array ([5] = banana [6] = banana [7] = banana [8] = banana [9] = banana [10] = banana)
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_filter() returns an array containing all the elements of input filtered according a callback function.
If the input is an associative array the keys are preserved.
Example 1. array_filter() example
function odd( $var) {return ($var% 2 == 1);} function even($var) {return ($var% 2 == 0);} $array1 = array ("a"= 1, "b"= 2, "c"= 3, "d"= 4, "e"= 5); $array2 = array (6, 7, 8, 9, 10, 11, 12); echo "Odd :\n"; print_r(array_filter($array1, "odd")); echo "Even:\n"; print_r(array_filter($array2, "even"));
The printout of the program above will be:
Odd:
Array ([a] = 1 [c] = 3 [e] = 5) Even:
Users may not change the array itself from the callback function. e.g.
Add / delete an element, unset the array that array_filter() is applied to.
If the array is changed, the behavior of this function is undefined.
See also array_map() and array_reduce().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_flip() returns an array in flip order, i.e. keys from trans become values and trans's values become keys.
Note that the values of trans need to be valid keys, i.e. they need to be either integer or string.
A warning will be emitted if a value has the wrong type, and the key / value pair in question will not be flipped.
If a value has several occurrences, the latest key will be used as its values, and all others will be lost.
array_flip() returns FALSE if it fails.
Example 1. array_flip() example
Example 2. array_flip() example: collision
now $trans is:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array of the parameters.
The parameters can be given an index with the = operator.
Syntax "index = values", separated by commas, define index and values. index may be of type string or numeric.
When index is omitted, a integer index is automatically generated, starting at 0.
If index is an integer, next generated index will be the biggest integer index + 1.
Note that when two identical index are defined, the last overwrite the first.
The following example demonstrates how to create a two-dimensional array, how to specify keys for associative arrays, and how to skip-and-continue numeric indices in normal arrays.
Example 1. array() example
$fruits = array ("fruits "= array ("a"= "orange", "b"= "banana", "c"= "apple"), "numbers" = array (1, 2, 3, 4, 5, 6), "holes "= array ("first", 5 = "second", "third"));
Example 2.
Automatic index with array()
$array = array( 1, 1, 1, 1, 1, 8= 1, 4= 1, 19, 3= 13); print_r($array);
will display:
This example creates a 1-based array.
Example 3.
1-based index with array()
$firstquarter = array( 1 = 'January', 'February', 'March'); print_r($firstquarter);
will display:
Array ([1] = 'January '[2] = 'February' [3] = 'March ')
See also array_pad(), list(), and range().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. array_intersect_assoc() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_intersect() returns an array containing all the values of array1 that are present in all the arguments.
Note that keys are preserved.
Example 1. array_intersect() example
$array1 = array ("a "= "green", "red", "blue"); $array2 = array ("b" = "green", "yellow", "red"); $result = array_intersect ($array1, $array2);
This makes $result have
Array ([a] = green [0] = red)
Note:
Two elements are considered equal if and only if (string) $elem1 === (string) $elem2.
In words: when the string representation is the same.
Warning
This was broken in PHP 4.0.4!
See also array_intersect_assoc(), array_diff(), array_diff_assoc().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_key_exists() returns TRUE if the given key is set in the array. key can be any value possible for an array index.
Example 1. array_key_exists() example
$search_array = array( "first "= 1, "second" = 4); if (array_key_exists("first", $search_array)) {echo "The'first 'element is in the array";}
Note:
The name of this function is key_exists() in PHP version 4.0.6.
See also isset().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_keys() returns the keys, numeric and string, from the input array.
If the optional search_value is specified, then only the keys for that value are returned.
Otherwise, all the keys from the input are returned.
Example 1. array_keys() example
$array = array (0 = 100, "color "= "red"); print_r(array_keys ($array)); $array = array ("blue", "red", "green", "blue", "blue"); print_r(array_keys ($array, "blue")); $array = array ("color" = array("blue", "red", "green"), "size "= array("small", "medium", "large")); print_r(array_keys ($array));
The printout of the program above will be:
Array ([0] = 0 [1] = color) Array ([0] = 0 [1] = 3 [2] = 4) Array ([0] = color [1] = size)
Note:
This function was added to PHP 4, below is an implementation for those still using PHP 3.
Example 2.
Implementation of array_keys() for PHP 3 users
function array_keys ($arr, $term="") {$t = array(); while (list($k,$v) = each($arr)) {if ($term $v != $term) {continue;} $t[] = $k;} return $t;}
See also array_values().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_map() returns an array containing all the elements of arr1 after applying the callback function to each one.
The number of parameters that the callback function accepts should match the number of arrays passed to the array_map()
Example 1. array_map() example
?php function cube( $n) {return $n*$n*$n;} $a = array(1, 2, 3, 4, 5); $b = array_map("cube", $a); print_r($b);?
This makes $b have:
Example 2. array_map() - using more arrays
?php function show_Spanish( $n, $m) {return "The number $n is called $m in Spanish";} function map_Spanish($n, $m) {return array ($n = $m);} $a = array(1, 2, 3, 4, 5); $b = array("uno", "dos", "tres", "cuatro", "cinco"); $c = array_map("show_Spanish", $a, $b); print_r($c); $d = array_map("map_Spanish", $a, $b); print_r($d);?
This results:
/ / printout of $c Array ([0] = The number 1 is called uno in Spanish [1] = The number 2 is called dos in Spanish [2] = The number 3 is called tres in Spanish [3] = The number 4 is called cuatro in Spanish [4] = The number 5 is called cinco in Spanish) / / printout of $d Array ([0] = Array ([1] = uno) [1] = Array ([2] = dos) [2] = Array ([3] = tres) [3] = Array ([4] = cuatro) [4] = Array ([5] = cinco))
Usually when using two or more arrays, they should be of equal length because the callback function is applied in parallel to the corresponding elements.
If the arrays are of unequal length, the shortest one will be extended with empty elements.
An interesting use of this function is to construct an array of arrays, which can be easily performed by using NULL as the name of the callback function
Example 3.
Creating an array of arrays
?php $a = array( 1, 2, 3, 4, 5); $b = array("one", "two", "three", "four", "five"); $c = array("uno", "dos", "tres", "cuatro", "cinco"); $d = array_map(null, $a, $b, $c); print_r($d);?
The printout of the program above will be:
See also array_filter(), array_reduce(), and array_walk().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_merge() merges the elements of two or more arrays together so that the values of one are appended to the end of the previous one.
It returns the resulting array.
If the input arrays have the same string keys, then the later value for that key will overwrite the previous one.
If, however, the arrays contain numeric keys, the later value will not overwrite the original value, but will be appended.
Example 1. array_merge() example
$array1 = array ("color "= "red", 2, 4); $array2 = array ("a", "b", "color" = "green", "shape "= "trapezoid", 4); $result = array_merge ($array1, $array2);
The $result will be:
Array ([color] = green [0] = 2 [1] = 4 [2] = a [3] = b [shape] = trapezoid [4] = 4)
Example 2.
Simple array_merge() example
Don 't forget that numeric keys will be renumbered!
If you want to completely preserve the arrays and just want to append them to each other, use the + operator:
Note:
Shared keys will be overwritten on a first-come first-served basis.
See also array_merge_recursive().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_merge_recursive() merges the elements of two or more arrays together so that the values of one are appended to the end of the previous one.
It returns the resulting array.
If the input arrays have the same string keys, then the values for these keys are merged together into an array, and this is done recursively, so that if one of the values is an array itself, the function will merge it with a corresponding entry in another array too.
If, however, the arrays have the same numeric key, the later value will not overwrite the original value, but will be appended.
Example 1. array_merge_recursive() example
$ar1 = array ("color "= array ("favorite" = "red"), 5); $ar2 = array (10, "color "= array ("favorite" = "green", "blue")); $result = array_merge_recursive ($ar1, $ar2);
The $result will be:
Array ([color] = Array ([favorite] = Array ([0] = red [1] = green) [0] = blue) [0] = 5 [1] = 10)
See also array_merge().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_multisort() can be used to sort several arrays at once or a multi-dimensional array according by one of more dimensions.
It maintains key association when sorting.
The input arrays are treated as columns of a table to be sorted by rows - this resembles the functionality of SQL ORDER BY clause.
The first array is the primary one to sort by.
The rows (values) in that array that compare the same are sorted by the next input array, and so on.
The argument structure of this function is a bit unusual, but flexible.
The very first argument has to be an array.
Subsequently, each argument can be either an array or a sorting flag from the following lists.
Sorting order flags:
SORT_ASC - sort in ascending order
SORT_DESC - sort in descending order
Sorting type flags:
SORT_REGULAR - compare items normally
SORT_NUMERIC - compare items numerically
SORT_STRING - compare items as strings
No two sorting flags of the same type can be specified after each array.
The sorting flags specified after an array argument apply only to that array - they are reset to default SORT_ASC and SORT_REGULAR before each new array argument.
Returns TRUE on success or FALSE on failure.
Example 1.
Sorting multiple arrays
In this example, after sorting, the first array will contain 10, "a", 100, 100.
The second array will contain 1, 1, "2", 3.
The entries in the second array corresponding to the identical entries in the first array (100 and 100) were sorted as well.
Example 2.
Sorting multi-dimensional array
In this example, after sorting, the first array will contain 10, 100, 100, "a" (it was sorted as strings in ascending order), and the second one will contain 1, 3, "2", 1 (sorted as numbers, in descending order).
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_pad() returns a copy of the input padded to size specified by pad_size with value pad_value.
If pad_size is positive then the array is padded on the right, if it 's negative then on the left.
If the absolute value of pad_size is less than or equal to the length of the input then no padding takes place.
Example 1. array_pad() example
$input = array (12, 10, 9); $result = array_pad ($input, 5, 0); / / result is array (12, 10, 9, 0, 0) $result = array_pad ($input, -7, -1); / / result is array (-1, -1, -1, -1, 12, 10, 9) $result = array_pad ($input, 2, "noop"); / / not padded
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_pop() pops and returns the last value of the array, shortening the array by one element.
If array is empty (or is not an array), NULL will be returned.
Example 1. array_pop() example
$stack = array ("orange", "banana", "apple", "raspberry"); $fruit = array_pop ($stack);
After this, $stack will have only 3 elements:
Array ([0] = orange [1] = banana [2] = apple)
Warning
This function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or "".
Please read the section on Booleans for more information.
Use the === operator for testing the return value of this function.
See also array_push(), array_shift(), and array_unshift().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_push() treats array as a stack, and pushes the passed variables onto the end of array.
The length of array increases by the number of variables pushed.
Has the same effect as:
Returns the new number of elements in the array.
Example 1. array_push() example
$stack = array ("orange", "banana"); array_push ($stack, "apple", "raspberry");
This example would result in $stack having the following elements:
Array ([0] = orange [1] = banana [2] = apple [3] = raspberry)
See also array_pop(), array_shift(), and array_unshift().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_rand() is rather useful when you want to pick one or more random entries out of an array.
It takes an input array and an optional argument num_req which specifies how many entries you want to pick - if not specified, it defaults to 1.
If you are picking only one entry, array_rand() returns the key for a random entry.
Otherwise, it returns an array of keys for the random entries.
This is done so that you can pick random keys as well as values out of the array.
Don' t forget to call srand() to seed the random number generator.
Example 1. array_rand() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_reduce() applies iteratively the function function to the elements of the array input, so as to reduce the array to a single value.
If the optional initial is available, it will be used at the beginning of the process, or as a final result in case the array is empty.
Example 1. array_reduce() example
function rsum( $v, $w) {$v += $w; return $v;} function rmul($v, $w) {$v *= $w; return $v;} $a = array(1, 2, 3, 4, 5); $x = array(); $b = array_reduce($a, "rsum"); $c = array_reduce($a, "rmul", 10); $d = array_reduce($x, "rsum", 1);
This will result in $b containing 15, $c containing 1200 (= 1*2*3*4*5*10), and $d containing 1.
See also array_filter() and array_map().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_reverse() takes input array and returns a new array with the order of the elements reversed, preserving the keys if preserve_keys is TRUE.
Example 1. array_reverse() example
$input = array ("php", 4.0, array ("green", "red")); $result = array_reverse ($input); $result_keyed = array_reverse ($input, TRUE);
This makes both $result and $result_keyed have the same elements, but note the difference between the keys.
The printout of $result and $result_keyed will be:
Array ([0] = Array ([0] = green [1] = red) [1] = 4 [2] = php) Array ([2] = Array ([0] = green [1] = red) [1] = 4 [0] = php)
Note:
The second parameter was added in PHP 4.0.3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Searches haystack for needle and returns the key if it is found in the array, FALSE otherwise.
Note:
Prior to PHP 4.2.0, array_search() returns NULL on failure instead of FALSE.
If the optional third parameter strict is set to TRUE then the array_search() will also check the types of the needle in the haystack.
Warning
This function may return Boolean FALSE, but may also return a non-Boolean value which evaluates to FALSE, such as 0 or "".
Please read the section on Booleans for more information.
Use the === operator for testing the return value of this function.
See also array_keys() and in_array().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_shift() shifts the first value of the array off and returns it, shortening the array by one element and moving everything down.
All numerical array keys will be modified to start counting from zero while literal keys won 't be touched.
If array is empty (or is not an array), NULL will be returned.
Example 1. array_shift() example
$stack = array ("orange", "banana", "apple", "raspberry"); $fruit = array_shift ($stack);
This would result in $stack having 3 elements left:
Array ([0] = banana [1] = apple [2] = raspberry)
See also array_unshift(), array_push(), and array_pop().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_slice() returns the sequence of elements from the array array as specified by the offset and length parameters.
If offset is positive, the sequence will start at that offset in the array.
If offset is negative, the sequence will start that far from the end of the array.
If length is given and is positive, then the sequence will have that many elements in it.
If length is given and is negative then the sequence will stop that many elements from the end of the array.
If it is omitted, then the sequence will have everything from offset up until the end of the array.
Note that array_slice() will ignore array keys, and will calculate offsets and lengths based on the actual positions of elements within the array.
Example 1. array_slice() examples
$input = array ("a", "b", "c", "d", "e"); $output = array_slice ($input, 2); / / returns "c", "d", and "e "$output = array_slice ($input, 2, -1); / / returns "c", "d" $output = array_slice ($input, -2, 1); / / returns "d "$output = array_slice ($input, 0, 3); / / returns "a", "b", and "c"
See also array_splice().
Prev
Home
Next
Up
PHP Manual
Prev
Next
It returns an array containing the extracted elements.
If offset is positive then the start of removed portion is at that offset from the beginning of the input If offset is positive then the start of removed portion is at that offset from the beginning of the input array.
If offset is negative then it starts that far from the end of the input array.
If length is omitted, removes everything from offset to the end of the array.
If length is specified and is positive, then that many elements will be removed.
If length is specified and is negative then the end of the removed portion will be that many elements from the end of the array.
Tip: to remove everything from offset to the end of the array when replacement is also specified, use count( $input) for length.
If replacement array is specified, then the removed elements are replaced with elements from this array.
If offset and length are such that nothing is removed, then the elements from the replacement array are inserted in the place specified by the offset.
Tip: if the replacement is just one element it is not necessary to put array() around it, unless the element is an array itself.
The following equivalences hold:
Returns the array consisting of removed elements.
Example 1. array_splice() examples
$input = array ("red", "green", "blue", "yellow"); array_splice ($input, 2); / / $input is now array ("red", "green") $input = array ("red", "green", "blue", "yellow"); array_splice ($input, 1, -1); / / $input is now array ("red", "yellow") $input = array ("red", "green", "blue", "yellow"); array_splice ($input, 1, count($input), "orange"); / / $input is now array ("red", "orange") $input = array ("red", "green", "blue", "yellow"); array_splice ($input, -1, 1, array("black", "maroon")); / / $input is now array ("red", "green", / / "blue", "black", "maroon")
See also array_slice().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_sum() returns the sum of values in an array as an integer or float.
Example 1. array_sum() examples
$a = array( 2, 4, 6, 8); echo "sum(a) = ".array_sum($a) ."\n"; $b = array("a"= 1.2 ,"b"= 2.3 ,"c"= 3.4); echo "sum(b) = ".array_sum($b) ."\n";
The printout of the program above will be:
sum( a) = 20 sum(b) = 6.9
Note:
PHP versions prior to 4.0.6 modified the passed array itself and converted strings to numbers (which most of the time converted them to zero, depending on their value).
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_unique() takes input array and returns a new array without duplicate values.
Note that keys are preserved. array_unique() sorts the values treated as string at first, then will keep the first key encountered for every value, and ignore all following keys.
It does not mean that the key of the first related value from the unsorted array will be kept.
Note:
Two elements are considered equal if and only if (string) $elem1 === (string) $elem2.
In words: when the string representation is the same.
The first element will be used.
Warning
This was broken in PHP 4.0.4!
Example 1. array_unique() example
$input = array ("a "= "green", "red", "b" = "green", "blue", "red"); $result = array_unique ($input); print_r($result);
This will output:
Array ([b] = green [1] = blue [2] = red)
Example 2. array_unique() and types
$input = array (4 ,"4" ,"3",4,3 ,"3"); $result = array_unique ($input); var_dump($result);
The printout of the program above will be (PHP 4.0.6):
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_unshift() prepends passed elements to the front of the array.
Note that the list of elements is prepended as a whole, so that the prepended elements stay in the same order.
All numerical array keys will be modified to start counting from zero while literal keys won 't be touched.
Returns the new number of elements in the array.
Example 1. array_unshift() example
$queue = array ("orange", "banana"); array_unshift ($queue, "apple", "raspberry");
This would result in $queue having the following elements:
Array ([0] = apple [1] = raspberry [2] = orange [3] = banana)
See also array_shift(), array_push(), and array_pop().
Prev
Home
Next
Up
PHP Manual
Prev
Next
array_values() returns all the values from the input array.
Example 1. array_values() example
$array = array ("size "= "XL", "color" = "gold"); print_r(array_values ($array));
This will output:
Array ([0] = XL [1] = gold)
Note:
This function was added to PHP 4, below is an implementation for those still using PHP 3.
Example 2.
Implementation of array_values() for PHP 3 users
See also array_keys().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Applies the user-defined function function to each element of the array array.
Typically, function takes on two parameters.
The array parameter 's value being the first, and the key / index second.
If the optional userdata parameter is supplied, it will be passed as the third parameter to the callback function.
If function function requires more parameters than given to it, an error of level E_WARNING will be generated each time array_walk() calls function.
These warnings may be suppressed by prepending the PHP error operator @ to the array_walk() call, or by using error_reporting().
Note:
If function needs to be working with the actual values of the array, specify the first parameter of function as a reference.
Then, any changes made to those elements will be made in the original array itself.
Note:
Passing the key and userdata to function was added in 4.0.0
array_walk() is not affected by the internal array pointer of array. array_walk() will walk through the entire array regardless of pointer position.
To reset the pointer, use reset().
In PHP 3, array_walk() resets the pointer.
Users may not change the array itself from the callback function. e.g.
Add / delete elements, unset elements, etc.
If the array that array_walk() is applied to is changed, the behavior of this function is undefined, and unpredictable.
Example 1. array_walk() example
?php $fruits = array ("d"= "lemon", "a"= "orange", "b"= "banana", "c"= "apple"); function test_alter ($item1, $key, $prefix) {$item1 = "$prefix: $item1";} function test_print ($item2, $key) {echo "$key. $item2 br \n";} echo "Before ...:\n"; array_walk ($fruits, 'test_print'); array_walk ($fruits, 'test_alter', 'fruit'); echo "... and after:\n"; array_walk ($fruits, 'test_print');?
The printout of the program above will be:
Before...: d. lemon a. orange b. banana c. apple... and after: d. fruit: lemon a. fruit: orange b. fruit: banana c. fruit: apple
See also list(), foreach, each(), and call_user_func_array().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.
This is used mainly when sorting associative arrays where the actual element order is significant.
Example 1. arsort() example
$fruits = array ("d"= "lemon", "a"= "orange", "b"= "banana", "c"= "apple"); arsort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
This example would display:
a = orange d = lemon b = banana c = apple
The fruits have been sorted in reverse alphabetical order, and the index associated with each element has been maintained.
You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().
See also asort(), rsort(), ksort(), and sort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
ascii2ebcdic() is an Apache-specific function which is available only on EBCDIC based operating systems (OS / 390, BS2000).
It translates the ASCII encoded string ascii_str to its equivalent EBCDIC representation (binary safe), and returns the result.
See also the reverse function ebcdic2ascii()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
This function is not implemented on Windows platforms.
See also asin(), acosh() and atanh().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the arc sine of arg in radians. asin() is the complementary function of sin(), which means that a==sin(asin(a)) for every value of a that is within asin() 's range.
See also asinh(), acos() and atan().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.
This is used mainly when sorting associative arrays where the actual element order is significant.
Example 1. asort() example
$fruits = array ("d"= "lemon", "a"= "orange", "b"= "banana", "c"= "apple"); asort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
This example would display:
c = apple b = banana d = lemon a = orange
The fruits have been sorted in alphabetical order, and the index associated with each element has been maintained.
You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().
See also arsort(), rsort(), ksort(), and sort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. aspell_check()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. aspell_check_raw()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. aspell_new()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. aspell_suggest()
Prev
Home
Next
Up
BCMath Arbitrary Precision Mathematics Functions
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function calculates the arc tangent of the two variables x and y.
It is similar to calculating the arc tangent of y / x, except that the signs of both arguments are used to determine the quadrant of the result.
The function returns the result in radians, which is between -PI and PI (inclusive).
See also acos() and atan().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
This function is not implemented on Windows platforms.
See also atan(), asinh() and acosh().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the arc tangent of arg in radians. atan() is the complementary function of tan(), which means that a==tan(atan(a)) for every value of a that is within atan() 's range.
See also atanh(), asin() and acos().
Prev
Home
Next
Up
PHP Manual
Prev
Next
base64_decode() decodes encoded_data and returns the original data.
The returned data may be binary.
See also: base64_encode(), RFC 2045 section 6.8.
Prev
Home
Next
URL Functions
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
base64_encode() returns data encoded with base64.
This encoding is designed to make binary data survive transport through transport layers that are not 8-bit clean, such as mail bodies.
Base64-encoded data takes about 33% more space than the original data.
See also: base64_decode(), chunk_split(), RFC 2045 section 6.8.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Returns a string containing number represented in base tobase.
The base in which number is given is specified in frombase.
Both frombase and tobase have to be between 2 and 36, inclusive.
Digits in numbers with a base higher than 10 will be represented with the letters a-z, with a meaning 10, b meaning 11 and z meaning 35.
Example 1. base_convert()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Given a string containing a path to a file, this function will return the base name of the file.
If the filename ends in suffix this will also be cut off.
On Windows, both slash (/) and backslash (\) are used as path separator character.
In other environments, it is the forward slash (/).
Example 1. basename() example
$path = "/ home / httpd / html / index.php"; $file = basename ($path); / / $file is set to "index.php" $file = basename ($path ,".php"); / / $file is set to "index "
Note:
The suffix parameter was added in PHP 4.1.0.
See also: dirname()
Prev
Home
Next
Filesystem functions
Up
PHP Manual
Prev
Next
Adds the left_operand to the right_operand and returns the sum in a string.
The optional scale parameter is used to set the number of digits after the decimal place in the result.
See also bcsub().
Prev
Home
Next
BCMath Arbitrary Precision Mathematics Functions
Up
PHP Manual
Prev
Next
Compares the left_operand to the right_operand and returns the result as an integer.
The optional scale The optional scale parameter is used to set the number of digits after the decimal place which will be used in the comparison.
The return value is 0 if the two operands are equal.
If the left_operand is larger than the right_operand the return value is +1 and if the left_operand is less than the right_operand the return value is -1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Divides the left_operand by the right_operand and returns the result.
The optional scale sets the number of digits after the decimal place in the result.
See also bcmul().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Get the modulus of the left_operand using modulus.
See also bcdiv().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Multiply the left_operand by the right_operand and returns the result.
The optional scale sets the number of digits after the decimal place in the result.
See also bcdiv().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Raise x to the power y.
The optional scale can be used to set the number of digits after the decimal place in the result.
See also bcpowmod(), and bcsqrt().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function sets the default scale parameter for all subsequent bc math functions that do not explicitly specify a scale parameter.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Return the square root of the operand.
The optional scale parameter sets the number of digits after the decimal place in the result.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Subtracts the right_operand from the left_operand and returns the result in a string.
The optional scale parameter is used to set the number of digits after the decimal place in the result.
See also bcadd().
Prev
Home
Next
Up
Bzip2 Compression Functions
PHP Manual
Prev
Next
Returns an ASCII string containing the hexadecimal representation of str.
The conversion is done byte-wise with the high-nibble first.
See also pack() and unpack().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the decimal equivalent of the binary number represented by the binary_string argument.
bindec() converts a binary number to an integer.
The largest number that can be converted is 31 bits of 1 's or 2147483647 in decimal.
See also: decbin().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Closes the bzip2 file referenced by the pointer bz.
Returns TRUE on success or FALSE on failure.
The file pointer must be valid, and must point to a file successfully opened by bzopen().
See also bzopen().
Prev
Home
Next
Bzip2 Compression Functions
Up
PHP Manual
Prev
Next
bzcompress() compresses the source string and returns it as bzip2 encoded data.
The optional parameter blocksize specifies the blocksize used during compression and should be a number from 1 to 9 with 9 giving the best compression, but using more resources to do so. blocksize defaults to 4.
The optional parameter workfactor controls how the compression phase behaves when presented with worst case, highly repetitive, input data.
The value can be between 0 and 250 with 0 being a special case and 30 being the default value.
Regardless of the workfactor, the generated output is the same.
Example 1. bzcompress() Example
?php $str = "sample data"; $bzstr = bzcompress($str, 9); print ($bzstr);?
See also bzdecompress().
Prev
Home
Next
Up
PHP Manual
Prev
Next
bzdecompress() decompresses the source string containing bzip2 encoded data and returns it.
If the optional parameter small is TRUE, an alternative decompression algorithm will be used which uses less memory (the maximum memory requirement drops to around 2300K) but works at roughly half the speed.
See the bzip2 documentation for more information about this feature.
Example 1. bzdecompress()
?php $start_str = "This is not an honest face ?"; $bzstr = bzcompress($start_str); print ("Compressed String:"); print ($bzstr); print ("\n br \n "); $str = bzdecompress($bzstr); print ("Decompressed String:"); print ($str); print ("\n br \n ");?
See also bzcompress().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the error number of any bzip2 error returned by the file pointer bz.
See also bzerror() and bzerrstr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the error number and error string, in an associative array, of any bzip2 error returned by the file pointer bz.
Example 1. bzerror() Example
See also bzerrno() and bzerrstr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the error string of any bzip2 error returned by the file pointer bz.
See also bzerrno() and bzerror().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Forces a write of all buffered bzip2 data for the file pointer bz.
Returns TRUE on success or FALSE on failure.
See also bzread() and bzwrite().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Opens a bzip2 (.bz2) file for reading or writing. filename is the name of the file to open. mode is similar to the fopen() function (`r 'for read, `w' for write, etc.).
If the open fails, the function returns FALSE, otherwise it returns a pointer to the newly opened file.
Example 1. bzopen() Example
?php $bz = bzopen( "/ tmp / foo.bz2", "r"); $decompressed_file = bzread($bz, filesize(" / tmp / foo.bz2")); bzclose($bz); print ("The contents of / tmp / foo.bz2 are:"); print ("\n br \n "); print ($decompressed_file);?
See also bzclose().
Prev
Home
Next
Up
PHP Manual
Prev
Next
bzread() reads up to length bytes from the bzip2 file pointer referenced by bz.
Reading stops when length Reading stops when length (uncompressed) bytes have been read or EOF is reached, whichever comes first.
If the optional parameter length is not specified, bzread() will read 1024 (uncompressed) bytes at a time.
Example 1. bzread() Example
See also bzwrite() and bzopen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
bzwrite() writes the contents of the string data to the bzip2 file stream pointed to by bz.
If the optional length argument is given, writing will stop after length (uncompressed) bytes have been written or the end of string is reached, whichever comes first.
Example 1. bzwrite() Example
?php $str = "uncompressed data"; $bz = bzopen(" / tmp / foo.bz2", "w"); bzwrite($bz, $str, strlen($str)); bzclose($bz);?
See also bzread() and bzopen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
function barber ($type) {print "You wanted a $type haircut, no problem";} call_user_func ('barber', "mushroom"); call_user_func ('barber', "shave");
See also: call_user_func_array(), call_user_method(), call_user_method_array().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
The call_user_method_array() function is deprecated as of PHP 4.1.0, use the call_user_func_array() variety with the array ($obj, "method_name") syntax instead.
Calls the method referred by method_name from the user defined obj object, using the parameters in paramarr.
See also: call_user_func_array(), call_user_func(), call_user_method().
Note:
This function was added to the CVS code after release of PHP 4.0.4pl1
Prev
Home
Next
Class / Object Functions
Up
PHP Manual
Prev
Next
Warning
The call_user_method() function is deprecated as of PHP 4.1.0, use the call_user_func() variety with the array ($obj, "method_name") syntax instead.
Calls the method referred by method_name from the user defined obj object.
An example of usage is below, where we define a class, instantiate an object and use call_user_method() to call indirectly its print_info method.
?php class Country {var $NAME; var $TLD; function Country($name, $tld) {$this - NAME = $name; $this - TLD = $tld;} function print_info($prestr="") {echo $prestr ."Country: ".$this - NAME ."\n"; echo $prestr ."Top Level Domain: ".$this - TLD ."\n";}} $cntry = new Country("Peru" ,"pe"); echo "* Calling the object method directly\n"; $cntry - print_info(); echo "\n* Calling the same method indirectly\n"; call_user_method ("print_info", $cntry, "\t");?
See also call_user_func_array(), call_user_func(), and call_user_method_array().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the next highest integer value by rounding up value if necessary.
The return value of ceil() is still of type float as the value range of float is usually bigger than that of integer.
Example 1. ceil() example
See also floor() and round().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Changes PHP 's current directory to directory.
Returns TRUE on success or FALSE on failure..
See also getcwd().
Prev
Home
Next
Directory functions
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE if the date given is valid; otherwise returns FALSE.
Checks the validity of the date formed by the arguments.
A date is considered valid if:
year is between 1 and 32767 inclusive
month is between 1 and 12 inclusive
Leap year s are taken into consideration.
See also mktime() and strtotime().
Prev
Home
Next
Date and Time functions
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Attempts to change the group of the file filename to group (specified by name or number).
Only the superuser may change the group of a file arbitrarily; other users may change the group of a file to any group of which that user is a member.
Returns TRUE on success or FALSE on failure.
See also chown() and chmod().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Attempts to change the mode of the file specified by filename to that given in mode.
The mode parameter consists of three octal number components specifying access restrictions for the owner, the user group in which the owner is in, and to everybody else in this order.
One component can be computed by adding up the needed permissions for that target user base.
Number 1 means that you grant execute rights, number 2 means that you make the file writeable, number 4 means that you make the file readable.
You can also read more about modes on UNIX systems with 'man 1 chmod' and'man 2 chmod '.
Note:
It is probably not the same user you use for normal shell or FTP access.
See also chown() and chgrp().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of rtrim().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Attempts to change the owner of the file filename to user user (specified by name or number).
Only the superuser may change the owner of a file.
Returns TRUE on success or FALSE on failure.
See also chmod().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a one-character string containing the character specified by ascii.
Example 1. chr() example
You can find an ASCII-table over here: http: / /www.asciitable.com.
This function complements ord().
See also sprintf() with a format string of %c.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Changes the root directory of the current process to directory.
Returns TRUE on success or FALSE on failure..
Note:
It' s not wise to use this function when running in a webserver environment, because it's not possible to reset the root directory to / again at the end of the request.
This function will only function correct when you run PHP as command line too. (CLI)
This function is not implemented on Windows platforms.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Can be used to split a string into smaller chunks which is useful for e.g. converting base64_encode output to match RFC 2045 semantics.
It inserts end (defaults to "\r\n") every chunklen characters (defaults to 76).
It returns the new string leaving the original string untouched.
Example 1. chunk_split() example
See also explode(), split() wordwrap() and RFC 2045.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns TRUE if the class given by class_name has been defined, FALSE otherwise.
See also get_declared_classes().
Prev
Home
Next
Up
PHP Manual
Prev
Next
When you use stat(), lstat(), or any of the other functions listed in the affected functions list (below), PHP caches the information those functions return in order to provide faster performance.
However, in certain cases, you may want to clear the cached information.
For instance, if the same file is being checked multiple times within a single script, and that file is in danger of being removed or changed during that script 's operation, you may elect to clear the status cache.
In these cases, you can use the clearstatcache() function to clear the information that PHP caches about a file.
Note:
This function caches information about specific filenames, so you only need to call clearstatcache() if you are performing multiple operations on the same filename and require the information about that particular file to not be cached.
Affected functions include stat(), lstat(), file_exists(), is_writable(), is_readable(), is_executable(), is_file(), is_dir(), is_link(), filectime(), fileatime(), filemtime(), fileinode(), filegroup(), fileowner(), filesize(), filetype(), and fileperms().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Closes the directory stream indicated by dir_handle.
The stream must have previously been opened by opendir().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
compact() takes a variable number of parameters.
Each parameter can be either a string containing the name of the variable, or an array of variable names.
The array can contain other arrays of variable names inside it; compact() handles it recursively.
For each of these, compact() For each of these, compact() looks for a variable with that name in the current symbol table and adds it to the output array such that the variable name becomes the key and the contents of the variable become the value for that key.
In short, it does the opposite of extract().
It returns the output array with all the variables added to it.
Any strings that are not set will simply be skipped.
Example 1. compact() example
$city = "San Francisco"; $state = "CA"; $event = "SIGGRAPH"; $location_vars = array ("city", "state"); $result = compact ("event", "nothing_here", $location_vars);
After this, $result will be:
Array ([event] = SIGGRAPH [city] = San Francisco [state] = CA)
See also extract().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
Class / Object Functions
PHP Manual
Prev
Next
(PHP 3 = 3.0.7, PHP 4)
Returns TRUE if client disconnected.
See the Connection Handling description in the Features chapter for a complete explanation.
Prev
Home
Next
Miscellaneous functions
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.7, PHP 4)
Returns the connection status bitfield.
See the Connection Handling description in the Features chapter for a complete explanation.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.7, PHP 4 = 4.0.4)
Deprecated
This function is deprecated, and doesn 't even exist anymore as of 4.0.5.
See the Connection Handling description in the Features chapter for a complete explanation.
Prev
Home
Next
Up
PHP Manual
Prev
Next
constant() will return the value of the constant indicated by name.
constant() is useful if you need to retrieve the value of a constant, but do not know it's name. i.e.
It is stored in a variable or returned by a function.
Example 1. constant() example
?php define ("MAXSIZE", 100); echo MAXSIZE; echo constant("MAXSIZE"); / / same thing as the previous line?
See also define(), defined() and the section on Constants.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns the given string converted from one Cyrillic character set to another.
The from and to arguments are single characters that represent the source and target Cyrillic character sets.
The supported types are:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Makes a copy of a file.
Returns TRUE if the copy succeeded, FALSE otherwise.
Example 1. copy() example
if (!copy($file, $file .'.bak')) {print ("failed to copy $file... br \n");}
Note:
As of PHP 4.3.0, both source and dest may be URLs if the "fopen wrappers" have been enabled.
See fopen() for more details.
If dest is an URL, the copy operation may fail if the wrapper does not support overwriting of existing files.
Warning
If the destination file already exists, it will be overwritten.
See also move_uploaded_file(), rename(), and the section of the manual about handling file uploads.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the hyperbolic cosine of arg, defined as (exp(arg) + exp(-arg)) / 2.
See also cos(), acosh(), sin() and tan().
Prev
Home
Next
Up
PHP Manual
Prev
Next
cos() returns the cosine of the arg parameter.
The arg parameter is in radians.
See also acos(), sin() tan() and deg2rad().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The optional parameter Mode default to 0.
0 - an array with the byte-value as key and the frequency of every byte as value.
1 - same as 0 but only byte-values with a frequency greater than zero are listed.
2 - same as 0 but only byte-values with a frequency equal to zero are listed.
3 - a string containing all used byte-values is returned.
4 - a string containing all not used byte-values is returned.
See also strpos() and substr_count().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the number of elements in var, which is typically an array (since anything else will have one element).
If var is not an array, 1 will be returned (exception: count (NULL) equals 0).
Warning
count() may return 0 for a variable that isn't set, but it may also return 0 for a variable that has been initialized with an empty array.
Use isset() to test if a variable is set.
Please see the Arrays section of the manual for a detailed explanation of how arrays are implemented and used in PHP.
Example 1. count() example
Note:
The sizeof() function is an alias for count().
See also is_array(), isset(), and strlen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.8, PHP 4)
The cpdf_begin_text() function starts a text section.
Text output
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.8, PHP 4)
The cpdf_close() function closes the pdf document.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.8, PHP 4)
The cpdf_open() function opens a new pdf document.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.8, PHP 4)
The cpdf_save() function saves the current environment.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.8, PHP 4)
The cpdf_set_text_rendering() function determines how text is rendered.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.9, PHP 4)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.1)
Note:
Example 1.
?php $checksum = crc32( "The quick brown fox jumped over the lazy dog ."); printf("%u\n", $checksum);?
See also md5()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2.
Example 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
crypt() will return an encrypted string using the standard Unix DES -based encryption algorithm or alternative algorithms that may be available on the system.
Arguments are a string to be encrypted and an optional salt string to base the encryption on.
See the Unix man page for your crypt function for more information.
If the salt argument is not provided, one will be randomly generated by PHP.
Some operating systems support more than one type of encryption.
In fact, sometimes the standard DES-based encryption is replaced by an MD5-based encryption algorithm.
The encryption type is triggered by the salt argument.
At install time, PHP determines the capabilities of the crypt function and will accept salts for other encryption types.
If no salt is provided, PHP will auto-generate a standard two character salt by default, unless the default encryption type on the system is MD5, in which case a random MD5-compatible salt is generated.
PHP sets a constant named CRYPT_SALT_LENGTH which tells you whether a regular two character salt applies to your system or the longer twelve character salt is applicable.
If you are using the supplied salt, you should be aware that the salt is generated once.
If you are calling this function recursively, this may impact both appearance and security.
The standard DES-based encryption crypt() returns the salt as the first two characters of the output.
It also only uses the first eight characters of str, so longer strings that start with the same eight characters will generate the same result (when the same salt is used).
On systems where the crypt() function supports multiple encryption types, the following constants are set to 0 or 1 depending on whether the given type is available:
CRYPT_STD_DES - Standard DES-based encryption with a two character salt
CRYPT_EXT_DES - Extended DES-based encryption with a nine character salt
CRYPT_MD5 - MD5 encryption with a twelve character salt starting with $1$
CRYPT_BLOWFISH - Blowfish encryption with a sixteen character salt starting with $2$
Note:
There is no decrypt function, since crypt() uses a one-way algorithm.
Example 1. crypt() examples
See also md5() and the Mcrypt extension.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Tip:
As with anything that outputs its result directly to the browser, you can use the output-control functions to capture the output of this function, and save it in a string (for example).
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Every array has an internal pointer to its "current" element, which is initialized to the first element inserted into the array.
The current() function simply returns the array element that's currently being pointed by the internal pointer.
It does not move the pointer in any way.
If the internal pointer points beyond the end of the elements list, current() returns FALSE.
Warning
If the array contains empty elements (0 or "", the empty string) then this function will return FALSE for these elements as well.
This makes it impossible to determine if you are really at the end of the list in such an array using current().
To properly traverse an array that may contain empty elements, use the each() function.
See also end(), next(), prev(), and reset().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
In otherwords, timestamp is optional and defaults to the value of time().
The valid range of a timestamp is typically from Fri, 13 Dec 1901 20:45:54 GMT to Tue, 19 Jan 2038 03:14:07 GMT. (These are the dates that correspond to the minimum and maximum values for a 32-bit signed integer).
On windows this range is limited from 01-01-1970 to 19-01-2038.
Additionally, some databases have functions to convert their date formats into timestamps (such as MySQL's UNIX_TIMESTAMP function).
format character
Example returned values
am or pm
AM or PM
Swatch Internet time
d
01 to 31
Mon through Sun
A full textual representation of a month, such as January or March
g
1 through 12
0 through 23
01 through 12
00 through 23
00 to 59
1 if Daylight Savings Time, 0 otherwise.
1 to 31
Sunday through Saturday
1 if it is a leap year, 0 otherwise.
01 through 12
Jan through Dec
1 through 12
Example: +0200
Thu, 21 Dec 2000 16:01:07 +0200
00 through 59
st, nd, rd or th.
28 through 31
Examples:
See also time()
0 (for Sunday) through 6 (for Saturday)
ISO-8601 week number of year, weeks starting on Monday (added in PHP 4.1.0)
42 (the 42nd week in the year)
A full numeric representation of a year, 4 digits
1999 or 2003
Examples:
0 through 366
Timezone offset in seconds.
-43200 through 43200
The Z format will always return 0 when using gmdate().
?php / / Prints something like:
Wednesday echo date( "l"); / / Prints something like:
Wednesday 15th of January 2003 05:51:38 AM echo date ("l dS of F Y h:i:s A"); / / Prints:
You can prevent a recognized character in the format string from being expanded by escaping it with a preceding backslash.
Example 2.
?php / / prints something like:
It is possible to use date() and mktime() together to find dates in the future or the past.
Example 3. date() and mktime() example
Note:
This can be more reliable than simply adding or subtracting the number of seconds in a day or month to a timestamp because of daylight savings time.
Note that you should escape any other characters, as any which currently have a special meaning will produce undesirable results, and other characters may be assigned meaning in future PHP versions.
When escaping, be sure to use single quotes to prevent characters like \n from becoming newlines.
Example 4. date() Formatting
March 10th, 2001, 5:16:18 pm $today = date( "F j, Y, g:i a"); / / March 10, 2001, 5:16 pm $today = date("m.d.y"); / / 03.10.01 $today = date("j, n, Y"); / / 10, 3, 2001 $today = date("Ymd"); / / 20010310 $today = date('h-i-s, j-m-y, it is w Day z '); / / 05-16-17, 10-03-01, 1631 1618 6 Fripm01 $today = date('\i\t \i\s \t\h\e jS \d\a\y .'); / / It is the 10th day. $today = date("D M j G:i:s T Y"); / / Sat Mar 10 15:16:08 MST 2001 $today = date('H:m:s \m \i\s\ \m\o\n\t\h'); / / 17:03:17 m is month $today = date("H:i:s"); / / 17:16:17?
To format dates in other languages, you should use the setlocale() and strftime() functions.
See also getlastmod(), gmdate(), mktime(), strftime() and time().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Table 1.
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Adds the data in the record to the database.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Marks record to be deleted from the database.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the data from record in an array.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.4, PHP 4)
Returns the data from record in an associative array.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
The flags correspond to those for the open() system call. (Typically 0 means read-only, 1 means write-only, and 2 means read and write.)
When safe mode is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
Date and Time functions
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Getting the information on the command line
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Deletes the value for key in the database.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the first key in the database.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Adds the value to the database with the specified key.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the next key after key.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
When safe mode is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Returns TRUE on success or FALSE on failure.
Example 1. dbx_close() example
?php $link = dbx_connect( DBX_MYSQL, "localhost", "db", "username", "password") or die ("Could not connect"); print("Connected successfully"); dbx_close($link);?
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. dbx_compare() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. dbx_connect() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. dbx_error() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. dbx_escape_string() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2. lists each field 's name and type
Example 3. outputs the content of data property into HTML table
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Note:
Example 1. dbx_sort() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Example 1. debug_backtrace() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3)
Disables the internal PHP debugger.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string containing a binary representation of the given number argument.
The largest number that can be converted is 4294967295 in decimal resulting to a string of 32 1 's.
See also: bindec().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string containing a hexadecimal representation of the given number Returns a string containing a hexadecimal representation of the given number argument.
The largest number that can be converted is 2147483647 in decimal resulting to "7fffffff".
See also hexdec().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string containing an octal representation of the given number argument.
The largest number that can be converted is 2147483647 in decimal resulting to "17777777777".
See also octdec().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the named constant given by name has been defined, FALSE otherwise.
Example 1.
Checking Constants
?php if (defined("CONSTANT")) {/ / Note that it should be quoted echo CONSTANT; / /}?
See also define(), constant(), get_defined_constants() and the section on Constants.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Defines a named constant.
See the section on constants for more details.
The name of the constant is given by name; the value is given by value.
The optional third parameter case_insensitive is also available.
If the value TRUE is given, then the constant will be defined case-insensitive.
The default behaviour is case-sensitive; i.e.
CONSTANT and Constant represent different values.
Example 1.
Defining Constants
?php define ("CONSTANT", "Hello world ."); echo CONSTANT; / / outputs "Hello world. "echo Constant; / / outputs "Constant" and issues a notice. define ("GREETING", "Hello you .",TRUE); echo GREETING; / / outputs "Hello you. "echo Greeting; / / outputs "Hello you."?
Returns TRUE on success or FALSE on failure.
See also defined(), constant() and the section on Constants.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function converts number from degrees to the radian equivalent.
See also rad2deg().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This is a dummy manual entry to satisfy those people who are looking for unlink() or unset() in the wrong place.
See also: unlink() to delete files, unset() to delete variables.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of exit().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
Directory functions
PHP Manual
Prev
Next
Given a string containing a path to a file, this function will return the name of the directory.
On Windows, both slash (/) and backslash (\) are used as path separator character.
In other environments, it is the forward slash (/).
Example 1. dirname() example
$path = "/ etc / passwd"; $file = dirname ($path); / / $file is set to" / etc "
Note:
In PHP 4.0.3, dirname() was fixed to be POSIX-compliant.
Essentially, this means that if there are no slashes in path, a dot ('.') is returned, indicating the current directory.
Otherwise, the returned string is path with any trailing / component removed.
Note that this means that you will often get a slash or a dot back from dirname() in situations where the older functionality would have given you the empty string.
See also: basename(), pathinfo(), and realpath().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Given a string containing a directory, this function will return the number of bytes available on the corresponding filesystem or disk partition.
Example 1. disk_free_space() example
$df = disk_free_space( "/ "); / / $df contains the number of bytes / / available on" / "
Prev
Home
Next
Up
PHP Manual
Prev
Next
This is a deprecated alias of disk_free_space().
Use that function instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Given a string containing a directory, this function will return the total number of bytes on the corresponding filesystem or disk partition.
Example 1. disk_total_space() example
$df = disk_total_space( "/ "); / / $df contains the total number of / / bytes available on" / "
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
This function is not implemented on Windows platforms.
Table 1.
Note:
Table 2.
Note:
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function returns a new instance of class DomAttribute.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function returns a new instance of class DomCData.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function returns a new instance of class DomComment.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function returns a new instance of class DomElement.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function returns a new instance of class DomEntityReference.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function returns a new instance of class DomCData.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function returns a new instance of class DomText.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function returns an object of class DomDocumentType.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function returns the root element node of a document.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Creates an XML document from the dom representation.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Creates an HTML document from the dom representation.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function returns the public id of the document type.
Retrieving the public id
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Returns the system id of the document type.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Returns the attribute with name name of the current node.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Sets an attribute with name name ot the given value.
Setting an attribute
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2.
Example 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This functions appends a sibling to an existing node.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function inserts the new node newnode right before the node refnode.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function returns the document the current node belongs to.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function returns the previous sibling of the current node.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This functions removes a child from a list of children.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
(PHP 4.2) This function replaces the child oldnode with the passed new node.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
(PHP 4.2) This function replaces an existing node with the passed new node.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Sets the namespace of a node to uri.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.1)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.1)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of floatval().
Note:
This alias is a left-over from a function-renaming.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the current key and value pair from the array array and advances the array cursor.
This pair is returned in a four-element array, with the keys 0, 1, key, and value.
Elements 0 and key contain the key name of the array element, and 1 and value contain the data.
If the internal pointer for the array points past the end of the array contents, each() returns FALSE.
Example 1. each() examples
$bar now contains the following key / value pairs:
$bar now contains the following key / value pairs:
each() is typically used in conjunction with list() to traverse an array; for instance, $_POST:
Example 2.
Traversing $_POST with each()
echo "Values submitted via POST method: br / \n"; reset ($_POST); while (list ($key, $val) = each ($_POST)) {echo "$key = $val br / \n";}
After each() has executed, the array cursor will be left on the next element of the array, or on the last element if it hits the end of the array.
You have to use reset() if you want to traverse the array again using each.
See also key(), list(), current(), reset(), next(), prev(), and foreach.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. easter_date() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. easter_days() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
ebcdic2ascii() is an Apache-specific function which is available only on EBCDIC based operating systems (OS / 390, BS2000).
It translates the EBCDIC encoded string ebcdic_str to its equivalent ASCII representation (binary safe), and returns the result.
See also the reverse function ascii2ebcdic()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Outputs all parameters.
echo() is not actually a function (it is a language construct) so you are not required to use parentheses with it.
In fact, if you want to pass more than one parameter to echo, you must not enclose the parameters within parentheses.
It is not possible to use echo() in a variable function context.
Example 1. echo() examples
echo() also has a shortcut syntax, where you can immediately follow the opening tag with an equals sign.
Note:
This short syntax only works with the short_open_tag configuration setting enabled.
See also print(), printf(), and flush().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
end() advances array's internal pointer to the last element, and returns that element.
Example 1.
A simple end() example
?php $fruits = array( 'apple' ,'banana' ,'cranberry'); print end($fruits); / / cranberry?
See also current(), each(), next(), and reset().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. ereg() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. eregi() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. ereg_replace() Example
Example 2. ereg_replace() Example
Example 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1. error_log() log types
Warning
Example 1. error_log() examples
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. error_reporting() examples
Table 1. error_reporting() level constants and bit values
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
eval() evaluates the string given in code_str as PHP code.
There are some factors to keep in mind when using eval().
Remember that the string passed must be valid PHP code, including things like terminating statements with a semicolon so the parser doesn' t die on the line after the eval(), and properly escaping things in code_str.
A return statement will terminate the evaluation of the string immediately.
In PHP 4, eval() returns NULL unless return() is called in the evaluated code, in which case the value passed to return() In PHP 4, eval() returns NULL unless return() is called in the evaluated code, in which case the value passed to return() is returned.
In PHP 3, eval() does not return a value.
Example 1. eval() example - simple text merge
?php $string = 'cup'; $name = 'coffee'; $str = 'This is a $string with my $name in it. br'; echo $str; eval ("\$str = \"$str\" ;"); echo $str;?
The above example will show:
This is a $string with my $name in it.
This is a cup with my coffee in it.
Tip:
As with anything that outputs its result directly to the browser, you can use the output-control functions to capture the output of this function, and save it in a string (for example).
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. exif_read_data() example
Note:
Note:
Note:
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. exif_thumbnail() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
This is not a real function, but a language construct.
The exit() function terminates execution of the script.
It prints status just before exiting.
If status is an integer, that value will also be used as the exit status.
Exit statuses should be in the range 1 to 254, the exit status 255 is reserved by PHP and shall not be used.
Note:
The current CVS version does NOT print the status if it is an integer.
Note:
The die() function is an alias for exit().
Example 1. exit() example
?php $filename = '/ path / to / data-file'; $file = fopen ($filename, 'r') or exit("unable to open file ($filename)");?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns e raised to the power of arg.
See also pow().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string separator.
If limit is set, the returned array will contain a maximum of limit elements with the last element containing the rest of string.
If separator is an empty string (""), explode() will return FALSE.
If separator contains a value that is not contained in string, then explode() will return an array containing string.
Note:
The limit parameter was added in PHP 4.0.1
Example 1. explode() examples
Note:
Although implode() can for historical reasons accept its parameters in either order, explode() cannot.
You must ensure that the separator argument comes before the string argument.
See also preg_split(), spliti(), split(), and implode().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is used to import variables from an array into the current symbol table.
It takes an associative array var_array and treats keys as variable names and values as variable values.
For each key / value pair it will create a variable in the current symbol table, subject to extract_type and prefix parameters.
Note:
Beginning with version 4.0.5, this function returns the number of variables extracted.
Note:
EXTR_IF_EXISTS and EXTR_PREFIX_IF_EXISTS was introduced in version 4.2.0.
Note:
EXTR_REFS was introduced in version 4.3.0.
It also checks for collisions with existing variables in the symbol table.
The way invalid / numeric keys and collisions are treated is determined by the extract_type.
It can be one of the following values:
If there is a collision, overwrite the existing variable.
If there is a collision, don 't overwrite the existing variable.
If there is a collision, prefix the variable name with prefix.
Prefix all variable names with prefix.
Beginning with PHP 4.0.5, this includes numeric variables as well.
Only prefix invalid / numeric variable names with prefix.
This flag was added in PHP 4.0.5.
Only overwrite the variable if it already exists in the current symbol table, otherwise do nothing.
This is useful for defining a list of valid variables and then extracting only those variables you have defined out of $_REQUEST, for example.
This flag was added in PHP 4.2.0.
Only create prefixed variable names if the non-prefixed version of the same variable exists in the current symbol table.
This flag was added in PHP 4.2.0.
This effectively means that the values of the imported variables are still referencing the values of the var_array parameter.
You can use this flag on its own or combine it with any other flag by OR 'ing the extract_type.
This flag was added in PHP 4.3.0.
If extract_type is not specified, it is assumed to be EXTR_OVERWRITE.
Note that prefix is only required if extract_type is EXTR_PREFIX_SAME, EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID or EXTR_PREFIX_IF_EXISTS.
If the prefixed result is not a valid variable name, it is not imported into the symbol table.
extract() returns the number of variables successfully imported into the symbol table.
A possible use for extract() is to import into the symbol table variables contained in an associative array returned by wddx_deserialize().
Example 1. extract() example
?php / * Suppose that $var_array is an array returned from wddx_deserialize * / $size = "large"; $var_array = array ("color" = "blue", "size "= "medium", "shape" = "sphere"); extract ($var_array, EXTR_PREFIX_SAME, "wddx"); print "$color, $size, $shape, $wddx_size\n";?
The above example will produce:
blue, large, sphere, medium
The $size wasn 't overwritten, because we specified EXTR_PREFIX_SAME, which resulted in $wddx_size being created.
If EXTR_SKIP was specified, then $wddx_size wouldn 't even have been created.
EXTR_OVERWRITE would have caused $size to have value "medium", and EXTR_PREFIX_ALL would result in new variables being named $wddx_color, $wddx_size, and $wddx_shape.
You must use an associative array, a numerically indexed array will not produce results unless you use EXTR_PREFIX_ALL or EXTR_PREFIX_INVALID.
See also compact().
Prev
Home
Next
Up
PHP Manual
Prev
Next
ezmlm_hash() calculates the hash value needed when keeping EZMLM mailing lists in a MySQL database.
Example 1.
Calculating the hash and subscribing a user
Prev
Home
Next
Mail functions
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Example 1. fbsql_close() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Returns TRUE on success or FALSE on failure.
fbsql_commit() ends the current transaction by writing all inserts, updates and deletes to the disk and unlocking all row and table locks held by the transaction.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_connect() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Example 1. fbsql_create_blob() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Example 1. fbsql_create_clob() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_create_db() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Example 1. fbsql_create_clob() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Returns TRUE on success or FALSE on failure.
fbsql_data_seek() moves the internal row pointer of the FrontBase result associated with the specified result identifier to point to the specified row number.
Example 1. fbsql_data_seek() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Returns:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Returns TRUE on success or FALSE on failure.
fbsql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_fetch_array() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_fetch_assoc() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Returns an object containing field information.
Example 1. fbsql_fetch_field() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Returns:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_fetch_object() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Returns:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_field_name() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Seeks to the specified field offset.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_field_type() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_list_dbs() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_list_fields() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_next_result() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
fbsql_num_rows() returns the number of rows in a result set.
Example 1. fbsql_num_rows() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Returns:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. fbsql_query() example
Example 2. fbsql_query() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Example 1. fbsql_read_blob() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Example 1. fbsql_read_clob() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Returns TRUE on success or FALSE on failure.
fbsql_rollback() ends the current transaction by rolling back all statements issued since last commit.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Returns TRUE on success or FALSE on failure.
fbsql_start_db()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Returns TRUE on success or FALSE on failure.
fbsql_stop_db()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. fbsql_tablename() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
The file pointed to by handle is closed.
Returns TRUE on success or FALSE on failure.
The file pointer must be valid, and must point to a file successfully opened by fopen() or fsockopen().
Example 1.
A simple fclose() example
?php $handle = fopen( 'somefile.txt', 'r'); fclose($handle);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
The fdf_create() creates a new FDF document.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
The fdf_open() function opens a file with form data.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
The fdf_save() function saves a FDF document.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
The fdf_set_status() sets the value of the / STATUS key.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the file pointer is at EOF or an error occurs; otherwise returns FALSE.
The file pointer must be valid, and must point to a file successfully opened by fopen(), popen(), or fsockopen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function forces a write of all buffered output to the resource pointed to by the file handle handle.
Returns TRUE if successful, FALSE otherwise.
The file pointer must be valid, and must point to a file successfully opened by fopen(), popen(), or fsockopen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns FALSE on EOF.
The file pointer must be valid, and must point to a file successfully opened by fopen(), popen(), or fsockopen().
This function is binary safe.
See also fread(), fopen(), popen(), fsockopen(), and fgets().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Similar to fgets() except that fgetcsv() parses the line it reads for fields in CSV format and returns an array containing the fields read.
The optional third delimiter parameter defaults as a comma.
The optional enclosure cannot be null, and is limited to one character.
If enclosure is more than one character, only the first character is used.
Note:
The enclosure parameter was added in PHP 4.3.0.
The handle parameter must be a valid file pointer to a file successfully opened by fopen(), popen(), or fsockopen().
The length parameter must be greater than the longest line to be found in the CSV file (allowing for trailing line-end characters).
fgetcsv() returns FALSE on error, including end of file.
Note:
A blank line in a CSV file will be returned as an array comprising a single null field, and will not be treated as an error.
Example 1.
Read and print the entire contents of a CSV file
?php $row = 1; $handle = fopen ("test.csv" ,"r"); while ($data = fgetcsv ($handle, 1000, ",")) {$num = count ($data); print" p $num fields in line $row: br \n"; $row++; for ($c=0; $c $num; $c++) {print $data[$c]. "br \n";}} fclose ($handle);?
See also explode(), file(), and pack()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string of up to length - 1 bytes read from the file pointed to by handle.
Reading ends when length - 1 bytes have been read, on a newline (which is included in the return value), or on EOF (whichever comes first).
If no length is specified, the length defaults to 1k, or 1024 bytes.
If an error occurs, returns FALSE.
Common Pitfalls:
People used to the 'C' semantics of fgets() should note the difference in how EOF is returned.
The file pointer must be valid, and must point to a file successfully opened by fopen(), popen(), or fsockopen().
A simple example follows:
Example 1.
Reading a file line by line
$handle = fopen ("/ tmp / inputfile.txt", "r"); while (!feof ($handle)) {$buffer = fgets($handle, 4096); echo $buffer;} fclose ($handle);
Note:
The length parameter became optional in PHP 4.2.0, if omitted, it would assume 1024 as the line length.
As of PHP 4.3, omitting length will keep reading from the stream until it reaches the end of the line.
If the majority of the lines in the file are all larger than 8KB, it is more resource efficient for your script to specify the maximum line length.
Note:
This function is binary safe as of PHP 4.3.
Earlier versions were not binary safe.
Note:
If you are having problems with PHP not recognizing the line endings when reading files either on or created by a Macintosh computer, you might want to enable the auto_detect_line_endings run-time configuration option.
See also fread(), fopen(), popen(), fgetc(), fsockopen(), and socket_set_timeout().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Identical to fgets(), except that fgetss attempts to strip any HTML and PHP tags from the text it reads.
You can use the optional third parameter to specify tags which should not be stripped.
Note:
If you are having problems with PHP not recognizing the line endings when reading files either on or created by a Macintosh computer, you might want to enable the auto_detect_line_endings run-time configuration option.
See also fgets(), fopen(), fsockopen(), popen(), and strip_tags().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the time the file was last accessed, or FALSE in case of an error.
The time is returned as a Unix timestamp.
The results of this function are cached.
See clearstatcache() for more details.
Note:
The atime of a file is supposed to change whenever the data blocks of a file are being read.
This can be costly performancewise when an application regularly accesses a very large number of files or directories.
Some Unix filesystems can be mounted with atime updates disabled to increase the performance of such applications; USENET news spools are a common example.
On such filesystems this function will be useless.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the time the file was last changed, or FALSE in case of an error.
The time is returned as a Unix timestamp.
The results of this function are cached.
See clearstatcache() for more details.
Note:
In most Unix filesystems, a file is considered changed when its inode data is changed; that is, when the permissions, owner, group, or other metadata from the inode is updated.
See also filemtime() (which is what you want to use when you want to create "Last Modified "footers on web pages) and fileatime().
Note also that in some Unix texts the ctime of a file is referred to as being the creation time of the file.
This is wrong.
There is no creation time for Unix files in most Unix filesystems.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the file specified by filename exists; FALSE otherwise.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
The results of this function are cached.
See clearstatcache() for more details.
Using Windows shares:
On windows, use / /computername / share / filename or \\\\computername\share\filename to check files on network shares.
Example 1.
Testing whether a file exists
?php $filename = '/ path / to / foo.txt'; if (file_exists($filename)) {print "The file $filename exists";} else {print "The file $filename does not exist";}?
See also is_readable(), is_writable(), is_file() and file().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Identical to file(), except that file_get_contents() returns the file in a string.
Note:
This function is binary-safe.
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
See also: fgets(), file(), fread(), include(), and readfile().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the group ID of the file, or FALSE in case of an error.
The group ID is returned in numerical format, use posix_getgrgid() to resolve it to a group name.
The results of this function are cached.
See clearstatcache() for more details.
Note:
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Each element of the array corresponds to a line in the file, with the newline still attached.
Note:
Each line in the resulting array will include the line ending, so you still need to use trim() if you do not want the line ending present.
Note:
If you are having problems with PHP not recognizing the line endings when reading files either on or created by a Macintosh computer, you might want to enable the auto_detect_line_endings run-time configuration option.
You can use the optional use_include_path parameter and set it to "1", if you want to search for the file in the include_path, too.
Note:
In PHP 4.3.0 file() became binary safe.
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
See also readfile(), fopen(), fsockopen(), popen(), file_get_contents(), and include().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the inode number of the file, or FALSE in case of an error.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The time is returned as a Unix timestamp, which is suitable for the date() function.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
This function returns the time when the data blocks of a file were being written to, that is, the time when the content of the file was changed.
Example 1. filemtime() example
See also filectime(), stat(), touch(), and getlastmod().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the user ID of the owner of the file, or FALSE in case of an error.
The user ID is returned in numerical format, use posix_getpwuid() to resolve it to a username.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the permissions on the file, or FALSE in case of an error.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
The results of this function are cached.
See clearstatcache() for more details.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
This reads and verifies the map file, storing the field count and info.
When safe mode is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Prev
Home
Next
Up
Filesystem functions
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Note:
When safe mode is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Note:
When safe mode is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the size of the file in bytes, or FALSE in case of an error.
The results of this function are cached.
See clearstatcache() for more details.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Possible values are fifo, char, dir, block, link, file, and unknown.
Returns FALSE if an error occurs. filetype() will also produce an E_NOTICE message if the stat call fails or if the file type is unknown.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
See also: is_dir(), is_file(), is_link(), file_exists(), and stat().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Returns the float value of var.
Prev
Home
Next
Up
PHP Manual
Prev
Next
PHP supports a portable way of locking complete files in an advisory way (which means all accessing programs have to use the same way of locking or it will not work).
flock() operates on handle which must be an open file pointer. operation is one of the following values:
To acquire a shared lock (reader), set operation to LOCK_SH (set to 1 prior to PHP 4.0.1).
To acquire an exclusive lock (writer), set operation to LOCK_EX (set to 2 prior to PHP 4.0.1).
To release a lock (shared or exclusive), set operation to LOCK_UN (set to 3 prior to PHP 4.0.1).
If you don' t want flock() to block while locking, add LOCK_NB (4 prior to PHP 4.0.1) to operation.
flock() allows you to perform a simple reader / writer model which can be used on virtually every platform (including most Unix derivatives and even Windows).
The optional third argument is set to TRUE if the lock would block (EWOULDBLOCK errno condition)
Returns TRUE on success or FALSE on failure.
Note:
Because flock() requires a file pointer, you may have to use a special lock file to protect access to a file that you intend to truncate by opening it in write mode (with a "w "or "w+" argument to fopen()).
Warning
flock() will not work on NFS and many other networked file systems.
Check your operating system documentation for more details.
On some operating systems flock() is implemented at the process level.
When using a multithreaded server API like ISAPI you may not be able to rely on flock() to protect files against other PHP scripts running in parallel threads of the same server instance!
flock() is not supported on antiquated filesystems like FAT and its derivates and will therefore always return FALSE under this environments (this is especially true for Windows 98 users).
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the next lowest integer value by rounding down value if necessary.
The return value of floor() is still of type float because the value range of float is usually bigger than that of integer.
Example 1. floor() example
See also ceil() and round().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
fnmatch() checks if the passed string would match the given shell wildcard pattern.
This is especialy usefull for filenames, but may also be used on regular strings.
The average user may be used to shell patterns or at least in their simplest form to '?' and '* 'wildcards so using fnmatch() instead of ereg() or preg_match() for frontend search expression input may be way more convenient for non-programming users.
Example 1.
Checking a color name against a shell wildcard pattern.
if( fnmatch("*gr[ae]y", $color)) {echo "some form of gray.. .";}
See also glob(), ereg(), preg_match() and the unix manpage on fnmatch(3) for flag names (as long as they are not documented here).
Prev
Home
Next
Up
PHP Manual
Prev
Next
fopen() binds a named resource, specified by filename, to a stream.
If filename is of the form "scheme: / /.. .", it is assumed to be a URL and PHP will search for a protocol handler (also known as a wrapper) for that scheme.
If no wrappers for that protocol are registered, PHP will emit a notice to help you track potential problems in your script and then continue as though filename specifies a regular file.
If PHP has decided that filename specifies a local file, then it will try to open a stream on that file.
The file must be accessible to PHP, so you need to ensure that the file access permissions allow this access.
If you have enabled safe_mode, or open_basedir further restrictions may apply.
If PHP has decided that filename specifies a registered protocol, and that protocol is registered as a network URL, PHP will check to make sure that allow_url_fopen If PHP has decided that filename specifies a registered protocol, and that protocol is registered as a network URL, PHP will check to make sure that allow_url_fopen is enabled.
If it is switched off, PHP will emit a warning and the fopen call will fail.
Note:
The list of supported protocols can be found in Appendix I.
mode specifies the type of access you require to the stream.
It may be any of the following:
'r' - Open for reading only; place the file pointer at the beginning of the file.
'r+' - Open for reading and writing; place the file pointer at the beginning of the file.
'w' - Open for writing only; place the file pointer at the beginning of the file and truncate the file to zero length.
If the file does not exist, attempt to create it.
'w+' - Open for reading and writing; place the file pointer at the beginning of the file and truncate the file to zero length.
If the file does not exist, attempt to create it.
'a' - Open for writing only; place the file pointer at the end of the file.
If the file does not exist, attempt to create it.
'a+' - Open for reading and writing; place the file pointer at the end of the file.
If the file does not exist, attempt to create it.
Note:
The mode may contain the letter 'b'.
Windows.
It' s useless on Unix).
If not needed, this will be ignored.
You are encouraged to include the 'b' flag in order to make your scripts more portable.
The optional third use_include_path parameter can be set to '1' or TRUE if you want to search for the file in the include_path, too.
The optional fourth zcontext is used for specifying tuning parameters and callbacks.
If the open fails, the function returns FALSE.
Example 1. fopen() example
?php $handle = fopen ("/ home / rasmus / file.txt", "r"); $handle = fopen (" / home / rasmus / file.gif", "wb"); $handle = fopen ("http: / /www.example.com /", "r"); $handle = fopen ("ftp: / /user:password@example.com / somefile.txt", "w");?
If you are experiencing problems with reading and writing to files and you' re using the server module version of PHP, remember to make sure that the files and directories you're using are accessible to the server process.
On the Windows platform, be careful to escape any backslashes used in the path to the file, or use forward slashes.
?php $handle = fopen ("c:\\data\\info.txt", "r");?
See also Appendix I, fclose(), fgets(), fsockopen(), file(), file_exists(), is_readable(), socket_set_timeout(), and popen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Reads to EOF on the given file pointer from the current position and writes the results to the output buffer.
Otherwise, fpassthru() returns the number of characters read from handle and passed through to the output.
The file pointer must be valid, and must point to a file successfully opened by fopen(), popen(), or fsockopen().
You may need to call rewind() You may need to call rewind() to reset the file pointer to the beginning of the file if you have already written data to the file.
The file is closed when fpassthru() is done reading it (leaving handle useless).
If you just want to dump the contents of a file to the output buffer, without first modifying it or seeking to a particular offset, you may want to use the readfile(), which saves you the fopen() call.
Note:
When using fpassthru() on a binary file on Windows systems, you should make sure to open the file in binary mode by appending a b to the mode used in the call to fopen().
You are encouraged to use the b flag when dealing with binary files, even if your system does not require it, so that your scripts will be more portable.
See also readfile(), fopen(), popen(), and fsockopen()
Prev
Home
Next
Up
PHP Manual
Prev
Next
See also: printf(), sprintf(), sscanf(), fscanf(), vsprintf(), and number_format().
Example 1. sprintf(): zero-padded integers
Example 2. sprintf(): formatting currency
Prev
Home
Next
Up
PHP Manual
Prev
Next
fputs() is an alias to fwrite(), and is identical in every way.
Note that the length parameter is optional and if not specified the entire string will be written.
Prev
Home
Next
Up
PHP Manual
Prev
Next
fread() reads up to length bytes from the file pointer referenced by handle.
Reading stops when length bytes have been read or EOF (end of file) reached, whichever comes first.
?php / / get contents of a file into a string $filename = "/ usr / local / something.txt"; $handle = fopen ($filename, "r"); $contents = fread ($handle, filesize ($filename)); fclose ($handle);?
Note:
Windows) the file must be opened with'b 'included in fopen() mode parameter.
?php $filename = "c:\\files\\somepic.gif"; $handle = fopen ($filename, "rb"); $contents = fread ($handle, filesize ($filename)); fclose ($handle);?
See also fwrite(), fopen(), fsockopen(), popen(), fgets(), fgetss(), fscanf(), file(), and fpassthru().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
If only two parameters were passed to this function, the values parsed will be returned as an array.
Any whitespace in the format string matches any whitespace in the input stream.
This means that even a tab \t in the format string can match a single space character in the input stream.
Example 1. fscanf() Example
Example 2. users.txt
Prior to PHP 4.3.0, the maximum number of characters read from the file was 512 (or up to the first \n, whichever came first).
As of PHP 4.3.0 arbitrarily long lines will be read and scanned.
See also fread(), fgets(), fgetss(), sscanf(), printf(), and sprintf().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sets the file position indicator for the file referenced by handle .The new position, measured in bytes from the beginning of the file, is obtained by adding offset to the position specified by whence, whose values are defined as follows:
SEEK_SET - Set position equal to offset bytes.
SEEK_CUR - Set position to current location plus offset.
SEEK_END - Set position to end-of-file plus offset. (To move to a position before the end-of-file, you need to pass a negative value in offset.)
If whence is not specified, it is assumed to be SEEK_SET.
Upon success, returns 0; otherwise, returns -1.
Note that seeking past EOF is not considered an error.
May not be used on file pointers returned by fopen() if they use the "http: / / "or "ftp: / /" formats.
Note:
The whence argument was added after PHP 4.0.0.
See also ftell() and rewind().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. fsockopen() Example
Example 2.
Warning
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Gathers the statistics of the file opened by the file pointer handle.
This function is similar to the stat() function except that it operates on an open file pointer instead of a filename.
Returns an array with the statistics of the file with the following elements:
number of links
user id of owner
group id owner
device type if inode device *
size in bytes
time of last access
time of last modification
time of last change
blocksize for filesystem I / O *
number of blocks allocated
The results of this function are cached.
See clearstatcache() for more details.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the position of the file pointer referenced by handle; i.e., its offset into the file stream.
If an error occurs, returns FALSE.
The file pointer must be valid, and must point to a file successfully opened by fopen() or popen().
See also fopen(), popen(), fseek(), and rewind().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
ftp_close
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
ftp_close() closes ftp_stream and releases the resource.
Prev
Home
Next
ftp_chdir
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.13, PHP 4)
Returns a FTP stream on success or FALSE on error.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
ftp_fget() retrieves remote_file from the FTP server, and writes it to the given file pointer, fp.
Note:
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
ftp_fput() uploads the data from the file pointer fp until the end of the file is reached.
Note:
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is only available in CVS.
Table 1.
Example 1. ftp_get_option() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.13, PHP 4)
Creates the specified directory.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Continues retrieving / sending a file nbronously
Prev
Home
Next
Up
PHP Manual
Prev
Next
ftp_nb_fget() retrieves remote_file from the FTP server, and writes it to the given file pointer, fp.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
ftp_nb_fput() uploads the data from the file pointer fp ftp_nb_fput() uploads the data from the file pointer fp until it reaches the end of the file.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Example 1. ftp_nb_get() example
Example 2.
Example 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
ftp_nb_put() stores local_file on the FTP server, as remote_file.
Returns TRUE on success or FALSE on failure.
Example 1. ftp_nb_put() example
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Returns TRUE on success or FALSE on failure.
Example 1. ftp_put() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is only available in CVS.
Table 1.
Example 1. ftp_set_option() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Returns a SSL-FTP stream on success or FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Takes the filepointer, handle, and truncates the file to length, size.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
fwrite() writes the contents of string to the file stream pointed to by handle.
If the length argument is given, writing will stop after length bytes have been written or the end of string is reached, whichever comes first.
fwrite() returns the number of bytes written, or FALSE on error.
Note that if the length argument is given, then the magic_quotes_runtime configuration option will be ignored and no slashes will be stripped from string.
Note:
Windows) the file must be opened with'b 'included in fopen() mode parameter.
Example 1.
A simple fwrite example
?php $filename = 'test.txt'; $somecontent = "Add this to the file\n"; / / Let's make sure the file exists and is writable first. if (is_writable($filename)) {/ / In our example we're opening $filename in append mode. / / The file pointer is at the bottom of the file hence / / that's where $somecontent will go when we fwrite() it. if (!$handle = fopen($filename, 'a')) {print "Cannot open file ($filename)"; exit;} / / Write $somecontent to our opened file. if (!fwrite($handle, $somecontent)) {print "Cannot write to file ($filename)"; exit;} print "Success, wrote ($somecontent) to file ($filename)"; fclose($handle);} else {print "The file $filename is not writable";}?
See also fread(), fopen(), fsockopen(), popen(), and fputs().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
getallheaders() is an alias for apache_request_headers().
It will return an associative array of all the HTTP headers in the current request.
Please read the apache_request_headers() documentation for more information on how this function works.
Note:
In PHP 4.3.0, getallheaders() became an alias for apache_request_headers().
Essentially, it was renamed.
This is because this function only works when PHP is compiled as an Apache Module.
See also apache_request_headers().
Prev
Home
Next
Up
PHP Manual
Prev
Next
By default, the value of HTTP_USER_AGENT is used; however, you can alter this (i.e., look up another browser's info) by passing the optional user_agent parameter to get_browser().
The information is returned in an object, which will contain various data elements representing, for instance, the browser' s major and minor version numbers and ID string; TRUE / FALSE values for features such as frames, JavaScript, and cookies; and so forth.
The format of the file is fairly self-explanatory.
The following example shows how one might list all available information retrieved about the user 's browser.
Example 1. get_browser() example
?php echo $_SERVER[ 'HTTP_USER_AGENT']. "hr / \n"; $browser = get_browser(); foreach ($browser as $name = $value) {print" b $name / b $value br / \n";}?
The output of the above script would look something like this:
In order for this to work, your browscap configuration setting in php.ini must point to the correct location of the browscap.ini file on your system. browscap.ini is not bundled with PHP but you may find an up-to-date browscap.ini file here.
By default, the browscap directive is commented out.
The cookies The cookies value simply means that the browser itself is capable of accepting cookies and does not mean the user has enabled the browser to accept cookies or not.
The only way to test if cookies are accepted is to set one with setcookie(), reload, and check for the value.
In this case, you will pass in $HTTP_SERVER_VARS[ 'HTTP_USER_AGENT'].
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns the name of the class of which the object obj is an instance.
Returns FALSE if obj is not an object.
A class defined in a PHP extension is returned in its original notation.
See also get_parent_class(), gettype(), and is_subclass_of().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns an array of method names defined for the class specified by class_name.
Note:
As of PHP 4.0.6, you can specify the object itself instead of class_name.
For example:
$class_methods = get_class_methods( $my_class); / / see below the full example
Example 1. get_class_methods() example
Will produce:
See also get_class_vars() and get_object_vars().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function will return an associative array of default properties of the class.
The resulting array elements are in the form of varname = value.
Note:
Prior to PHP 4.2.0, Uninitialized class variables will not be reported by get_class_vars().
Example 1. get_class_vars() example
Will produce:
/ / Before PHP 4.2.0 var2: xyz var3:
100 / / As of PHP 4.2.0 var1: var2: xyz var3:
See also get_class_methods(), get_object_vars()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the name of the owner of the current PHP script.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the current working directory.
See also chdir().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an associative array containing the date information of the timestamp, or the current local time if no timestamp is given, as the following array elements:
"seconds" - seconds
"minutes" - minutes
"hours" - hours
"mday" - day of the month
"wday" - day of the week, numeric: from 0 as Sunday up to 6 as Saturday
"mon" - month, numeric
"year" - year, numeric
"yday" - day of the year, numeric; i.e. "299 "
"weekday" - day of the week, textual, full; i.e. "Friday "
"month" - month, textual, full; i.e. "January "
Example 1. getdate() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns an array of the names of the declared classes in the current script.
In PHP 4.0.1pl2, three extra classes are returned at the beginning of the array: stdClass (defined in Zend / zend.c), OverloadedTestClass (defined in ext / standard / basic_functions.c) and Directory (defined in ext / standard / dir.c).
Also note that depending on what libraries you have compiled into PHP, additional classes could be present.
There is a list of predefined classes in the Predefined Classes section of the appendices.
See also class_exists().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
get_html_translation_table() will return the translation table that is used internally for htmlspecialchars() and htmlentities().
There are two new defines (HTML_ENTITIES, HTML_SPECIALCHARS) that allow you to specify the table you want.
And as in the htmlspecialchars() and htmlentities() functions you can optionally specify the quote_style you are working with.
The default is ENT_COMPAT mode.
See the description of these modes in htmlspecialchars().
Example 1.
Translation Table Example
The cool thing is using array_flip() to change the direction of the translation.
See also htmlspecialchars(), htmlentities(), strtr(), and array_flip().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. getimagesize (file)
Example 2. getimagesize (URL)
Example 3. getimagesize() and MIME types
Example 4. getimagesize() returning IPTC
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. get_included_files() Example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. getlastmod() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Searches DNS for MX records corresponding to hostname.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the current script 's inode, or FALSE on error.
This function is not implemented on Windows platforms.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns an associative array of defined object properties for the specified object obj.
In versions prior to PHP 4.2.0, if the variables declared in the class of which the obj is an instance, have not been assigned a value, those will not be returned in the array.
In versions after PHP 4.2.0, the key will be assigned with a NULL value.
Example 1.
Use of get_object_vars()
Array ([x] = 1.233 [y] = 3.445 [label] =) Array ([x] = 1.233 [y] = 3.445 [label] = point #1)
See also get_class_methods() and get_class_vars()!
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
If obj is an object, returns the name of the parent class of the class of which obj is an instance.
If obj is a string, returns the name of the parent class of the class with that name.
This functionality was added in PHP 4.0.5.
See also get_class() and is_subclass_of()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the maximum value that can be returned by a call to rand().
See also rand(), srand() and mt_getrandmax().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.7, PHP 4)
This is an interface to getrusage( 2).
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. gettext() -check
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.7, PHP 4)
This is an interface to gettimeofday( 2).
It returns an associative array containing the data returned from the system call.
"sec" - seconds
"usec" - microseconds
"minuteswest" - minutes west of Greenwich
"dsttime" - type of dst correction
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the type of the PHP variable var.
Never use gettype() to test for a certain type, since the returned string may be subject to change in a future version.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
The glob() function searches for all the pathnames matching pattern according to the rules used by the shell.
Returns an array containing the matched files / directories or FALSE on error.
GLOB_MARK - Adds a slash to each item returned
GLOB_NOCHECK - Return the search pattern if no files matching it were found
GLOB_NOESCAPE - Backslashes do not quote metacharacters
GLOB_BRACE - Expands {a,b,c} to match'a', 'b', or'c '
Example 1.
Convenient way how glob() can replace opendir() and friends.
See also opendir(), readdir() and closedir(), fnmatch().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Identical to the date() function except that the time returned is Greenwich Mean Time (GMT).
For example, when run in Finland (GMT +0200), the first line below prints "Jan 01 1998 00:00:00", while the second prints "Dec 31 1997 22:00:00 ".
Example 1. gmdate() example
See also date(), mktime(), gmmktime() and strftime().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Identical to mktime() except the passed parameters represents a GMT date.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Add two GMP numbers.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Divides a by b and returns the integer result.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Calculate greatest common divisor of a and b.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Computes the inverse of a modulo b.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Calculates n modulo d.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Raise base into power exp.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
If this function returns 0, a is definitely not prime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Generate a random number.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Behaves the same as strftime() except that the time returned is Greenwich Mean Time (GMT).
For example, when run in Eastern Standard Time (GMT -0500), the first line below prints "Dec 31 1998 20:00:00", while the second prints "Jan 01 1999 01:00:00 ".
Example 1. gmstrftime() example
See also strftime().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
The gz-file pointed to by zp is closed.
The gz-file pointer must be valid, and must point to a file successfully opened by gzopen().
Prev
Home
Next
Zlib Compression Functions
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Opens a gzip (.gz) file for reading or writing.
Example 1. gzopen() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
header() is used to send raw HTTP headers.
Note:
Note:
Note:
Note:
Note:
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is similar to hebrev() This function is similar to hebrev() with the difference that it converts newlines (\n) to "br \n".
The optional parameter max_chars_per_line indicates maximum number of characters per line will be output.
The function tries to avoid breaking words.
See also hebrev()
Prev
Home
Next
Up
PHP Manual
Prev
Next
The optional parameter max_chars_per_line indicates maximum number of characters per line will be output.
The function tries to avoid breaking words.
See also hebrevc()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the decimal equivalent of the hexadecimal number represented by the hex_string argument. hexdec() converts a hexadecimal string to a decimal number.
The largest number that can be converted is 7fffffff or 2147483647 in decimal.
hexdec() will replace of any non-hexadecimal characters it encounters by 0.
This way, all left zeros are ignored, but right zeros will be valued.
Example 1. hexdec() example
var_dump( hexdec("See")); var_dump(hexdec("ee")); / / both prints "int(238) "var_dump(hexdec("that")); var_dump(hexdec("a0")); / / both prints int(160)
See also dechex().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The highlight_file() function prints out a syntax higlighted version of the code contained in filename using the colors defined in the built-in syntax highlighter for PHP.
If the second parameter return is set to TRUE then highlight_file() If the second parameter return is set to TRUE then highlight_file() will return the highlighted code as a string instead of printing it out.
If the second parameter is not set to TRUE then highlight_file() will return TRUE on success, FALSE on failure.
Note:
The return parameter became available in PHP 4.2.0.
Before this time it behaved like the default, which is FALSE
Note:
Care should be taken when using the show_source() and highlight_file() functions to make sure that you do not inadvertently reveal sensitive information such as passwords or any other type of information that might create a potential security risk.
Note:
Since PHP 4.2.1 this function is also affected by safe_mode and open_basedir.
Example 1.
Creating a source highlighting URL
To setup a URL that can code hightlight any script that you pass to it, we will make use of the "ForceType" directive in Apache to generate a nice URL pattern, and use the function highlight_file() to show a nice looking code list.
In your httpd.conf you can add the following:
And then make a file named "source" and put it in your web root directory.
HTML HEAD TITLE Source Display / TITLE / HEAD BODY BGCOLOR=" white "?php $script = getenv ("PATH_TRANSLATED"); if(!$script) {echo" BR B ERROR:
Script Name needed / B BR ";} else {if (ereg("(\.php_BAR_\.inc)$",$script)) {echo" H1 Source of: $PATH_INFO / H1 \n HR \n"; highlight_file($script);} else {echo "H1 ERROR:
Only PHP or include script names are allowed / H1 ";}} echo" HR Processed: ".date("Y / M/d H:i:s",time());? / BODY / HTML
Then you can use an URL like the one below to display a colorized version of a script located in "/ path / to / script.php" in your web site.
http: / /your.server.com / source / path / to / script.php
See also highlight_string(), show_source().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The highlight_string() function outputs a syntax highlighted version of str using the colors defined in the built-in syntax highlighter for PHP.
If the second parameter return is set to TRUE then highlight_string() If the second parameter return is set to TRUE then highlight_string() will return the highlighted code as a string instead of printing it out.
If the second parameter is not set to TRUE then highlight_string() will return TRUE on success, FALSE on failure.
Note:
The return parameter became available in PHP 4.2.0.
Before this time it behaved like the default, which is FALSE
See also highlight_file(), and show_source().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is identical to htmlspecialchars() in all ways, except with htmlentities(), all characters which have HTML character entity equivalents are translated into these entities.
Like htmlspecialchars(), the optional second quote_style parameter lets you define what will be done with'single 'and "double "quotes.
It takes on one of three constants with the default being ENT_COMPAT:
Table 1.
Available quote_style constants
Will convert double-quotes and leave single-quotes alone.
Support for the optional quote parameter was added in PHP 4.0.3.
Like htmlspecialchars(), it takes an optional third argument which defines character set used in conversion.
Support for this argument was added in PHP 4.1.0.
Presently, the ISO-8859-1 character set is used as the default.
If you' re wanting to decode instead (the reverse) you can use html_entity_decode().
See also html_entity_decode(), get_html_translation_table(), htmlspecialchars(), nl2br(), and urlencode().
Prev
Home
Next
Up
PHP Manual
Prev
Next
html_entity_decode() is the opposite of htmlentities() in that it converts all HTML entities to their applicable characters from string.
The optional second quote_style parameter lets you define what will be done with 'single' and "double "quotes.
It takes on one of three constants with the default being ENT_COMPAT:
Table 1.
Available quote_style constants
Constant Name
Description
Will convert double-quotes and leave single-quotes alone.
Will convert both double and single quotes.
Will leave both double and single quotes unconverted.
The ISO-8859-1 character set is used as default for the optional third charset.
This defines the character set used in conversion.
Example 1.
Decoding html entities
Note:
See also htmlentities(), htmlspecialchars(), get_html_translation_table(), htmlspecialchars() and urldecode().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Certain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings.
This function returns a string with some of these conversions made; the translations made are those most useful for everyday web programming.
If you require all HTML character entities to be translated, use htmlentities() instead.
This function is useful in preventing user-supplied text from containing HTML markup, such as in a message board or guest book application.
The optional second argument, quote_style, tells the function what to do with single and double quote characters.
The default mode, ENT_COMPAT, is the backwards compatible mode which only translates the double-quote character and leaves the single-quote untranslated.
If ENT_QUOTES is set, both single and double quotes are translated and if ENT_NOQUOTES is set neither single nor double quotes are translated.
The translations performed are:
'' (ampersand) becomes' amp; '
'"' (double quote) becomes' quot; 'when ENT_NOQUOTES is not set.
'' '(single quote) becomes' #039; 'only when ENT_QUOTES is set.
'' (less than) becomes' lt; '
'' (greater than) becomes' gt; '
Example 1. htmlspecialchars() example
Note that this function does not translate anything beyond what is listed above.
For full entity translation, see htmlentities().
Support for the optional second argument was added in PHP 3.0.17 and PHP 4.0.3.
The third argument defines character set used in conversion.
The default character set is ISO-8859-1.
Support for this third argument was added in PHP 4.1.0.
See also get_html_translation_table(), htmlentities() and nl2br().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Returns the value of the attribute.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function checks in an object or a whole hiearchie of objects.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function checks out an object or a whole hiearchie of objects.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Retrieves all destination anchors of an object.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Retrieves the destination object pointed by the specified source anchors.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is a shortcut for hwapi_insert().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function retrieves an object the specified anchor belongs to.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Commits a version of a docuemnt.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Retrieves all source anchors of an object.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.4, PHP 4)
Converts an object_array into an object record.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns an array of object ids.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns an array of object records.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns the object record of the document.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns the BODY tag of the document.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns the content of the document.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Sets or replaces the content of the document.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns the size in bytes of the document.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Uploads the text document to the server.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns the object record for the object with ID objectID.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns an array of object ids.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns an array of object records.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns an indexed array of object ids.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns the children of a remote document.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns a remote document.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns the document with object ID objectID.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Identifies as user with username and password.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Uploads a document into the collection with parent_id.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Inserts an object into the server.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. modifying an attribute
Example 2. adding a completely new attribute
Note:
Example 3. modifying Title attribute
Example 4. modifying Title attribute
Example 5. removing attribute
Note:
Note:
Note:
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Converts an object_record into an object array.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Prints the document without the BODY tag.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns the Hyperwave document with object ID objectID.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Establishes a connection to an InterBase server.
Example 1. ibase_connect() example
Note:
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Execute a query prepared by ibase_prepare().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.7, PHP 4)
Returns an array with information about a field after a select query has been run.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.7, PHP 4)
Returns an integer containing the number of fields in a result set.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Performs a query on an InterBase database.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. iconv_get_encoding() example:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. iconv() example:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
It changes the value of type to charset.
The value of type can be:
Example 1. iconv_set_encoding() example:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.4, PHP 4)
Set the default blob mode for all select queries.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.4, PHP 4)
Sets the default byte mode for all select-queries.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns: always TRUE.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns a connection identifier on success, or FALSE on error.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.4, PHP 4)
type:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.3, PHP 4)
Returns the number of rows fetched or FALSE on error.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.4, PHP 4)
Returns a integer result_id for use by ifx_do().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns:
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.4, PHP 4)
Sets the default text mode for all select-queries.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.4, PHP 4)
Creates an slob object and opens it.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function sets whether a client disconnect should cause a script to be aborted.
It will return the previous setting and can be called without an argument to not change the current setting and only return the current setting.
See the Connection Handling section in the Features chapter for a complete description of connection handling in PHP.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.1)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Warning
This function is currently not documented; only the argument list is available.
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Warning
This function is currently not documented; only the argument list is available.
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Warning
This function is currently not documented; only the argument list is available.
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Note:
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Note:
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
This function is deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the pixel width of a character in font.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
imageinterlace() turns the interlace bit on or off.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.9, PHP 4)
Size is expressed in pixels.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.9, PHP 4)
Size is expressed in pixels.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imagesetstyle() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imagettftext() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imagetypes
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. image_type_to_mime_type (file)
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on sucess, FALSE on error.
Example 1. imap_append() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns information about the current mailbox.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Close the imap stream.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imap_createmailbox() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE.
Note:
Example 1. imap_delete() Beispiel
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imap_fetch_overview() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Table 2.
Table 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.12, PHP 4)
Returns an array of objects containing mailbox information.
Example 1. imap_getmailboxes() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imap_get_quota() example
Example 2. imap_get_quota() 4.3 or greater example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imap_get_quotaroot() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
This function returns an object of various header elements.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.4, PHP 4)
Returns an array containing the names of the mailboxes.
$mbox = imap_open( "{your.imap.host}" ,"username" ,"password",OP_HALFOPEN) or die("can't connect: ".imap_last_error()); $list = imap_list($mbox ,"{your.imap.host}" ,"*"); if(is_array($list)) {reset($list); while (list($key, $val) = each($list)) print imap_utf7_decode($val). "br \n";} else print "imap_list failed: ".imap_last_error() ."\n"; imap_close($mbox);
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.2, PHP 4)
Returns information about the current mailbox.
Table 1.
Example 1. imap_mailboxmsginfo() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.5, PHP 4)
Example 1. imap_mail_compose() example
?php $envelope[ "from"]="musone@afterfive.com"; $envelope["to"]="musone@darkstar"; $envelope["cc"]="musone@edgeglobal.com"; $part1["type"]=TYPEMULTIPART; $part1["subtype"]="mixed"; $filename=" / tmp / imap.c.gz"; $fp=fopen($filename ,"r"); $contents=fread($fp,filesize($filename)); fclose($fp); $part2["type"]=TYPEAPPLICATION; $part2["encoding"]=ENCBINARY; $part2["subtype"]="octet-stream"; $part2["description"]=basename($filename); $part2["contents.data"]=$contents; $part3["type"]=TYPETEXT; $part3["subtype"]="plain"; $part3["description"]="description3"; $part3["contents.data"]="contents.data3\n\n\n\t"; $body[1]=$part1; $body[2]=$part2; $body[3]=$part3; echo nl2br(imap_mail_compose($envelope,$body));?
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success and FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success and FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imap_mime_header_decode() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns an IMAP stream on success and FALSE on error.
Example 1. imap_open() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE if the stream is still alive, FALSE otherwise.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imap_rfc822_parse_adrlist() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imap_rfc822_write_address() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imap_setflag_full() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Sets an upper limit quota on a per mailbox basis.
Example 1. imap_set_quota() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. imap_status() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Subscribe to a new mailbox.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Unsubscribe from a specified mailbox.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.15, PHP 4)
Decodes modified UTF-7 text into 8bit data.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.15, PHP 4)
Converts 8bit data to modified UTF-7 text.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string containing a string representation of all the array elements in the same order, with the glue string between each element.
Example 1. implode() example
For consistency with explode(), however, it may be less confusing to use the documented order of arguments.
See also explode(), and split().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Imports GET / POST / Cookie variables into the global scope.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Searches haystack for needle and returns TRUE if it is found in the array, FALSE otherwise.
If the third parameter strict is set to TRUE then the in_array() function will also check the types of the needle in the haystack.
If needle is a string, the comparison is done in a case-sensitive manner.
Note:
In PHP versions before 4.2.0 needle was not allowed to be an array.
Example 1. in_array() example
$os = array ("Mac", "NT", "Irix", "Linux"); if (in_array ("Irix", $os)) {print "Got Irix";} if (in_array ("mac", $os)) {print "Got mac";}
The second condition fails because in_array() is case-sensitive, so the program above will display:
Got Irix
Example 2. in_array() with strict example
?php $a = array( '1.10', 12.4, 1.13); if (in_array('12.4', $a, TRUE)) echo "'12.4 'found with strict check\n"; if (in_array(1.13, $a, TRUE)) echo "1.13 found with strict check\n";?
This will display:
1.13 found with strict check
Example 3. in_array() with an array as needle
?php $a = array( array('p', 'h'), array('p', 'r'), 'o'); if (in_array(array ('p', 'h'), $a)) echo "'ph 'was found\n"; if (in_array(array ('f', 'i'), $a)) echo "'fi' was found\n"; if (in_array('o', $a)) echo "'o 'was found\n";? / / This will output: 'ph' was found'o 'was found
See also array_search().
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
The include() statement includes and evaluates the specified file.
The documentation below also applies to require().
The two constructs are identical in every way except how they handle failure. include() produces a Warning while require() results in a Fatal Error.
In other words, use require() if you want a missing file to halt processing of the page. include() does not behave this way, the script will continue regardless.
Be sure to have an appropriate include_path setting as well.
When a file is included, the code it contains inherits the variable scope of the line on which the include occurs.
Any variables available at that line in the calling file will be available within the called file, from that point forward.
Example 12-3.
Basic include() example
vars.php ?php $color = 'green'; $fruit = 'apple';? test.php ?php echo "A $color $fruit"; / / A include'vars.php'; echo "A $color $fruit"; / / A green apple?
If the include occurs inside a function within the calling file, then all of the code contained in the called file will behave as though it had been defined inside that function.
So, it will follow the variable scope of that function.
Example 12-4.
Including within functions
?php function foo() {global $color; include'vars.php'; echo "A $color $fruit";} / * vars.php is in the scope of foo() so * * $fruit is NOT available outside of this * * scope. $color is because we declared it * * as global. * / foo(); / / A green apple echo "A $color $fruit"; / / A green?
When a file is included, parsing drops out of PHP mode and into HTML mode at the beginning of the target file, and resumes again at the end.
For this reason, any code inside the target file which should be executed as PHP code must be enclosed within valid PHP start and end tags.
If "URL fopen wrappers" are enabled in PHP (which they are in the default configuration), you can specify the file to be included using an URL (via HTTP or other supported wrapper - see Appendix I for a list of protocols) instead of a local pathname.
If the target server interprets the target file as PHP code, variables may be passed to the included file using an URL request string as used with HTTP GET.
This is not strictly speaking the same thing as including the file and having it inherit the parent file' s variable scope; the script is actually being run on the remote server and the result is then being included into the local script.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
Example 12-5. include() through HTTP
?php / * This example assumes that www.example.com is configured to parse .php * * files and not .txt files.
Also, 'Works' here means that the variables * * $foo and $bar are available within the included file. * / / / Won't work; file.txt wasn't handled by www.example.com as PHP include'http: / /www.example.com / file.txt?foo=1 bar=2'; / / Won't work; looks for a file named'file.php?foo=1 bar=2 'on the / / local filesystem. include'file.php?foo=1 bar=2'; / / Works. include'http: / /www.example.com / file.php?foo=1 bar=2'; $foo = 1; $bar = 2; include'file.txt'; / / Works. include'file.php'; / / Works.?
Because include() and require() are special language constructs, you must enclose them within a statement block if it's inside a conditional block.
Example 12-6. include() and conditional blocks
?php / / This is WRONG and will not work as desired. if ($condition) include $file; else include $other; / / This is CORRECT. if ($condition) {include $file;} else {include $other;}?
It is possible to execute a return() It is possible to execute a return() statement inside an included file in order to terminate processing in that file and return to the script which called it.
Also, it 's possible to return values from included files.
You can take the value of the include call as you would a normal function.
Note:
In PHP 3, the return may not appear inside a block unless it' s a function block, in which case the return() applies to that function and not the whole file.
Example 12-7. include() and the return() statement
return.php ?php $var = 'PHP'; return $var;? noreturn.php ?php $var = 'PHP';? testreturns.php ?php $foo = include'return.php'; echo $foo; / / prints'PHP' $bar = include'noreturn.php'; echo $bar; / / prints 1?
$bar is the value 1 because the include was successful.
Notice the difference between the above examples.
The first uses return() within the included file while the other does not.
A few other ways to "include" files into variables are with fopen(), file() or by using include() along with Output Control Functions.
See also require(), require_once(), include_once(), readfile(), virtual(), and include_path.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
The include_once() statement includes and evaluates the specified file during the execution of the script.
This is a behavior similar to the include() This is a behavior similar to the include() statement, with the only difference being that if the code from a file has already been included, it will not be included again.
As the name suggests, it will be included just once.
include_once() should be used in cases where the same file might be included and evaluated more than once during a particular execution of a script, and you want to be sure that it is included exactly once to avoid problems with function redefinitions, variable value reassignments, etc.
For more examples on using require_once() and include_once(), look at the PEAR code included in the latest PHP source code distributions.
Note:
Be aware, that the behaviour of include_once() and require_once() may not be what you expect on a non case sensitive operating system (such as Windows).
Example 12-9. include_once() is case sensitive
include_once( "a.php"); / / this will include a.php include_once("A.php"); / / this will include a.php again on Windows!
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
See also include(), require(), require_once(), get_required_files(), get_included_files(), readfile(), and virtual().
Prev
Home
Next
Up
Functions
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. ingres_connect() example
Example 2. ingres_connect() example using default link
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. ingres_fetch_array() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. ingres_fetch_object() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. ingres_fetch_row() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. ingres_query() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Sets the value of the given configuration option.
Table 1.
Table 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. ip2long() Example
Note:
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. ircg_fetch_error_msg() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Encodes a HTML string html_string for output.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Check for the existence of the format message set name.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns TRUE if the object is of this class or has this class as one of its parents, FALSE otherwise.
See also get_class(), get_parent_class(), and is_subclass_of().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE if var is an array, FALSE otherwise.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Returns TRUE if the var parameter is a boolean.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE if the filename exists and is a directory.
If filename is a relative filename, it will be checked relative to the current working directory.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
See also chdir(), dir, opendir(), is_file() and is_link().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of is_float().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE if the filename exists and is executable.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Note:
This function is not available on Win32.
See also is_file() and is_link().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the filename exists and is a regular file.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
See also is_dir() and is_link().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if val is a legal finite number within the allowed range for a PHP float on this platform.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if val is infinite (positive or negative), like the result of log(0) or any value too big to fit into a float on this platform.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of is_int().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the filename exists and is a symbolic link.
The results of this function are cached.
See clearstatcache() for more details.
See also is_dir(), is_file(), and readlink().
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of is_int().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if val is' not a number', like the result of acos(1.01).
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Returns TRUE if var is null, FALSE otherwise.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE if var is an object, FALSE otherwise.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE if the filename exists and is readable.
Keep in mind that PHP may be accessing the file as the user id that the web server runs as (often'nobody').
Safe mode limitations are not taken into account.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
See also is_writable().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of is_float().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE if var exists; FALSE otherwise.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE if var is a string, FALSE otherwise.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns TRUE if the object object, belongs to a class which is a subclass of class_name, FALSE otherwise.
See also get_class(), get_parent_class() and is_a().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.17, PHP 4 = 4.0.3)
Returns TRUE if the file named by filename was uploaded via HTTP POST.
This is useful to help ensure that a malicious user hasn 't tried to trick the script into working on files upon which it should not be working--for instance, / etc / passwd.
This sort of check is especially important if there is any chance that anything done with uploaded files could reveal their contents to the user, or even to other users on the same system.
is_uploaded_file() is available only in versions of PHP 3 after PHP 3.0.16, and in versions of PHP 4 after 4.0.2.
If you are stuck using an earlier version, you can use the following function to help protect yourself:
Note:
The following example will not work in versions of PHP 4 after 4.0.2.
It depends on internal functionality of PHP which changed after that version.
?php / * Userland test for uploaded file. * / function is_uploaded_file( $filename) {if (!$tmp_file = get_cfg_var('upload_tmp_dir')) {$tmp_file = dirname(tempnam('', ''));} $tmp_file .= '/'. basename($filename); / * User might have trailing slash in php.ini... * / return (ereg_replace(' / +', '/', $tmp_file) == $filename);} / * This is how to use it, since you also don't have * move_uploaded_file() in these older versions: * / if (is_uploaded_file($HTTP_POST_FILES['userfile'])) {copy($HTTP_POST_FILES['userfile'], "/ place / to / put / uploaded / file");} else {echo "Possible file upload attack: filename '$HTTP_POST_FILES[userfile]' .";}?
See also move_uploaded_file(), and the section Handling file uploads for a simple usage example.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE if the filename exists and is writable.
The filename argument may be a directory name allowing you to check if a directory is writeable.
Keep in mind that PHP may be accessing the file as the user id that the web server runs as (often'nobody').
Safe mode limitations are not taken into account.
The results of this function are cached.
See clearstatcache() for more details.
This function will not work on remote files; the file to be examined must be accessible via the server's filesystem.
See also is_readable().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This is an alias for is_writable()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the day of the week.
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
join() is an alias to implode(), and is identical in every way.
See also explode(), implode(), and split().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.
Caution
Prev
Home
Next
Up
PHP Manual
Prev
Next
key() returns the index element of the current array position.
See also current() and next().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sorts an array by key in reverse order, maintaining key to data correlations.
This is useful mainly for associative arrays.
Example 1. krsort() example
$fruits = array ("d"= "lemon", "a"= "orange", "b"= "banana", "c"= "apple"); krsort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
This example would display:
d = lemon c = apple b = banana a = orange
You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().
See also asort(), arsort(), ksort(), sort(), natsort(), and rsort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sorts an array by key, maintaining key to data correlations.
This is useful mainly for associative arrays.
Example 1. ksort() example
$fruits = array ("d"= "lemon", "a"= "orange", "b"= "banana", "c"= "apple"); ksort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
This example would display:
a = orange b = banana c = apple d = lemon
You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().
See also asort(), arsort(), krsort(), uksort(), sort(), natsort(), and rsort().
Note:
The second parameter was added in PHP 4.
Prev
Home
Next
Up
PHP Manual
Prev
Next
lcg_value() returns a pseudo random number in the range of (0, 1).
The function combines two CGs with periods of 2^31 - 85 and 2^31 - 249.
The period of this function is equal to the product of both primes.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
The ldap_add() function is used to add entries in the LDAP directory.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
ldap_close() closes the link to the LDAP server that's associated with the specified link_identifier.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
Returns TRUE if value matches otherwise returns FALSE.
Example 1.
Warning
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns number of entries in the result or FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
ldap_delete() function delete a particular entry in LDAP directory specified by dn.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.13, PHP 4)
Returns string error message.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.12, PHP 4)
Returns string error message.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the first attribute in the entry on success and FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
ldap_free_result() frees up the memory allocated internally to store the result and pointed by the result_identifier.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the DN of the result entry and FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Sets retval to the value of the specified option.
The parameter option The parameter option can be one of:
Note:
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.13, PHP 4)
Returns an array of values for the attribute on success and FALSE on error.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns a search result identifier or FALSE on error.
Note:
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.8, PHP 4)
Returns TRUE on success or FALSE on failure.
This function adds attribute( s) to the specified dn.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.8, PHP 4)
Returns TRUE on success or FALSE on failure.
This function removes attribute( s) from the specified dn.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
ldap_modify() function is used to modify the existing entries in the LDAP directory.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.8, PHP 4)
Returns TRUE on success or FALSE on failure.
This function replaces attribute( s) from the specified dn.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns a search result identifier or FALSE on error.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
The entry specified by dn is renamed / moved.
Returns TRUE on success or FALSE on failure.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns a search result identifier or FALSE on error.
Note:
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Sets the value of the specified option to be newval.
The parameter option The parameter option can be one of:
Note:
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
ldap_unbind() function unbinds from the LDAP directory.
Prev
Home
Next
Up
Mail functions
PHP Manual
Prev
Next
This function returns the Levenshtein-Distance between the two argument strings or -1, if one of the argument strings is longer than the limit of 255 characters (255 should be more than enough for name or dictionary comparison, and nobody serious would be doing genetic analysis with PHP).
The Levenshtein distance is defined as the minimal number of characters you have to replace, insert or delete to transform str1 into str2.
The complexity of the algorithm is O( m*n), where n and m are the length of str1 and str2 (rather good when compared to similar_text(), which is O(max(n,m)**3), but still expensive).
In its simplest form the function will take only the two strings as parameter and will calculate just the number of insert, replace and delete operations needed to transform str1 into str2.
A second variant will take three additional parameters that define the cost of insert, replace and delete operations.
This is more general and adaptive than variant one, but not as efficient.
The third variant (which is not implemented yet) will be the most general and adaptive, but also the slowest alternative.
It will call a user-supplied function that will determine the cost for every possible operation.
The user-supplied function will be called with the following arguments:
operation to apply: 'I', 'R' or'D '
See also soundex(), similar_text(), and metaphone().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
link() creates a hard link.
See also the symlink() to create soft links, and readlink() along with linkinfo().
Prev
Home
Next
Up
PHP Manual
Prev
Next
linkinfo() returns the st_dev field of the UNIX C stat structure returned by the lstat system call.
This function is used to verify if a link (pointed to by path) really exists (using the same method as the S_ISLNK macro defined in stat.h).
Returns 0 or FALSE in case of error.
See also symlink(), link(), and readlink().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Like array(), this is not really a function, but a language construct. list() is used to assign a list of variables in one operation.
Example 1. list() examples
?php $info = array( 'coffee', 'brown', 'caffeine'); / / Listing all the variables list($drink, $color, $power) = $info; print "$drink is $color and $power makes it special.\n"; / / Listing some of them list($drink,, $power) = $info; print "$drink has $power.\n"; / / Or let's skip to only the third one list (,, $power) = $info; print "I need $power!\n";?
Example 2.
An example use of list()
table tr th Employee name / th th Salary / th / tr ?php $result = mysql_query ("SELECT id, name, salary FROM employees",$conn); while (list ($id, $name, $salary) = mysql_fetch_row ($result)) {print ("tr \n"." td a href=\"info.php?id=$id\ "$name / a / td \n"." td $salary / td \n". "/ tr \n");}? / table
Warning
list() assigns the values starting with the right-most parameter.
If you are using plain variables, you don 't have to worry about this.
But if you are using arrays with indices you usually expect the order of the indices in the array the same you wrote in the list() from left to right; which it isn't.
It 's assigned in the reverse order.
Example 3.
Using list() with array indices
?php $info = array( 'coffee', 'brown', 'caffeine'); list($a[0], $a[1], $a[2]) = $info; var_dump($a);?
array( 3) {[2]= string(8) "caffeine "[1]= string(5) "brown" [0]= string(6) "coffee "}
See also each(), array() and extract().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an associative array containing localized numeric and monetary formatting information.
localeconv() returns data based upon the current locale as set by setlocale().
The associative array that is returned contains the following fields:
Description
Decimal point character
Array containing numeric groupings
Local currency symbol (i.e. $)
Monetary decimal point character
Monetary thousands separator
Array containing monetary groupings
Sign for positive values
Sign for negative values
International fractional digits
Local fractional digits
TRUE if currency_symbol precedes a positive value, FALSE if it succeeds one
TRUE if a space separates currency_symbol from a positive value, FALSE otherwise
TRUE if currency_symbol precedes a negative value, FALSE if it succeeds one
TRUE if a space separates currency_symbol from a negative value, FALSE otherwise
Parentheses surround the quantity and currency_symbol
The sign string precedes the quantity and currency_symbol
The sign string succeeds the quantity and currency_symbol
The sign string immediately precedes the currency_symbol
The sign string immediately succeeds the currency_symbol
Parentheses surround the quantity and currency_symbol
The sign string precedes the quantity and currency_symbol
The sign string succeeds the quantity and currency_symbol
The sign string immediately precedes the currency_symbol
The sign string immediately succeeds the currency_symbol
The grouping fields contain arrays that define the way numbers should be grouped.
For example, the grouping field for the en_US locale, would contain a 2 item array with the values 3 and 3.
The higher the index in the array, the farther left the grouping is.
If an array element is equal to CHAR_MAX, no further grouping is done.
If an array element is equal to 0, the previous element should be used.
Example 1. localeconv() example
The constant CHAR_MAX is also defined for the use mentioned above.
See also setlocale().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The localtime() function returns an array identical to that of the structure returned by the C function call.
The first argument to localtime() is the timestamp, if this is not given the current time is used.
The second argument to the localtime() is the is_associative, if this is set to 0 or not supplied than the array is returned as a regular, numerically indexed array.
If the argument is set to 1 then localtime() is an associative array containing all the different elements of the structure returned by the C function call to localtime.
The names of the different keys of the associative array are as follows:
"tm_sec" - seconds
"tm_min" - minutes
"tm_hour" - hour
"tm_mday" - day of the month
"tm_mon" - month of the year, starting with 0 for January
"tm_year" - Years since 1900
"tm_wday" - Day of the week
"tm_yday" - Day of the year
"tm_isdst" - Is daylight savings time in effect
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the base-10 logarithm of arg.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
The base parameter became available with PHP version 4.3.0.
As always you can calculate the logarithm in base b of a number n, but using the mathematical identity: log b (n) = log(n) / log(b), where log is the neperian (or natural) logarithm.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.4, PHP 4)
Gathers the statistics of the file or symbolic link named by filename.
This function is identical to the stat() function except that if the filename parameter is a symbolic link, the status of the symbolic link is returned, not the status of the file pointed to by the symbolic link.
Returns an array with the statistics of the file with the following elements:
lstat() cannot be used on remote files.
The results of this function are cached.
See clearstatcache() for more details.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
The second parameter was added in PHP 4.1.0
This function returns a string with whitespace stripped from the beginning of str.
Without the second parameter, ltrim() will strip these characters:
"" (ASCII 32 (0x20)), an ordinary space.
"\t" (ASCII 9 (0x09)), a tab.
"\n" (ASCII 10 (0x0A)), a new line (line feed).
"\x0B" (ASCII 11 (0x0B)), a vertical tab.
You can also specify the characters you want to strip, by means of the charlist You can also specify the characters you want to strip, by means of the charlist parameter.
Simply list all characters that you want to be stripped.
With.. you can specify a range of characters.
Example 1.
Usage example of ltrim()
See also trim() and rtrim().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mail() automatically mails the message specified in message to the receiver specified in to.
Multiple recipients can be specified by putting a comma between each address in to.
Email with attachments and special types of content can be sent using this function.
This is accomplished via MIME-encoding - for more information, see this Zend article or the PEAR Mime Classes.
The following RFC 's may also be useful:
mail() returns TRUE if the mail was successfully accepted for delivery, FALSE otherwise.
Warning
The Windows implementation of mail() differs in many ways from the Unix implementation.
First, it doesn' t use a local binary for composing messages but only operates on direct sockets which means a MTA is needed listening on a network socket (which can either on the localhost or a remote machine).
Second, the custom headers like From:, Cc:, Bcc: and Date: are not interpreted by the MTA in the first place, but are parsed by PHP.
PHP 4.3 only supported the Cc: header element (and was case-sensitive).
PHP = 4.3 supports all the mentioned header elements and is no longer case-sensitive.
Example 1.
Sending mail.
If a fourth string argument is passed, this string is inserted at the end of the header.
This is typically used to add extra headers.
Multiple extra headers are separated with a carriage return and newline.
Note:
You must use \r\n to separate headers, although some Unix mail transfer agents may work with just a single newline (\n).
Example 2.
Sending mail with extra headers.
The additional_parameters parameter can be used to pass an additional parameter to the program configured to use when sending mail using the sendmail_path The additional_parameters parameter can be used to pass an additional parameter to the program configured to use when sending mail using the sendmail_path configuration setting.
You may need to add the user that your web server runs as to your sendmail configuration to prevent a 'X-Warning' header from being added to the message when you set the envelope sender using this method.
Example 3.
Sending mail with extra headers and setting an additional command line parameter.
Note:
This fifth parameter was added in PHP 4.0.5.
You can also use simple string building techniques to build complex email messages.
Example 4.
Sending complex email.
1.0\r\n"; $headers .= "Content-type: text / html; charset=iso-8859-1\r\n"; / * additional headers * / $headers .= "From:
The to The to parameter cannot be an address in the form of "Something someone@example.com".
See also imap_mail().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.1.2 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.1.2 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.1.2 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.1.2 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.1.2 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.1.2 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.1.2 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.1.2 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.1.2 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.1.2 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.1.2 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.1.2 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
Mathematical Functions
PHP Manual
Prev
Next
max() returns the numerically highest of the parameter values.
If the first parameter is an array, max() returns the highest value in that array.
If one or more of the values is a float, all the values will be treated as floats, and a float is returned.
If none of the values is a float, all of them will be treated as integers, and an integer is returned.
See also min().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_convert_case() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_convert_encoding() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_convert_kana() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_convert_variables() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. convmap example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_detect_encoding() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1.
Example 2. mb_detect_order() examples
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_convert_kana() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. convmap example
Example 2. mb_encode_numericentity() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_internal_encoding() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
mb_language() sets language.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_output_handler() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_preferred_mime_string() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
mb_send_mail() sends email.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.3.0 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_strimwidth() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_strtolower() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_strtoupper() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
mb_strwidth() returns width of string str.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_substitute_character() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mb_substr_count() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.13, PHP 4)
Returns an MCAL stream on success, FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.13, PHP 4)
Returns an MCAL stream on success, FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.13, PHP 4)
Reopens an MCAL stream to a new calendar.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.8, PHP 4)
mcrypt_create_iv() is used to create an IV.
Example 1. mcrypt_create_iv() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function returns the name of the algorithm.
?php $td = mcrypt_module_open (MCRYPT_CAST_256, '', MCRYPT_MODE_CFB, ''); echo mcrypt_enc_get_algorithms_name($td). "\n"; $td = mcrypt_module_open ('cast-256','', MCRYPT_MODE_CFB, ''); echo mcrypt_enc_get_algorithms_name($td). "\n";?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function returns the name of the mode.
?php $td = mcrypt_module_open (MCRYPT_CAST_256, '', MCRYPT_MODE_CFB, ''); echo mcrypt_enc_get_modes_name($td). "\n"; $td = mcrypt_module_open ('cast-256','', 'ecb', ''); echo mcrypt_enc_get_modes_name($td). "\n";?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_enc_get_supported_key_sizes() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_encrypt() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function encrypts data.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_get_block_size() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.8, PHP 4)
mcrypt_get_cipher_name() is used to get the name of the specified cipher.
Example 1. mcrypt_get_cipher_name() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_create_iv() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_get_block_size() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_list_algorithms() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_list_modes() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. mcrypt_module_open() Example
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function runs the self test on the algorithm specified.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
Mhash Functions
PHP Manual
Prev
Next
Calculates the MD5 hash of the specified filename using the RSA Data Security, Inc. MD5 Message-Digest Algorithm
This function has the same purpose of the command line utility md5sum.
See also md5() and crc32()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Calculates the MD5 hash of str using the RSA Data Security, Inc. MD5 Message-Digest Algorithm
The hash is a 32-character hexadecimal number.
See also crc32(), md5_file(), and sha1().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
This function decrypts data.
Example 1. mdecrypt_generic() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Calculates the metaphone key of str.
Similar to soundex() metaphone creates the same key for similar sounding words.
It' s more accurate than soundex() It's more accurate than soundex() as it knows the basic rules of English pronunciation.
The metaphone generated keys are of variable length.
Metaphone was developed by Lawrence Philips lphilips@verity.com.
It is described in ["Practical Algorithms for Programmers", Binstock Rex, Addison Wesley, 1995].
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns TRUE if the method given by method_name has been defined for the given object, FALSE otherwise.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mhash_count() returns the highest available hash id.
Hashes are numbered from 0 to this hash id.
Example 1.
Traversing all hashes
?php $nr = mhash_count(); for ($i = 0; $i = $nr; $i++) {echo sprintf ("The blocksize of %s is %d\n", mhash_get_hash_name ($i), mhash_get_block_size ($i));}?
Prev
Home
Next
Mhash Functions
Up
PHP Manual
Prev
Next
mhash_get_block_size() is used to get the size of a block of the specified hash.
mhash_get_block_size() takes one argument, the hash and returns the size in bytes or FALSE, if the hash does not exist.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.9, PHP 4)
mhash_get_hash_name() is used to get the name of the specified hash.
mhash_get_hash_name() takes the hash id as an argument and returns the name of the hash or FALSE, if the hash does not exist.
Example 1. mhash_get_hash_name() example
The above example will print out:
Prev
Home
Next
Up
PHP Manual
Prev
Next
mhash() applies a hash function specified by hash to the data and returns the resulting hash (also called digest).
If the key is specified it will return the resulting HMAC.
HMAC is keyed hashing for message authentication, or simply a message digest that depends on the specified key.
Not all algorithms supported in mhash can be used in HMAC mode.
In case of an error returns FALSE.
Prev
Home
Next
Up
PHP Manual
Prev
Next
That salt must be known when you check the keys, thus it is a good idea to append the key to it.
Keep in mind that user supplied passwords are not really suitable to be used as keys in cryptographic algorithms, since users normally choose keys they can write on keyboard.
These passwords use only 6 to 7 bits per character (or less).
It is highly recommended to use some kind of tranformation (like this function) to the user supplied key.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the string "msec sec" where sec is the current time measured in the number of seconds since the Unix Epoch (0:00:00 January 1, 1970 GMT), and msec is the microseconds part.
This function is only available on operating systems that support the gettimeofday() system call.
Both portions of the string are returned in units of seconds.
Example 1. microtime() example
See also time().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
Microsoft SQL Server functions
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
min() returns the numerically lowest of the parameter values.
In the first variant, you need at least two parameters and min() returns the lowest of these values.
You can compare an unlimited number of values.
If one of the variables is undefined, min() will fail.
In the second variant, min() returns the lowest value in numbers.
If one or more of the values is a float, all the values will be treated as floats, and a float is returned.
If none of the values is a float, all of them will be treated as integer s, and an integer is returned.
Upon failure, min() returns NULL and an error of level E_WARNING is generated.
?php $a = 4; $b = 9; $c = 3; $arr = array(99, 34, 11); / / You may want to implement your own error checking in / / case of failure (a variable may not be set) if (!$min_value = @min($a, $b, $c)) {echo "Could not get min value, please try again .";} else {echo "min value is $min_value";} print min($arr); / / 11?
See also max().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Note that you probably want to specify the mode as an octal number, which means it should have a leading zero.
Note:
The mode is 0777 by default, which means the widest possible access.
Returns TRUE on success or FALSE on failure.
See also rmdir().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning:
It is a common error to mix these values up in a script.
Returns the Unix timestamp corresponding to the arguments given.
This timestamp is a long integer containing the number of seconds between the Unix Epoch (January 1 1970) and the time specified.
Arguments may be left out in order from right to left; any arguments thus omitted will be set to the current value according to the local date and time.
is_dst can be set to 1 if the time is during daylight savings time, 0 if it is not, or -1 (the default) if it is unknown whether the time is within daylight savings time or not.
If it 's unknown, PHP tries to figure it out itself.
This can cause unexpected (but not incorrect) results.
mktime() is useful for doing date arithmetic and validation, as it will automatically calculate the correct value for out-of-range input.
For example, each of the following lines produces the string "Jan-01-1998".
Example 1. mktime() example
The last day of any given month can be expressed as the "0" day of the next month, not the -1 day.
Both of the following examples will produce the string "The last day in Feb 2000 is:
Example 2.
Last day of next month
Date with year, month and day equal to zero is considered illegal (otherwise it what be regarded as 30.11.1999, which would be strange behavior).
See also date() and time().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
money_format() returns a formatted version of number.
Note:
Example 1. money_format() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function checks to ensure that the file designated by filename is a valid upload file (meaning that it was uploaded via PHP's HTTP POST upload mechanism).
If the file is valid, it will be moved to the filename given by destination.
If filename is not a valid upload file, then no action will occur, and move_uploaded_file() will return FALSE.
If filename is a valid upload file, but cannot be moved for some reason, no action will occur, and move_uploaded_file() will return FALSE.
Additionally, a warning will be issued.
This sort of check is especially important if there is any chance that anything done with uploaded files could reveal their contents to the user, or even to other users on the same system.
Note:
When safe mode is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
This is not unsafe because move_uploaded_file() only operates on files uploaded via PHP.
Warning
If the destination file already exists, it will be overwritten.
See also is_uploaded_file(), and the section Handling file uploads for a simple usage example.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success, FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
msql_data_seek() moves the internal row pointer of the mSQL result associated with the specified query identifier to point to the specifyed row number.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
msql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier.
Prev
Home
Next
Up
PHP Manual
Prev
Next
See msql_drop_db().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns an object containing field information
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Seeks to the specified field offset.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
msql_free_result() frees the memory associated with query_identifier.
Prev
Home
Next
Up
PHP Manual
Prev
Next
See msql_free_result()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
MySQL Functions
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
See msql_list_dbs().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
See msql_list_fields().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
See msql_list_tables().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. msql_query()
Prev
Home
Next
Up
PHP Manual
Prev
Next
See sql_regcase().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success, FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
See msql_select_db().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. msql_tablename() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
See also mssql_execute(), mssql_free_statement() and mssql_init()
Prev
Home
Next
Microsoft SQL Server functions
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
TRUE on success, FALSE on error.
mssql_close() closes the link to a MS SQL Server database that's associated with the specified link identifier.
If the link identifier isn 't specified, the last opened link is assumed.
Note that this isn' t usually necessary, as non-persistent open links are automatically closed at the end of the script's execution.
mssql_close() will not close persistent links generated by mssql_pconnect().
See also: mssql_connect(), mssql_pconnect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
A positive MS SQL link identifier on success, or FALSE on error.
mssql_connect() establishes a connection to a MS SQL server.
The servername argument has to be a valid servername that is defined in the 'interfaces' file.
In case a second call is made to mssql_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned.
The link to the server will be closed as soon as the execution of the script ends, unless it' s closed earlier by explicitly calling mssql_close().
See also mssql_pconnect(), mssql_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
TRUE on success, FALSE on failure.
mssql_data_seek() moves the internal row pointer of the MS SQL result associated with the specified result identifier to point to the specified row number.
The next call to mssql_fetch_row() would return that row.
See also: mssql_data_seek().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
In that case use mssql_next_result() to shift through the results.
See also mssql_bind(), mssql_free_statement() and mssql_init()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
An array that corresponds to the fetched row, or FALSE if there are no more rows.
mssql_fetch_array() is an extended version of mssql_fetch_row().
In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys.
An important thing to note is that using mssql_fetch_array() is NOT significantly slower than using mssql_fetch_row(), while it provides a significant added value.
For further details, also see mssql_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns an object containing field information.
mssql_fetch_field() can be used in order to obtain information about fields in a certain query result.
If the field offset isn' t specified, the next field that wasn't yet retrieved by mssql_fetch_field() is retrieved.
The properties of the object are:
name - column name. if the column is a result of a function, this property is set to computed#N, where #N is a serial number.
column_source - the table from which the column was taken
max_length - maximum length of the column
numeric - 1 if the column is numeric
See also mssql_field_seek().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3)
Returns:
An object with properties that correspond to the fetched row, or FALSE if there are no more rows.
mssql_fetch_object() is similar to mssql_fetch_array(), with one difference - an object is returned, instead of an array.
Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names).
Speed-wise, the function is identical to mssql_fetch_array(), and almost as quick as mssql_fetch_row() (the difference is insignificant).
See also: mssql_fetch-array() and mssql_fetch-row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
An array that corresponds to the fetched row, or FALSE if there are no more rows.
mssql_fetch_row() fetches one row of data from the result associated with the specified result identifier.
The row is returned as an array.
Each result column is stored in an array offset, starting at offset 0.
Subsequent call to mssql_fetch_rows() would return the next row in the result set, or FALSE if there are no more rows.
See also: mssql_fetch_array(), mssql_fetch_object(), mssql_data_seek(), mssql_fetch_lengths(), and mssql_result().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Seeks to the specified field offset.
If the next call to mssql_fetch_field() won't include a field offset, this field would be returned.
See also: mssql_fetch_field().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
mssql_free_result() only needs to be called if you are worried about using too much memory while your script is running.
All result memory will automatically be freed when the script ends.
You may call mssql_free_result() with the result identifier as an argument and the associated result memory will be freed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is currently not documented; only the argument list is available.
See also mssql_bind(), mssql_execute() and mssql_free_statement()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
When sending more than one SQL statement to the server or executing a stored procedure with multiple results, it will cause the server to return multiple result sets.
This function will test for additional results available form the server.
If an additional result set exists it will free the existing result set and prepare to fetch the rows from the new result set.
The function will return TRUE if an additional result set was available or FALSE otherwise.
Example 1. mssql_next_result() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
mssql_num_fields() returns the number of fields in a result set.
See also: mssql_db_query(), mssql_query(), mssql_fetch_field(), and mssql_num_rows().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mssql_num_rows() returns the number of rows in a result set.
See also: mssql_db_query(), mssql_query(), and mssql_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
A positive MS SQL persistent link identifier on success, or FALSE on error.
mssql_pconnect() acts very much like mssql_connect() with two major differences.
First, when connecting, the function would first try to find a (persistent) link that's already open with the same host, username and password.
If one is found, an identifier for it will be returned instead of opening a new connection.
Second, the connection to the SQL server will not be closed when the execution of the script ends.
Instead, the link will remain open for future use (mssql_close() will not close links established by mssql_pconnect()).
This type of links is therefore called 'persistent'.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
A positive MS SQL result identifier on success, or FALSE on error.
mssql_query() sends a query to the currently active database on the server that's associated with the specified link identifier.
If the link identifier isn 't specified, the last opened link is assumed.
If no link is open, the function tries to establish a link as if mssql_connect() was called, and use it.
See also: mssql_db_query(), mssql_select_db(), and mssql_connect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mssql_result() returns the contents of one cell from a MS SQL result set.
The field argument can be the field' s offset, the field's name or the field's table dot field's name (tablename.fieldname).
If the column name has been aliased ('select foo as bar from.. .'), it uses the alias instead of the column name.
When working on large result sets, you should consider using one of the functions that fetch an entire row (specified below).
As these functions return the contents of multiple cells in one function call, they' re MUCH quicker than mssql_result().
Also, note that specifying a numeric offset for the field argument is much quicker than specifying a fieldname or tablename.fieldname argument.
Recommended high-performance alternatives: mssql_fetch_row(), mssql_fetch_array(), and mssql_fetch_object().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
TRUE on success, FALSE on error
mssql_select_db() sets the current active database on the server that's associated with the specified link identifier.
If no link identifier is specified, the last opened link is assumed.
If no link is open, the function will try to establish a link as if mssql_connect() was called, and use it.
Every subsequent call to mssql_query() will be made on the active database.
See also: mssql_connect(), mssql_pconnect(), and mssql_query()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the maximum value that can be returned by a call to mt_rand().
See also mt_rand(), mt_srand() and getrandmax().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Many random number generators of older libcs have dubious or unknown characteristics and are slow.
By default, PHP uses the libc random number generator with the rand() By default, PHP uses the libc random number generator with the rand() function.
The mt_rand() function is a drop-in replacement for this.
It uses a random number generator with known characteristics using the Mersenne Twister, which will produce random numbers that should be suitable for seeding some kinds of cryptography (see the home page for details) and is four times faster than what the average libc provides.
If you want a random number between 5 and 15 (inclusive), for example, use mt_rand (5, 15).
In older versions of PHP, you had to seed the random number generator before use with mt_srand().
Since 4.2.0 this is no longer necessary.
Note:
In versions before 3.0.7 the meaning of max was range.
To get the same results in these versions the short example should be mt_rand (5, 11) to get a random number between 5 and 15.
See also mt_srand(), mt_getrandmax() and rand().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Seeds the random number generator with seed.
/ / seed with microseconds function make_seed() {list($usec, $sec) = explode( '', microtime()); return (float) $sec + ((float) $usec * 100000);} mt_srand(make_seed()); $randval = mt_rand();
Note:
Since PHP 4.2.0 it 's no longer necessary to seed the random number generator before using it.
See also mt_rand(), mt_getrandmax() and srand().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_affected_rows() returns the number of rows affected by the last INSERT, UPDATE or DELETE query associated with link_identifier.
If the link identifier isn' t specified, the last link opened by mysql_connect() is assumed.
Note:
If you are using transactions, you need to call mysql_affected_rows() after your INSERT, UPDATE, or DELETE query, not after the commit.
If the last query was a DELETE query with no WHERE clause, all of the records will have been deleted from the table but this function will return zero.
Note:
When using UPDATE, MySQL will not update columns where the new value is the same as the old value.
This creates the possiblity that mysql_affected_rows() may not actually equal the number of rows matched, only the number of rows that were literally affected by the query.
mysql_affected_rows() does not work with SELECT statements; only on statements which modify records.
To retrieve the number of rows returned by a SELECT, use mysql_num_rows().
If the last query failed, this function will return -1.
Example 1.
?php / * connect to database * / mysql_pconnect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); / * this should return the correct numbers of deleted records * / mysql_query("DELETE FROM mytable WHERE id 10"); printf ("Records deleted: %d\n", mysql_affected_rows()); / * without a where clause in a delete statement, it should return 0 * / mysql_query("DELETE FROM mytable"); printf ("Records deleted: %d\n", mysql_affected_rows());?
The above example would produce the following output:
Records deleted:
10 Records deleted:
Example 2.
?php / * connect to database * / mysql_pconnect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); / * Update records * / mysql_query("UPDATE mytable SET used=1 WHERE id 10"); printf ("Updated records: %d\n", mysql_affected_rows()); mysql_query("COMMIT");?
The above example would produce the following output:
Updated Records:
See also: mysql_num_rows(), mysql_info().
Prev
Home
Next
MySQL Functions
Up
PHP Manual
Prev
Next
mysql_change_user() changes the logged in user of the current active connection, or the connection given by the optional link_identifier parameter.
If a database is specified, this will be the current database after the user has been changed.
If the new user and password authorization fails, the current connected user stays active.
Returns TRUE on success or FALSE on failure.
Note:
This function was introduced in PHP 3.0.13 and requires MySQL 3.23.3 or higher.
It is not available in PHP 4.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_client_encoding() returns the default character set name for the current connection.
Example 1. mysql_client_encoding() example
?php $link = mysql_connect( 'localhost', 'mysql_user', 'mysql_password'); $charset = mysql_client_encoding($link); printf ("current character set is %s\n", $charset);?
The above example would produce the following output:
current character set is latin1
See also: mysql_real_escape_string()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
mysql_close() closes the connection to the MySQL server that's associated with the specified link identifier.
If link_identifier isn 't specified, the last opened link is used.
Using mysql_close() isn't usually necessary, as non-persistent open links are automatically closed at the end of the script's execution.
See also freeing resources.
Example 1.
MySQL close example
?php $link = mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); print ("Connected successfully"); mysql_close($link);?
See also: mysql_connect(), and mysql_pconnect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns a MySQL link identifier on success, or FALSE on failure.
mysql_connect() establishes a connection to a MySQL server.
The following defaults are assumed for missing optional parameters: server = 'localhost:3306', username = name of the user that owns the server process and password = empty password.
The server parameter can also include a port number. eg. "hostname:port" or a path to a socket eg. ": / path / to / socket" for the localhost.
Note:
Support for ":port" was added in PHP 3.0B4.
Support for ": / path / to / socket" was added in PHP 3.0.10.
You can suppress the error message on failure by prepending a @ to the function name.
If a second call is made to mysql_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned.
The new_link parameter modifies this behavior and makes mysql_connect() always open a new link, even if mysql_connect() was called before with the same parameters.
The client_flags parameter can be a combination of the constants MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS, MYSQL_CLIENT_IGNORE_SPACE or MYSQL_CLIENT_INTERACTIVE.
Note:
The new_link parameter became available in PHP 4.2.0
The client_flags parameter became available in PHP 4.3.0
The link to the server will be closed as soon as the execution of the script ends, unless it' s closed earlier by explicitly calling mysql_close().
Example 1.
MySQL connect example
?php $link = mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); print ("Connected successfully"); mysql_close($link);?
See also mysql_pconnect() and mysql_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_create_db() attempts to create a new database on the server associated with the specified link identifier.
Returns TRUE on success or FALSE on failure.
Example 1.
MySQL create database example
?php $link = mysql_pconnect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); if (mysql_create_db("my_db")) {print ("Database created successfully\n");} else {printf ("Error creating database: %s\n", mysql_error());}?
For downwards compatibility mysql_createdb() can also be used.
This is deprecated, however.
Note:
The function mysql_create_db() is deprecated.
It is preferable to use mysql_query() to issue a SQL CREATE DATABASE Statement instead.
See also: mysql_drop_db(), mysql_query().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
mysql_data_seek() moves the internal row pointer of the MySQL result associated with the specified result identifier to point to the specified row number.
The next call to mysql_fetch_row() would return that row.
Row_number starts at 0.
The row_number should be a value in the range from 0 to mysql_num_rows - 1.
Note:
The function mysql_data_seek() can be used in conjunction only with mysql_query(), not with mysql_unbuffered_query().
Example 1.
MySQL data seek example
?php $link = mysql_pconnect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); mysql_select_db("samp_db") or die("Could not select database:". mysql_error()); $query = "SELECT last_name, first_name FROM friends"; $result = mysql_query($query) or die("Query failed: ". mysql_error()); / * fetch rows in reverse order * / for ($i = mysql_num_rows($result) - 1; $i = 0; $i- -) {if (!mysql_data_seek($result, $i)) {echo "Cannot seek to row $i:". mysql_error(). "\n"; continue;} if( !($row = mysql_fetch_object($result))) continue; echo "$row - last_name $row - first_name br / \n";} mysql_free_result($result);?
See also: mysql_query(), mysql_num_rows().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_db_name() takes as its first parameter the result pointer from a call to mysql_list_dbs().
The row parameter is an index into the result set.
If an error occurs, FALSE is returned.
Use mysql_errno() and mysql_error() to determine the nature of the error.
Example 1. mysql_db_name() example
For backward compatibility, mysql_dbname() is also accepted.
This is deprecated, however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a positive MySQL result resource to the query result, or FALSE on error.
The function also returns TRUE / FALSE for INSERT / UPDATE / DELETE queries to indicate success / failure.
mysql_db_query() selects a database and executes a query on it.
If the optional link identifier isn' t specified, the function will try to find an open link to the MySQL server and if no such link is found it'll try to create one as if mysql_connect() was called with no arguments.
Be aware that this function does NOT switch back to the database you were connected before.
In other words, you can 't use this function to temporarily run a sql query on another database, you would have to manually switch back.
Users are strongly encouraged to use the database.table syntax in their sql queries instead of this function.
See also mysql_connect() and mysql_query().
Note:
This function has been deprecated since PHP 4.0.6.
Do not use this function.
Use mysql_select_db() and mysql_query() instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
mysql_drop_db() attempts to drop (remove) an entire database from the server associated with the specified link identifier.
For downward compatibility mysql_dropdb() can also be used.
This is deprecated, however.
Note:
The function mysql_drop_db() is deprecated.
It is preferable to use mysql_query() to issue a SQL DROP DATABASE statement instead.
See also: mysql_create_db(), mysql_query().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the error number from the last MySQL function, or 0 (zero) if no error occurred.
Errors coming back from the MySQL database backend no longer issue warnings.
Instead, use mysql_errno() to retrieve the error code.
Note that this function only returns the error code from the most recently executed MySQL function (not including mysql_error() and mysql_errno()), so if you want to use it, make sure you check the value before calling another MySQL function.
Example 1. mysql_errno Example
?php mysql_connect( "localhost", "mysql_user", "mysql_password"); mysql_select_db("nonexistentdb"); echo mysql_errno(). ":". mysql_error(). "\n"; mysql_select_db("kossu"); mysql_query("SELECT * FROM nonexistenttable"); echo mysql_errno(). ":". mysql_error(). "\n";?
The above example would produce the following output:
Unknown database 'nonexistentdb' 1146:
Table 'kossu.nonexistenttable' doesn't exist
Note:
If the optional argument is specified the given link is used to retrieve the error code.
If not, the last opened link is used.
See also: mysql_error()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the error text from the last MySQL function, or '' (the empty string) if no error occurred.
Errors coming back from the MySQL database backend no longer issue warnings.
Instead, use mysql_error() to retrieve the error text.
Note that this function only returns the error text from the most recently executed MySQL function (not including mysql_error() and mysql_errno()), so if you want to use it, make sure you check the value before calling another MySQL function.
Example 1. mysql_error Example
?php mysql_connect( "localhost", "mysql_user", "mysql_password"); mysql_select_db("nonexistentdb"); echo mysql_errno(). ":". mysql_error(). "\n"; mysql_select_db("kossu"); mysql_query("SELECT * FROM nonexistenttable"); echo mysql_errno(). ":". mysql_error(). "\n";?
The above example would produce the following output:
Unknown database 'nonexistentdb' 1146:
Table 'kossu.nonexistenttable' doesn't exist
Note:
If the optional argument is specified the given link is used to retrieve the error message.
If not, the last opened link is used.
See also: mysql_errno()
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function will escape the unescaped_string, so that it is safe to place it in a mysql_query().
This function is identical to mysql_real_escape_string() except that mysql_real_escape_string() takes a connection handler and escapes the string according to the current character set. mysql_escape_string() does not take a connection argument and does not respect the current charset setting.
Example 1. mysql_escape_string() example
?php $item = "Zak's Laptop"; $escaped_item = mysql_escape_string($item); printf ("Escaped string: %s\n", $escaped_item);?
The above example would produce the following output:
See also: mysql_real_escape_string(), addslashes(), and the magic_quotes_gpc directive.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array that corresponds to the fetched row, or FALSE if there are no more rows.
mysql_fetch_array() is an extended version of mysql_fetch_row().
In addition to storing the data in the numeric indices of the result array, it also stores the data in associative indices, using the field names as keys.
If two or more columns of the result have the same field names, the last column will take precedence.
To access the other column( s) of the same name, you must use the numeric index of the column or make an alias for the column.
For aliased columns, you cannot access the contents with the original column name (by using'field 'in this example).
Example 1.
Query with duplicate field names
An important thing to note is that using mysql_fetch_array() is not significantly slower than using mysql_fetch_row(), while it provides a significant added value.
The optional second argument result_type in mysql_fetch_array() is a constant and can take the following values:
MYSQL_ASSOC, MYSQL_NUM, and MYSQL_BOTH.
This feature was added in PHP 3.0.7.
MYSQL_BOTH is the default for this argument.
By using MYSQL_BOTH, you 'll get an array with both associative and number indices.
Using MYSQL_ASSOC, you only get associative indices (as mysql_fetch_assoc() works), using MYSQL_NUM, you only get number indices (as mysql_fetch_row() works).
Example 2. mysql_fetch_array with MYSQL_NUM
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); mysql_select_db("mydb"); $result = mysql_query("SELECT id, name FROM mytable"); while ($row = mysql_fetch_array($result, MYSQL_NUM)) {printf ("ID: %s Name: %s", $row[0], $row[1]);} mysql_free_result($result);?
Example 3. mysql_fetch_array with MYSQL_ASSOC
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); mysql_select_db("mydb"); $result = mysql_query("SELECT id, name FROM mytable"); while ($row = mysql_fetch_array($result, MYSQL_ASSOC)) {printf ("ID: %s Name: %s", $row["id"], $row["name"]);} mysql_free_result($result);?
Example 4. mysql_fetch_array with MYSQL_BOTH
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); mysql_select_db("mydb"); $result = mysql_query("SELECT id, name FROM mytable"); while ($row = mysql_fetch_array($result, MYSQL_BOTH)) {printf ("ID: %s Name: %s", $row[0], $row["name"]);} mysql_free_result($result);?
For further details, see also mysql_fetch_row() and mysql_fetch_assoc().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an associative array that corresponds to the fetched row, or FALSE if there are no more rows.
mysql_fetch_assoc() is equivalent to calling mysql_fetch_array() with MYSQL_ASSOC for the optional second parameter.
It only returns an associative array.
This is the way mysql_fetch_array() originally worked.
If you need the numeric indices as well as the associative, use mysql_fetch_array().
If two or more columns of the result have the same field names, the last column will take precedence.
To access the other column( s) of the same name, you either need to access the result with numeric indices by using mysql_fetch_row() or add alias names.
See the example at the mysql_fetch_array() description about aliases.
Example 1.
An expanded mysql_fetch_assoc() example
?php $conn = mysql_connect( "localhost", "mysql_user", "mysql_password"); if (!$conn) {echo "Unable to connect to DB: ". mysql_error(); exit;} if (!mysql_select_db("mydbname")) {echo "Unable to select mydbname:". mysql_error(); exit;} $sql = "SELECT id as userid, fullname, userstatus FROM sometable WHERE userstatus = 1"; $result = mysql_query($sql); if (!$result) {echo "Could not successfully run query ($sql) from DB: ". mysql_error(); exit;} if (mysql_num_rows($result) == 0) {echo "No rows found, nothing to print so am exiting"; exit;} / / While a row of data exists, put that row in $row as an associative array / / Note:
If you 're expecting just one row, no need to use a loop / / Note:
If you put extract( $row); inside the following loop, you'll / / then create $userid, $fullname, and $userstatus while ($row = mysql_fetch_assoc($result)) {echo $row["userid"]; echo $row["fullname"]; echo $row["userstatus"];} mysql_free_result($result);?
See also mysql_fetch_row(), mysql_fetch_array(), mysql_query(), and mysql_error().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns an object containing field information.
mysql_fetch_field() can be used in order to obtain information about fields in a certain query result.
If the field offset isn' t specified, the next field that wasn't yet retrieved by mysql_fetch_field() is retrieved.
The properties of the object are:
name - column name
table - name of the table the column belongs to
max_length - maximum length of the column
not_null - 1 if the column cannot be NULL
primary_key - 1 if the column is a primary key
unique_key - 1 if the column is a unique key
multiple_key - 1 if the column is a non-unique key
numeric - 1 if the column is numeric
blob - 1 if the column is a BLOB
type - the type of the column
unsigned - 1 if the column is unsigned
zerofill - 1 if the column is zero-filled
Example 1. mysql_fetch_field()
?php mysql_connect( 'localhost:3306', $user, $password) or die("Could not connect: ". mysql_error()); mysql_select_db("database"); $result = mysql_query("select * from table") or die("Query failed:". mysql_error()); / * get column metadata * / $i = 0; while ($i mysql_num_fields($result)) {echo "Information for column $i: br / \n"; $meta = mysql_fetch_field($result); if (!$meta) {echo "No information available br / \n";} echo "pre blob: $meta - blob max_length: $meta - max_length multiple_key: $meta - multiple_key name: $meta - name not_null: $meta - not_null numeric: $meta - numeric primary_key: $meta - primary_key table: $meta - table type: $meta - type unique_key: $meta - unique_key unsigned: $meta - unsigned zerofill: $meta - zerofill / pre"; $i++;} mysql_free_result($result);?
See also mysql_field_seek().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array that corresponds to the lengths of each field in the last row fetched by mysql_fetch_row(), or FALSE on error.
mysql_fetch_lengths() stores the lengths of each result column in the last row returned by mysql_fetch_row(), mysql_fetch_array(), and mysql_fetch_object() in an array, starting at offset 0.
See also: mysql_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an object with properties that correspond to the fetched row, or FALSE if there are no more rows.
mysql_fetch_object() is similar to mysql_fetch_array(), with one difference - an object is returned, instead of an array.
Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names).
?php / * this is valid * / echo $row - field; / * this is invalid * / echo $row - 0;?
Speed-wise, the function is identical to mysql_fetch_array(), and almost as quick as mysql_fetch_row() (the difference is insignificant).
Example 1. mysql_fetch_object() example
See also: mysql_fetch_array() and mysql_fetch_row().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns an array that corresponds to the fetched row, or FALSE if there are no more rows.
mysql_fetch_row() fetches one row of data from the result associated with the specified result identifier.
The row is returned as an array.
Each result column is stored in an array offset, starting at offset 0.
Subsequent call to mysql_fetch_row() would return the next row in the result set, or FALSE if there are no more rows.
See also: mysql_fetch_array(), mysql_fetch_object(), mysql_data_seek(), mysql_fetch_lengths(), and mysql_result().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_field_flags() returns the field flags of the specified field.
The flags are reported as a single word per flag separated by a single space, so that you can split the returned value using explode().
The following flags are reported, if your version of MySQL is current enough to support them: "not_null", "primary_key", "unique_key", "multiple_key", "blob", "unsigned", "zerofill", "binary", "enum", "auto_increment", "timestamp".
For downward compatibility mysql_fieldflags() can also be used.
This is deprecated, however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_field_len() returns the length of the specified field.
For downward compatibility mysql_fieldlen() can also be used.
This is deprecated, however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_field_name() returns the name of the specified field index. result must be a valid result identifier and field_index is the numerical offset of the field.
e.g.
The index of the third field would actually be 2, the index of the fourth field would be 3 and so on.
Example 1. mysql_field_name() example
/* The users table consists of three fields: * user_id * username * password. * / $link = mysql_connect( 'localhost', "mysql_user", "mysql_password"); mysql_select_db($dbname, $link) or die("Could not set $dbname: ". mysql_error()); $res = mysql_query("select * from users", $link); echo mysql_field_name($res, 0). "\n"; echo mysql_field_name($res, 2);
The above example would produce the following output:
For downwards compatibility mysql_fieldname() can also be used.
This is deprecated, however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Seeks to the specified field offset.
If the next call to mysql_fetch_field() doesn't include a field offset, the field offset specified in mysql_field_seek() will be returned.
See also: mysql_fetch_field().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the name of the table that the specifed field is in.
For downward compatibility mysql_fieldtable() can also be used.
This is deprecated, however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_field_type() is similar to the mysql_field_name() function.
The arguments are identical, but the field type is returned instead.
The field type will be one of "int", "real", "string", "blob", and others as detailed in the MySQL documentation.
Example 1.
MySQL field types
The above example would produce the following output:
For downward compatibility mysql_fieldtype() can also be used.
This is deprecated, however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_free_result() will free all memory associated with the result identifier result.
mysql_free_result() only needs to be called if you are concerned about how much memory is being used for queries that return large result sets.
All associated result memory is automatically freed at the end of the script 's execution.
Returns TRUE on success or FALSE on failure.
For downward compatibility mysql_freeresult() can also be used.
This is deprecated, however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_get_client_info() returns a string that represents the client library version.
Example 1. mysql_get_client_info Example
The above example would produce the following output:
See also: mysql_get_host_info(), mysql_get_proto_info() and mysql_get_server_info().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_get_host_info() returns a string describing the type of connection in use for the connection link_identifier, including the server host name.
If link_identifier is omitted, the last opened connection will be used.
Example 1. mysql_get_host_info Example
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); printf ("MySQL host info: %s\n", mysql_get_host_info());?
The above example would produce the following output:
See also: mysql_get_client_info(), mysql_get_proto_info() and mysql_get_server_info().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_get_proto_info() returns the protocol version used by connection link_identifier.
If link_identifier is omitted, the last opened connection will be used.
Example 1. mysql_get_proto_info Example
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); printf ("MySQL protocol version: %s\n", mysql_get_proto_info());?
The above example would produce the following output:
See also: mysql_get_client_info(), mysql_get_host_info() and mysql_get_server_info().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_get_server_info() returns the server version used by connection link_identifier.
If link_identifier is omitted, the last opened connection will be used.
Example 1. mysql_get_server_info Example
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); printf ("MySQL server version: %s\n", mysql_get_server_info());?
The above example would produce the following output:
See also: mysql_get_client_info(), mysql_get_host_info() and mysql_get_proto_info().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_info() returns detailed information about the last query using the given link_identifier.
If link_identifier isn 't specified, the last opened link is assumed.
mysql_info() returns a string for all statements listed below.
For all other FALSE.
The string format depends on the given statement.
Example 1.
Relevant MySQL Statements
VALUES statement only if multiple value lists are specified in the statement.
See also: mysql_affected_rows()
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_insert_id() returns the ID generated for an AUTO_INCREMENT column by the previous INSERT query using the given link_identifier.
If link_identifier isn 't specified, the last opened link is assumed.
mysql_insert_id() returns 0 if the previous query does not generate an AUTO_INCREMENT value.
If you need to save the value for later, be sure to call mysql_insert_id() immediately after the query that generates the value.
Note:
The value of the MySQL SQL function LAST_INSERT_ID() always contains the most recently generated AUTO_INCREMENT value, and is not reset between queries.
Warning
mysql_insert_id() converts the return type of the native MySQL C API function mysql_insert_id() to a type of long (named int in PHP).
If your AUTO_INCREMENT column has a column type of BIGINT, the value returned by mysql_insert_id() will be incorrect.
Instead, use the internal MySQL SQL function LAST_INSERT_ID() in an SQL query.
Example 1. mysql_insert_id Example
?php mysql_connect( "localhost", "mysql_user", "mysql_password") or die("Could not connect: ". mysql_error()); mysql_select_db("mydb"); mysql_query("INSERT INTO mytable (product) values ('kossu')"); printf ("Last inserted record has id %d\n", mysql_insert_id());?
See also: mysql_query().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_list_dbs() will return a result pointer containing the databases available from the current mysql daemon.
Use the mysql_tablename() function to traverse this result pointer, or any function for result tables.
Example 1. mysql_list_dbs() example
The above example would produce the following output:
Note:
The above code would just as easily work with mysql_fetch_row() or other similar functions.
For downward compatibility mysql_listdbs() can also be used.
This is deprecated however.
See also mysql_db_name().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_list_fields() retrieves information about the given table name.
Arguments are the database name and the table name.
A result pointer is returned which can be used with mysql_field_flags(), mysql_field_len(), mysql_field_name(), and mysql_field_type().
Example 1. mysql_list_fields() example
The above example would produce the following output:
For downward compatibility mysql_listfields() can also be used.
This is deprecated however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_list_processes() returns a result pointer describing the current server threads.
Example 1. mysql_list_processes() example
The above example would produce the following output:
See also: mysql_thread_id()
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_list_tables() takes a database name and returns a result pointer much like the mysql_query() function.
You can use the mysql_tablename() function to extract the actual table names from the result pointer, or any other result table function such as mysql_fetch_assoc().
The database parameter is the name of the database to retrieve the list of tables from.
Upon failure, mysql_list_tables() returns FALSE.
For downward compatibility, the function alias named mysql_listtables() can be used.
This is deprecated however and is not recommended.
Example 1. mysql_list_tables Example
?php $dbname = 'mysql_dbname'; if (!mysql_connect('mysql_host', 'mysql_user', 'mysql_password')) {print'Could not connect to mysql'; exit;} $result = mysql_list_tables($dbname); if (!$result) {print "DB Error, could not list tables\n"; print'MySQL Error:'. mysql_error(); exit;} while ($row = mysql_fetch_row($result)) {print "Table: $row[0]\n";} mysql_free_result($result);?
See also: mysql_list_dbs(), and mysql_tablename().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_num_fields() returns the number of fields in a result set.
See also: mysql_select_db(), mysql_query(), mysql_fetch_field(), mysql_num_rows().
For downward compatibility mysql_numfields() can also be used.
This is deprecated however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
mysql_num_rows() returns the number of rows in a result set.
This command is only valid for SELECT statements.
To retrieve the number of rows affected by a INSERT, UPDATE or DELETE query, use mysql_affected_rows().
Example 1. mysql_num_rows() example
Note:
If you use mysql_unbuffered_query(), mysql_num_rows() will not return the correct value until all the rows in the result set have been retrieved.
See also: mysql_affected_rows(), mysql_connect(), mysql_data_seek(), mysql_select_db(), and mysql_query().
For downward compatibility mysql_numrows() can also be used.
This is deprecated however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a positive MySQL persistent link identifier on success, or FALSE on error.
mysql_pconnect() establishes a connection to a MySQL server.
The following defaults are assumed for missing optional parameters: server = 'localhost:3306', username = name of the user that owns the server process and password = empty password.
The client_flags parameter can be a combination of the constants MYSQL_CLIENT_SSL, MYSQL_CLIENT_COMPRESS, MYSQL_CLIENT_IGNORE_SPACE or MYSQL_CLIENT_INTERACTIVE.
The server parameter can also include a port number. eg. "hostname:port" or a path to a socket eg. ": / path / to / socket" for the localhost.
Note:
Support for ":port" was added in 3.0B4.
Support for the ": / path / to / socket" was added in 3.0.10.
mysql_pconnect() acts very much like mysql_connect() with two major differences.
First, when connecting, the function would first try to find a (persistent) link that's already open with the same host, username and password.
If one is found, an identifier for it will be returned instead of opening a new connection.
Second, the connection to the SQL server will not be closed when the execution of the script ends.
Instead, the link will remain open for future use (mysql_close() will not close links established by mysql_pconnect()).
The optional client_flags parameter became available in PHP 4.3.0.
This type of link is therefore called 'persistent'.
Note:
Note, that these kind of links only work if you are using a module version of PHP.
See the Persistent Database Connections section for more information.
Warning
Using persistent connections can require a bit of tuning of your Apache and MySQL configurations to ensure that you do not exceed the number of connections allowed by MySQL.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
mysql_ping() checks whether or not the connection to the server is working.
If it has gone down, an automatic reconnection is attempted.
This function can be used by scripts that remain idle for a long while, to check whether or not the server has closed the connection and reconnect if necessary. mysql_ping() returns TRUE if the connection to the server is working, otherwise FALSE.
See also: mysql_thread_id(), mysql_list_processes().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_query() sends a query to the currently active database on the server that's associated with the specified link identifier.
If link_identifier isn 't specified, the last opened link is assumed.
If no link is open, the function tries to establish a link as if mysql_connect() was called with no arguments, and use it.
The optional result_mode parameter can be MYSQL_USE_RESULT and MYSQL_STORE_RESULT.
It defaults to MYSQL_STORE_RESULT, so the result is buffered.
See also mysql_unbuffered_query() for the counterpart of this behaviour.
Note:
The query string should not end with a semicolon.
Only for SELECT,SHOW,EXPLAIN or DESCRIBE statements mysql_query() returns a resource identifier or FALSE if the query was not executed correctly.
For other type of SQL statements, mysql_query() returns TRUE on success and FALSE on error.
A non - FALSE return value means that the query was legal and could be executed by the server.
It does not indicate anything about the number of rows affected or returned.
It is perfectly possible for a query to succeed but affect no rows or return no rows.
The following query is syntactically invalid, so mysql_query() fails and returns FALSE:
Example 1. mysql_query()
php $result = mysql_query( "SELECT * WHERE 1=1") or die("Invalid query: ". mysql_error());?
The following query is semantically invalid if my_col is not a column in the table my_tbl, so mysql_query() fails and returns FALSE:
Example 2. mysql_query()
?php $result = mysql_query( "SELECT my_col FROM my_tbl") or die("Invalid query: ". mysql_error());?
mysql_query() will also fail and return FALSE if you don't have permission to access the table(s) referenced by the query.
Assuming the query succeeds, you can call mysql_num_rows() to find out how many rows were returned for a SELECT statment or mysql_affected_rows() to find out how many rows were affected by a DELETE, INSERT, REPLACE, or UPDATE statement.
Only for SELECT,SHOW,DESCRIBE or EXPLAIN statements, mysql_query() returns a new result identifier that you can pass to mysql_fetch_array() and other functions dealing with result tables.
When you are done with the result set, you can free the resources associated with it by calling mysql_free_result().
Although, the memory will automatically be freed at the end of the script 's execution.
See also: mysql_num_rows(), mysql_affected_rows(), mysql_unbuffered_query(), mysql_free_result(), mysql_fetch_array(), mysql_fetch_row(), mysql_fetch_assoc(), mysql_result(), mysql_select_db(), and mysql_connect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function will escape special characters in the unescaped_string, taking into account the current charset of the connection so that it is safe to place it in a mysql_query().
Example 1. mysql_real_escape_string() example
The above example would produce the following output:
See also: mysql_escape_string(), mysql_character_set_name().
Prev
Home
Next
Up
PHP Manual
Prev
Next
mysql_result() returns the contents of one cell from a MySQL result set.
The field argument can be the field' s offset, or the field's name, or the field's table dot field name (tablename.fieldname).
If the column name has been aliased ('select foo as bar from.. .'), use the alias instead of the column name.
When working on large result sets, you should consider using one of the functions that fetch an entire row (specified below).
As these functions return the contents of multiple cells in one function call, they' re MUCH quicker than mysql_result().
Also, note that specifying a numeric offset for the field argument is much quicker than specifying a fieldname or tablename.fieldname argument.
Calls to mysql_result() should not be mixed with calls to other functions that deal with the result set.
Recommended high-performance alternatives: mysql_fetch_row(), mysql_fetch_array(), and mysql_fetch_object().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
mysql_select_db() sets the current active database on the server that's associated with the specified link identifier.
If no link identifier is specified, the last opened link is assumed.
If no link is open, the function will try to establish a link as if mysql_connect() was called without arguments, and use it.
Every subsequent call to mysql_query() will be made on the active database.
See also: mysql_connect(), mysql_pconnect(), and mysql_query().
For downward compatibility mysql_selectdb() can also be used.
This is deprecated however.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
mysql_stat() returns the current server status.
For a complete list of other status variables you have to use the SHOW STATUS SQL command.
Example 1. mysql_stat() example
?php $link = mysql_connect( 'localhost', "mysql_user", "mysql_password"); $status = explode( '', mysql_stat($link)); print_r($status);?
The above example would produce the following output:
Prev
Home
Next
Up
PHP Manual
Prev
Next
The mysql_num_rows() function may be used to determine the number of tables in the result pointer.
Example 1. mysql_tablename() Example
See also: mysql_list_tables().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
mysql_thread_id() returns the current thread ID.
If the connection is lost and you reconnect with mysql_ping(), the thread ID will change.
This means you should not get the thread ID and store it for later.
You should get it when you need it.
Example 1. mysql_thread_id() example
The above example would produce the following output:
See also: mysql_ping(), mysql_list_processes().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
mysql_unbuffered_query() sends a SQL query query to MySQL, without fetching and buffering the result rows automatically, as mysql_query() does.
On the other hand, you can start working on the result set immediately after the first row has been retrieved: you don 't have to wait until the complete SQL query has been performed.
When using multiple DB-connects, you have to specify the optional parameter link_identifier.
The optional result_mode parameter can be MYSQL_USE_RESULT and MYSQL_STORE_RESULT.
It defaults to MYSQL_USE_RESULT, so the result is not buffered.
See also mysql_query() for the counterpart of this behaviour.
Note:
You cannot use mysql_num_rows() on a result set returned from mysql_unbuffered_query().
You also have to fetch all result rows from an unbuffered SQL query, before you can send a new SQL query to MySQL.
See also: mysql_query().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function implements a sort algorithm that orders alphanumeric strings in the way a human being would.
This is described as a "natural ordering".
natcasesort() is a case insensitive version of natsort().
See natsort() for an example of the difference between this algorithm and the regular computer string sorting algorithms.
For more information see:
See also sort(), natsort(), strnatcmp(), and strnatcasecmp().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function implements a sort algorithm that orders alphanumeric strings in the way a human being would.
This is described as a "natural ordering".
An example of the difference between this algorithm and the regular computer string sorting algorithms (used in sort()) can be seen below:
Example 1. natsort() example
?php $array1 = $array2 = array ("img12.png", "img10.png", "img2.png", "img1.png"); sort($array1); echo "Standard sorting\n"; print_r($array1); natsort($array2); echo "\nNatural order sorting\n"; print_r($array2);?
The code above will generate the following output:
Standard sorting Array ([0] = img1.png [1] = img10.png [2] = img12.png [3] = img2.png) Natural order sorting Array ([3] = img1.png [2] = img2.png [1] = img10.png [0] = img12.png)
Note:
If you' re wanting to maintain index / value associations, consider using usort($arr, 'strnatcmp').
See also natcasesort(), strnatcmp(), and strnatcasecmp().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. ncurses_getmouse() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. ncurses_mousemask() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the array element in the next place that 's pointed by the internal array pointer, or FALSE if there are no more elements.
next() behaves like current(), with one difference.
It advances the internal array pointer one place forward before returning the element.
That means it returns the next array element and advances the internal array pointer by one.
If advancing the internal array pointer results in going beyond the end of the element list, next() returns FALSE.
Warning
If the array contains empty elements, or elements that have a key value of 0 then this function will return FALSE for these elements as well.
To properly traverse an array which may contain empty elements or elements with key values of 0 see the each() function.
See also current(), end(), prev(), and reset().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns string with 'br /' inserted before all newlines.
Note:
Starting with PHP 4.0.5, nl2br() is now XHTML compliant.
All versions before 4.0.5 will return string with 'br' inserted before newlines instead of 'br /'.
See also htmlspecialchars(), htmlentities(), wordwrap(), and str_replace().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
number_format() returns a formatted version of number.
This function accepts either one, two or four parameters (not three):
If only one parameter is given, number will be formatted without decimals, but with a comma (",") between every group of thousands.
If two parameters are given, number will be formatted with decimals decimals with a dot (".") in front, and a comma (" ,") between every group of thousands.
If all four parameters are given, number will be formatted with decimals decimals, dec_point instead of a dot (".") before the decimals and thousands_sep instead of a comma (" ,") between every group of thousands.
Note:
Only the first character of thousands_sep is used.
For example, if you use foo as thousands_sep on the number 1000, number_format() will return 1f000.
Example 1. number_format() Example
For instance, French notation usually use two decimals, comma (',') as decimal separator, and space (' ') as thousand separator.
This is achieved with this line:
?php $number = 1234.56; / / english notation (default) $english_format_number = number_format($number); / / 1,234 / / French notation $nombre_format_francais = number_format($number, 2, ',',' '); / / 1 234,56 $number = 1234.5678; / / english notation without thousands seperator $english_format_number = number_format($number, 2, '.', ''); / / 1234.57?
See also: sprintf(), printf() and sscanf().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. ob_gzhandler() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. ob_iconv_handler() example:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
This function will turn output buffering on.
Note:
Example 1.
Prev
Home
Next
Up
Object property and method call overloading
PHP Manual
Prev
Next
Example 1.
Warning
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
OCIDefineByName() binds PHP variables for fetches of SQL-Columns.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.7, PHP 4)
OCIError() returns the last error found.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.4, PHP 4)
OCIInternalDebug() enables internal debug output.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.4, PHP 4)
OCILogOff() closes an Oracle connection.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.4, PHP 4)
OCIParse() parses the query using conn.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
OCIServerVersion
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the decimal equivalent of the octal number represented by the octal_string argument.
The largest number that can be converted is 17777777777 or 2147483647 in decimal.
See also decoct().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
(ODBC SQL types affected:
Table 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Lists all columns in the requested range.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns:
TRUE on success, FALSE on failure.
All pending transactions on connection_id are committed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Returns an ODBC connection id or 0 (FALSE) on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Returns FALSE on error, and an array upon success.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Returns FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Executes a statement prepared with odbc_prepare() .Returns TRUE on success or FALSE on failure.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. odbc_fetch_into() pre 4.0.6 example
Example 2. odbc_fetch_into() 4.0.6 example
Example 3. odbc_fetch_into() 4.2.0 example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Always returns TRUE.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
(ODBC SQL types affected:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Returns an ODBC connection id or 0 (FALSE) on error.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Returns FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Lists all procedures in the requested range.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Returns the number of rows in the result or FALSE on error.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Returns the contents of the field.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.17, PHP 4)
Lists all tables in the requested range.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a directory handle to be used in subsequent closedir(), readdir(), and rewinddir() calls.
You can suppress the error output of opendir() by prepending `@ 'to the front of the function name.
Example 1. opendir() example
See also is_dir().
Home
Next
getcwd
readdir
PHP Manual
Prev
Next
Table 1. openlog() Options
Table 2. openlog() Facilities
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Table 1.
Returns TRUE on success or FALSE on failure.
Example 1. openssl_csr_new() example - creating a self-signed-certificate
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. openssl_csr_sign() example - signing a CSR (how to implement your own CA)
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. openssl_error_string() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Returns TRUE on success or FALSE on failure.
If successful the opened data is returned in open_data.
Example 1. openssl_open() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. openssl_pkcs7_decrypt() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. openssl_pkcs7_encrypt() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. openssl_pkcs7_sign() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. openssl_seal() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns TRUE on success or FALSE on failure.
Example 1. openssl_sign() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. openssl_verify() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1. openssl_x509_checkpurpose() purposes
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE if the bind succeeds, otherwise FALSE.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE if the close succeeds, otherwise FALSE.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Fetches a row of data into an array.
Example 1. ora_fetch_into()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the column data.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
Details about the error can be retrieved using the ora_error() and ora_errorcode() functions.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Opens an Oracle cursor associated with connection.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the ASCII value of the first character of string.
This function complements chr().
Example 1. ord() example
if (ord($str) == 10) {echo "The first character of \$str is a line feed.\n";}
You can find an ASCII-table over here: http: / /www.asciitable.com.
See also chr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The overload() function will enable property and method call overloading for a class identified by class_name.
See an example in the introductory section of this part.
Prev
Home
Next
Object property and method call overloading
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. ovrimos_connect() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.3)
ovrimos_exec() is used to execute an SQL statement.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.3)
ovrimos_execute() is used to execute an SQL statement.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.3)
ovrimos_fetch_row() is used to fetch a row from the result set.
A fetch row example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.3)
ovrimos_free_result() is used to free the result_id.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.3)
ovrimos_num_fields() is used to get the number of columns.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.3)
ovrimos_prepare() is used to prepare an SQL statement.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2.
Example 3. ovrimos_result_all example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.3)
ovrimos_result() is used to retrieve the output column.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pack() format string
Prev
Home
Next
Up
PHP Manual
Prev
Next
parse_ini_file() loads in the ini file specified in filename, and returns the settings in it in an associative array.
By setting the last process_sections parameter to TRUE, you get a multidimensional array, with the section names and settings included.
The default for process_sections is FALSE
Note:
This function has nothing to do with the php.ini file.
It is already processed, the time you run your script.
This function can be used to read in your own application 's configuration files.
Note:
If a value in the ini file contains any non-alphanumeric characters it needs to be enclosed in double-quotes (").
Note:
Since PHP 4.2.1 this function is also affected by safe_mode and open_basedir.
The structure of the ini file is similar to that of the php.ini 's.
Constants may also be parsed in the ini file so if you define a constant as an ini value before running parse_ini_file(), it will be integrated into the results.
Only ini values are evaluated.
Example 1.
; This is a sample configuration file; Comments start with ';', as in php.ini [first_section] one = 1 five = 5 animal = BIRD [second_section] path = / usr / local / bin URL = "http: / /www.example.com / ~username "
Example 2. parse_ini_file() example
?php define ('BIRD', 'Dodo bird'); / / Parse without sections $ini_array = parse_ini_file("sample.ini"); print_r($ini_array); / / Parse with sections $ini_array = parse_ini_file("sample.ini", TRUE); print_r($ini_array);?
Would produce:
Array ([one] = 1 [five] = 5 [animal] = Dodo bird [path] = / usr / local / bin [URL] = http: / /www.example.com / ~username) Array ([first_section] = Array ([one] = 1 [five] = 5 [animal] = Dodo bird) [second_section] = Array ([path] = / usr / local / bin [URL] = http: / /www.example.com / ~username))
Prev
Home
Next
Up
PHP Manual
Prev
Next
Parses str as if it were the query string passed via an URL and sets variables in the current scope.
If the second parameter arr is present, variables are stored in this variable as an array elements instead.
Note:
Support for the optional second parameter was added in PHP 4.0.3.
Note:
Also, you may want to read the section on variables from outside of PHP.
Example 1.
Using parse_str()
See also parse_url(), pathinfo(), set_magic_quotes_runtime(), and urldecode().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns an associative array returning any of the various components of the URL that are present.
query - after the question mark?
This function is not meant to validate the given URL, it only breaks it up into the above listed parts.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
pathinfo() returns an associative array containing information about path.
The following array elements are returned: dirname, basename and extension.
Example 1. pathinfo() Example
?php $path_parts = pathinfo( "/ www / htdocs / index.html"); echo $path_parts["dirname"]. "\n"; echo $path_parts["basename"]. "\n"; echo $path_parts["extension"]. "\n";?
Would produce:
Note:
For information on retrieving the current path info, read the section on predefined reserved variables.
See also dirname(), basename(), parse_url() and realpath().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Closes a file pointer to a pipe opened by popen().
The file pointer must be valid, and must have been returned by a successful call to popen().
Returns the termination status of the process that was run.
See also popen().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pcntl_fork() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns TRUE on success or FALSE on failure.
Note:
Note:
Example 1. pcntl_signal() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1. possible values for pid
Table 2. possible values for options
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Returns the return code of a terminated child.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
pdf_add_outline() is replaced by pdf_add_note()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
See pdf_add_bookmark().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Add a new page to the document.
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Print text at the next line.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Prepare a font for later use with pdf_setfont().
Example 1. pdf_findfont() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Get the contents of the PDF output buffer.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Set the current point.
The current point for graphics and the current text output position are maintained separately.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Create a new PDF file using the supplied file name.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pdf_open() is deprecated, use pdf_new() plus pdf_open_file() instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 CVS only, PHP 4)
Open an image file.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Use image data from a variety of data sources.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Set the current color space and color.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
See pdf_set_value().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
You should use pdf_findfont() plus pdf_setfont() instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
See also pdf_set_value(),
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
See pdf_set_paramter().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
See pdf_set_value(),
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Deprecated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
pfpro_init() is used to initialise the Payflow Pro library.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
Note:
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
Note:
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_affected_rows() returns the number of tuples (instances / records / rows) affected by INSERT, UPDATE, and DELETE queries executed by pg_query().
If no tuple is affected by this function, it will return 0.
Example 1. pg_affected_rows()
?php $result = pg_query ($conn, "INSERT INTO publisher VALUES ('Author')"); $cmdtuples = pg_affected_rows ($result); echo $cmdtuples. "tuples are affected .";?
Note:
This function used to be called pg_cmdtuples().
See also pg_query() and pg_num_rows().
Prev
Home
Next
PostgreSQL functions
Up
PHP Manual
Prev
Next
pg_cancel_query() cancel asynchronous query sent by pg_send_query().
You cannot cancel query executed by pg_query().
See also pg_send_query() and pg_connection_busy()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 CVS only, PHP 4 = 4.0.3)
pg_client_encoding() returns the client encoding as the string.
The returned string should be either:
SQL_ASCII, EUC_JP, EUC_CN, EUC_KR, EUC_TW, UNICODE, MULE_INTERNAL, LATINX (X=1...9), KOI8, WIN, ALT, SJIS, BIG5, WIN1250.
Note:
If libpq is compiled without multibyte encoding support, pg_set_client_encoding() always return "SQL_ASCII ".
Supported encoding depends on PostgreSQL version.
Refer to PostgreSQL manual for details to enable multibyte support and encoding supported.
The function used to be called pg_clientencoding().
See also pg_set_client_encoding().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_close() closes the non-persistent connection to a PostgreSQL database associated with the given connection pg_close() closes the non-persistent connection to a PostgreSQL database associated with the given connection resource.
Returns TRUE on success or FALSE on failure.
Note:
Using pg_close() is not usually necessary, as non-persistent open connections are automatically closed at the end of the script.
If there is open large object resource on the connection, do not close the connection before closing all large object resources.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_connect() returns a connection resource that is needed by other PostgreSQL functions.
pg_connect() opens a connection to a PostgreSQL database specified by the connection_string.
It returns a connection resource on success.
It returns FALSE if the connection could not be made. connection_string should be a quoted string.
Example 1.
Using pg_connect
?php $dbconn = pg_connect ("dbname=mary"); / /connect to a database named "mary "$dbconn2 = pg_connect ("host=localhost port=5432 dbname=mary"); / / connect to a database named "mary" on "localhost "at port "5432" $dbconn3 = pg_connect ("host=sheep port=5432 dbname=mary user=lamb password=foo"); / /connect to a database named "mary "on the host "sheep" with a username and password $conn_string = "host=sheep port=5432 dbname=test user=lamb password=bar"; $dbconn4 = pg_connect ($conn_string); / /connect to a database named "test "on the host "sheep" with a username and password?
If a second call is made to pg_connect() with the same connection_string, no new connection will be established, but instead, the connection resource of the already opened connection will be returned.
You can have multiple connections to the same database if you use different connection string.
The old syntax with multiple parameters $conn = pg_connect ("host", "port", "options", "tty", "dbname") has been deprecated.
See also pg_pconnect(), pg_close(), pg_host(), pg_port(), pg_tty(), pg_options() and pg_dbname().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_connection_busy() returns TRUE if the connection is busy.
If it is busy, a previous query is still executing.
If pg_get_result() is called, it will be blocked.
See also pg_connection_status() and pg_get_result()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
pg_connection_reset() resets the connection.
It is useful for error recovery.
Returns TRUE on success or FALSE on failure.
See also pg_connect(), pg_pconnect() and pg_connection_status()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
pg_connection_status() returns a connection status.
Possible statuses are PGSQL_CONNECTION_OK and PGSQL_CONNECTION_BAD.
See also pg_connection_busy().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_convert() check and convert assoc_array suitable for SQL statement.
Note:
This function is experimental.
See also pg_metadata()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
pg_copy_from() insert records into a table from rows.
It issues COPY FROM SQL command internally to insert records.
Returns TRUE on success or FALSE on failure.
See also pg_copy_to()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
pg_copy_to() copies a table to an array.
It issues COPY TO SQL command internally to insert records.
The resulting array is returned.
It returns FALSE on failure.
See also pg_copy_from()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_dbname() returns the name of the database that the given PostgreSQL connection resource.
It returns FALSE, if connection is not a valid PostgreSQL connection resource.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_delete() deletes record condition specified by assoc_array which has field= value.
If option is specified, pg_convert() is applied to assoc_array with specified option.
Example 1. pg_delete
?php $db = pg_connect ('dbname=foo'); / / This is safe, since $_POST is converted automatically $res = pg_delete($db, 'post_log', $_POST); if ($res) {echo "POST data is deleted: $res\n";} else {echo "User must have sent wrong inputs\n";}?
Note:
This function is experimental.
See also pg_convert()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_end_copy() syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by pg_put_line(). pg_end_copy() pg_end_copy() syncs the PostgreSQL frontend (usually a web server process) with the PostgreSQL server after doing a copy operation performed by pg_put_line(). pg_end_copy() must be issued, otherwise the PostgreSQL server may get out of sync with the frontend and will report an error.
Returns TRUE on success or FALSE on failure.
For further details and an example, see also pg_put_line().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_escape_bytea() escapes string for bytea datatype.
It returns escaped string.
Note:
When you SELECT bytea type, PostgreSQL returns octal byte value prefixed by\ (e.g. \032).
Users are supposed to convert back to binary format by yourself.
This function requires PostgreSQL 7.2 or later.
With PostgreSQL 7.2.0 and 7.2.1, bytea type must be casted when you enable multi-byte support. i.e.
INSERT INTO test_table (image) VALUES ('$image_escaped'::bytea); PostgreSQL 7.2.2 or later does not need cast.
Exception is when client and backend character encoding does not match, there may be multi-byte stream error.
User must cast to bytea to avoid this error.
Newer PostgreSQL will support unescape function.
Support for built-in unescape function will be added when it 's available.
See also pg_escape_string()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_escape_string() escapes string for text / char datatype.
It returns escaped string for PostgreSQL.
Use of this function is recommended instead of addslashes().
Note:
This function requires PostgreSQL 7.2 or later.
See also pg_escape_bytea()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_fetch_all() returns an array that contains all row (tuples / records) in result resource.
It returns FALSE, if there are no more rows.
See also pg_fetch_row(), pg_fetch_array(), pg_fetch_object() and pg_fetch_result().
Example 1.
PostgreSQL fetch array
?php $conn = pg_pconnect ("dbname=publisher"); if (!$conn) {echo "An error occured.\n"; exit;} $result = pg_query ($conn, "SELECT * FROM authors"); if (!$result) {echo "An error occured.\n"; exit;} $arr = pg_fetch_all ($result, 0, PGSQL_NUM); var_dump($arr);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_fetch_array() returns an array that corresponds to the fetched row (tuples / records).
It returns FALSE, if there are no more rows.
pg_fetch_array() is an extended version of pg_fetch_row().
In addition to storing the data in the numeric indices (field index) to the result array, it also stores the data in associative indices (field name) by default.
row is row (record) number to be retrieved.
First row is 0.
result_type is optional parameter controls how return value is initialized. result_type is a constant and can take the following values:
PGSQL_ASSOC, PGSQL_NUM, and PGSQL_BOTH. pg_fetch_array() PGSQL_ASSOC, PGSQL_NUM, and PGSQL_BOTH. pg_fetch_array() returns associative array that has field name as key for PGSQL_ASSOC. field index as key with PGSQL_NUM and both field name / index as key with PGSQL_BOTH.
Default is PGSQL_BOTH.
pg_fetch_array() is NOT significantly slower than using pg_fetch_row(), while it provides a significant ease of use.
See also pg_fetch_row() and pg_fetch_object() and pg_fetch_result().
Example 1.
PostgreSQL fetch array
?php $conn = pg_pconnect ("dbname=publisher"); if (!$conn) {echo "An error occured.\n"; exit;} $result = pg_query ($conn, "SELECT * FROM authors"); if (!$result) {echo "An error occured.\n"; exit;} $arr = pg_fetch_array ($result, 0, PGSQL_NUM); echo $arr[0]. "- array\n"; $arr = pg_fetch_array ($result, 1, PGSQL_ASSOC); echo $arr["author"]." - array\n";?
Note:
From 4.1.0, row became optional.
Calling pg_fetch_array() will increment internal row counter by 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_fetch_assoc() returns an associative array that corresponds to the fetched row (tuples / records).
It returns FALSE, if there are no more rows.
pg_fetch_assoc() is an extended version of pg_fetch_row().
In addition to storing the data in the numeric indices (field index) to the result array, it also stores the data in associative indices (field name) by default.
row is row (record) number to be retrieved.
First row is 0.
pg_fetch_assoc() is NOT significantly slower than using pg_fetch_row(), while it provides a significant ease of use.
See also pg_fetch_row(), pg_fetch_array(), pg_fetch_assoc(), pg_fetch_object() and pg_fetch_result().
Example 1.
PostgreSQL fetch array
?php $conn = pg_pconnect ("dbname=publisher"); if (!$conn) {echo "An error occured.\n"; exit;} $result = pg_query ($conn, "SELECT * FROM authors"); if (!$result) {echo "An error occured.\n"; exit;} $arr = pg_fetch_assoc ($result, 1, PGSQL_ASSOC); echo $arr["author"]. "- array\n";?
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_fetch_object() returns an object with properties that correspond to the fetched row.
It returns FALSE if there are no more rows or error.
pg_fetch_object() is similar to pg_fetch_array(), with one difference - an object is returned, instead of an array.
Indirectly, that means that you can only access the data by the field names, and not by their offsets (numbers are illegal property names).
row is row (record) number to be retrieved.
First row is 0.
Speed-wise, the function is identical to pg_fetch_array(), and almost as quick as pg_fetch_row() (the difference is insignificant).
Note:
From 4.1.0, row is optional.
From 4.3.0, result_type is default to PGSQL_ASSOC while older versions' default was PGSQL_BOTH.
There is no use for numeric property, since numeric property name is invalid in PHP.
result_type may be deleted in future versions.
See also pg_query(), pg_fetch_array(), pg_fetch_row() and pg_fetch_result().
Example 1.
H1 Failed connecting to postgres database ?php echo $database? / H1 ?php exit; endif; $qu = pg_query ($db_conn, "SELECT * FROM verlag ORDER BY autor"); $row = 0; / / postgres needs a row counter other dbs might not while ($data = pg_fetch_object ($qu, $row)) {echo $data - autor. "("; echo $data - jahr ."):"; echo $data - titel. "BR"; $row++;}?
PRE ?php $fields[] = Array ("autor", "Author"); $fields[] = Array ("jahr", "Year"); $fields[] = Array ("titel"," Title"); $row= 0; / / postgres needs a row counter other dbs might not while ($data = pg_fetch_object ($qu, $row)) {echo "----------\n"; reset ($fields); while (list (,$item) = each ($fields)): echo $item[1] .": ".$data - $item[0] ."\n"; endwhile; $row++;} echo "----------\n";? / PRE ?php pg_free_result ($qu); pg_close ($db_conn);?
Note:
From 4.1.0, row became optional.
Calling pg_fetch_object() will increment internal row counter counter by 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The row and field specify what cell in the table of results to return.
Row numbering starts from 0.
Instead of naming the field, you may use the field index as an unquoted number.
Field indices start from 0.
PostgreSQL has many built in types and only the basic ones are directly supported here.
All forms of integer types are returned as integer values.
All forms of float, and real types are returned as float All forms of float, and real types are returned as float values.
Boolean is returned as "t" or "f ".
All other types, including arrays are returned as strings formatted in the same default PostgreSQL manner that you would see in the psql program.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_fetch_row() fetches one row of data from the result associated with the specified result resource.
The row (record) is returned as an array.
Each result column is stored in an array offset, starting at offset 0.
It returns an array that corresponds to the fetched row, or FALSE if there are no more rows.
See also: pg_query(), pg_fetch_array(), pg_fetch_object() and pg_fetch_result().
Example 1.
Postgres fetch row
?php $conn = pg_pconnect ("dbname=publisher"); if (!$conn) {echo "An error occured.\n"; exit;} $result = pg_query ($conn, "SELECT * FROM authors"); if (!$result) {echo "An error occured.\n"; exit;} while ($row = pg_fetch_row($result, $i)) {for ($j=0; $j count($row); $j++) {echo "$row[$j] nbsp ;";} echo "BR";}?
Note:
From 4.1.0, row became optional.
Calling pg_fetch_row() will increment internal row counter by 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
pg_field_is_null() test if a field is NULL or not.
It returns 1 if the field in the given row is NULL.
It returns 0 if the field in the given row is NOT NULL.
Field can be specified as column index (number) or fieldname (string).
Row numbering starts at 0.
Note:
This function used to be called pg_fieldisnull().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_field_name() returns the name of the field occupying the given field_number in the given PostgreSQL result resource.
Field numbering starts from 0.
Note:
This function used to be called pg_fieldname().
See also pg_field_num().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_field_num() will return the number of the column (field) slot that corresponds to the field_name in the given PostgreSQL result resource.
Field numbering starts at 0.
This function will return -1 on error.
Note:
This function used to be called pg_fieldnum().
See also pg_field_name().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_field_prtlen() returns the actual printed length (number of characters) of a specific value in a PostgreSQL result.
Row numbering starts at 0.
This function will return -1 on an error.
Note:
This function used to be called pg_field_prtlen().
See also pg_field_size().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_field_size() returns the internal storage size (in bytes) of the field number in the given PostgreSQL result.
Field numbering starts at 0.
A field size of -1 indicates a variable length field.
This function will return FALSE on error.
Note:
This function used to be called pg_fieldsize().
See also pg_field_prtlen() and pg_field_type().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_field_type() returns a string containing the type name of the given field_number in the given PostgreSQL result resource.
Field numbering starts at 0.
Note:
This function used to be called pg_fieldtype().
See also pg_field_len() and pg_field_name().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_free_result() only needs to be called if you are worried about using too much memory while your script is running.
All result memory will automatically be freed when the script is finished.
But, if you are sure you are not going to need the result data anymore in a script, you may call pg_free_result() with the result resource as an argument and the associated result memory will be freed.
Returns TRUE on success or FALSE on failure.
Note:
This function used to be called pg_freeresult().
See also pg_query().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_get_result() get result resource from async query executed by pg_send_query(). pg_send_query() can send multiple queries to PostgreSQL server and pg_get_result() pg_get_result() get result resource from async query executed by pg_send_query(). pg_send_query() can send multiple queries to PostgreSQL server and pg_get_result() is used to get query result one by one.
It returns result resource.
If there is no more results, it returns FALSE.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_host() returns the host name of the given PostgreSQL connection resource is connected to.
See also pg_connect() and pg_pconnect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_insert() inserts assoc_array which has field= value into table specified as table_name.
If options is specified, pg_convert() is applied to assoc_array with specified option.
Example 1. pg_insert
?php $db = pg_connect ('dbname=foo'); / / This is safe, since $_POST is converted automatically $res = pg_insert($db, 'post_log', $_POST); if ($res) {echo "POST data is succesfully logged\n";} else {echo "User must have sent wrong inputs\n";}?
Note:
This function is experimental.
See also pg_convert()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_last_error() returns the last error message for given connection.
Error messages may be overwritten by internal PostgreSQL( libpq) function calls.
It may not return appropriate error message, if multiple errors are occured inside a PostgreSQL module function.
Use pg_result_error(), pg_result_status() and pg_connection_status() for better error handling.
Note:
This function used to be called pg_errormessage().
See also pg_result_error().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_last_notice() returns the last notice message from the PostgreSQL server specified by connection.
The PostgreSQL server sends notice messages in several cases, e.g. if the transactions can 't be continued.
With pg_last_notice(), you can avoid issuing useless queries, by checking whether the notice is related to the transaction or not.
Warning
This function is EXPERIMENTAL and it is not fully implemented yet. pg_last_notice() was added in PHP 4.0.6.
However, PHP 4.0.6 has problem with notice message handling.
Use of the PostgreSQL module with PHP 4.0.6 is not recommended even if you are not using pg_last_notice().
This function is fully implemented in PHP 4.3.0.
PHP earlier than PHP 4.3.0 ignores database connection parameter.
Notice message tracking can be set to optional by setting 1 for pgsql.ignore_notice ini from PHP 4.3.0.
Notice message logging can be set to optional by setting 0 for pgsql.log_notice ini from PHP 4.3.0.
Unless pgsql.ignore_notice is set to 0, notice message cannot be logged.
See also pg_query() and pg_last_error().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_last_oid() is used to retrieve the oid assigned to an inserted tuple (record) if the result resource is used from the last command sent via pg_query() and was an SQL INSERT.
Returns a positive integer if there was a valid oid.
It returns FALSE if an error occurs or the last command sent via pg_query() was not an INSERT or INSERT is failed.
OID field became an optional field from PostgreSQL 7.2.
When OID field is not defined in a table, programmer must use pg_result_status() to check if record is is inserted successfully or not.
Note:
This function used to be called pg_getlastoid().
See also pg_query() and pg_result_status()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_close() closes a Large Object. large_object is a resource for the large object from pg_lo_open().
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_loclose().
See also pg_lo_open(), pg_lo_create() and pg_lo_import().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_create() creates a Large Object and returns the oid of the large object. connection specifies a valid database connection opened by pg_connect() or pg_pconnect().
PostgreSQL access modes INV_READ, INV_WRITE, and INV_ARCHIVE are not supported, the object is created always with both read and write access.
INV_ARCHIVE has been removed from PostgreSQL itself (version 6.3 and above).
It returns large object oid, otherwise it returns FALSE if an error occurred.
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_locreate().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The oid argument specifies oid of the large object to export and the pathname argument specifies the pathname of the file.
It returns FALSE if an error occurred, TRUE otherwise.
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_loexport().
See also pg_lo_import().
Prev
Home
Next
Up
PHP Manual
Prev
Next
In versions before PHP 4.2.0 the syntax of this function was different, see the following definition:
The pathname argument specifies the pathname of the file to be imported as a large object.
It returns FALSE if an error occurred, oid of the just created large object otherwise.
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
When safe mode is enabled, PHP checks whether the files or directories you are about to operate on have the same UID (owner) as the script that is being executed.
Note:
This function used to be called pg_loimport().
See also pg_lo_export() and pg_lo_open().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_open() opens a Large Object and returns large object resource.
The resource encapsulates information about the connection. oid specifies a valid large object oid and mode can be either "r", "w", or "rw".
It returns FALSE if there is an error.
Warning
Do not close the database connection before closing the large object resource.
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_loopen().
See also pg_lo_close() and pg_lo_create().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_read_all() reads a large object and passes it straight through to the browser after sending all pending headers.
Mainly intended for sending binary data like images or sound.
It returns FALSE, if an error occurred.
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_loreadall().
See also pg_lo_read().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_read() reads at most len bytes from a large object and returns it as a string. large_object specifies a valid large object resource and len specifies the maximum allowable size of the large object segment.
It returns FALSE if there is an error.
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_loread().
See also pg_lo_read_all().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_seek() seeks position of large object resource. whence is PGSQL_SEEK_SET, PGSQL_SEEK_CUR or PGSQL_SEEK_END.
See also pg_lo_tell().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_tell() returns current position (offset from the beginning of large object).
See also pg_lo_seek().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
pg_lo_unlink() deletes a large object with the oid.
Returns TRUE on success or FALSE on failure.
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_lo_unlink().
See also pg_lo_create() and pg_lo_import().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_lo_write() writes at most to a large object from a variable data and returns the number of bytes actually written, or FALSE in the case of an error. large_object is a large object resource from pg_lo_open().
To use the large object (lo) interface, it is necessary to enclose it within a transaction block.
Note:
This function used to be called pg_lo_write().
See also pg_lo_create() and pg_lo_open().
Prev
Home
Next
Up
pg_meta_data
PHP Manual
Prev
Next
pg_num_fields() returns the number of fields (columns) in a PostgreSQL result.
The argument is a result resource returned by pg_query().
This function will return -1 on error.
Note:
This function used to be called pg_numfields().
See also pg_num_rows() and pg_affected_rows().
Prev
Home
Next
pg_meta_data
Up
PHP Manual
Prev
Next
pg_num_rows() will return the number of rows in a PostgreSQL result resource. result is a query result resource returned by pg_query().
This function will return -1 on error.
Note:
Use pg_affected_rows() to get number of rows affected by INSERT, UPDATE and DELETE query.
Note:
This function used to be called pg_numrows().
See also pg_num_fields() and pg_affected_rows().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_options() will return a string containing the options specified on the given PostgreSQL connection resource.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
pg_pconnect() opens a connection to a PostgreSQL database.
It returns a connection resource that is needed by other PostgreSQL functions.
For a description of the connection_string parameter, see pg_connect().
To enable persistent connection, the pgsql.allow_persistent php.ini To enable persistent connection, the pgsql.allow_persistent php.ini directive must be set to "On" (which is the default).
The maximum number of persistent connection can be defined with the pgsql.max_persistent php.ini The maximum number of persistent connection can be defined with the pgsql.max_persistent php.ini directive (defaults to -1 for no limit).
The total number of connections can be set with the pgsql.max_links php.ini directive.
pg_close() will not close persistent links generated by pg_pconnect().
See also pg_connect(), and the section Persistent Database Connections for more information.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_ping() ping database connection, try to reconnect if it is broken.
It returns TRUE if connection is alive, otherwise FALSE.
See also pg_connection_status() and pg_connection_reset().
Example 1.
PostgreSQL fetch array
?php $conn = pg_pconnect ("dbname=publisher"); if (!$conn) {echo "An error occured.\n"; exit;} if (!pg_ping($conn)) die("Connection is broken\n");?
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_port() returns the port number that the given PostgreSQL connection resource is connected to.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_put_line() sends a NULL-terminated string to the PostgreSQL backend server.
This is useful for example for very high-speed inserting of data into a table, initiated by starting a PostgreSQL copy-operation.
That final NULL-character is added automatically.
Returns TRUE on success or FALSE on failure.
Note:
The application must explicitly send the two characters "\." on the last line to indicate to the backend that it has finished sending its data.
See also pg_end_copy().
Example 1.
High-speed insertion of data into a table
?php $conn = pg_pconnect ("dbname=foo"); pg_query($conn, "create table bar (a int4, b char(16), d float8)"); pg_query($conn, "copy bar from stdin"); pg_put_line($conn, "3\thello world\t4.5\n"); pg_put_line($conn, "4\tgoodbye world\t7.11\n"); pg_put_line($conn, "\\.\n"); pg_end_copy($conn);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
pg_query() returns a query result resource if query could be executed.
It returns FALSE on failure or if connection is not a valid connection.
The connection must be a valid connection that was returned by pg_connect() or pg_pconnect().
The return value of this function is an query result resource to be used to access the results from other PostgreSQL functions such as pg_fetch_array().
If connection is not set, default connection is used.
Default connection is the last connection made by pg_connect() or pg_pconnect().
Although connection can be omitted, it is not recommended, since it could be a cause of hard to find bug in script.
Note:
This function used to be called pg_exec(). pg_exec() is still available for compatibility reasons but users are encouraged to use the newer name.
See also pg_connect(), pg_pconnect(), pg_fetch_array(), pg_fetch_object(), pg_num_rows(), and pg_affected_rows().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_result_error() returns error message associated with result resource.
Therefore, user has better chance to get better error message than pg_last_error().
See also pg_query(), pg_send_query(), pg_get_result(), pg_last_error() and pg_last_notice()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
pg_result_seek() set internal row offset in reuslt resource.
It returns FALSE, if there is error.
See also pg_fetch_row(), pg_fetch_assoc(), pg_fetch_array(), pg_fetch_object() and pg_fetch_result().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_result_status() returns status of result resource.
Possible retun values are PGSQL_EMPTY_QUERY, PGSQL_COMMAND_OK, PGSQL_TUPLES_OK, PGSQL_COPY_TO, PGSQL_COPY_FROM, PGSQL_BAD_RESPONSE, PGSQL_NONFATAL_ERROR and PGSQL_FATAL_ERROR.
See also pg_connection_status().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_select() selects records specified by assoc_array which has field= value.
For successful query, it returns array contains all records and fields that match the condition specified by assoc_array.
If options is specified, pg_convert() is applied to assoc_array with specified option.
Example 1. pg_select
?php $db = pg_connect ('dbname=foo'); / / This is safe, since $_POST is converted automatically $rec = pg_select($db, 'post_log', $_POST); if ($rec) {echo "Records selected\n"; var_dump($rec);} else {echo "User must have sent wrong inputs\n";}?
Note:
This function is experimental.
See also pg_convert()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_send_query() send asynchronous query to the connection.
Unlike pg_query(), it can send multiple query to PostgreSQL and get the result one by one using pg_get_result().
Script execution is not blocked while query is executing.
Use pg_connection_busy() to check connection is busy (i.e. query is executing).
Query may be canceled by calling pg_cancel_query().
Although user can send multiple query at once, user cannot send multiple query over busy connection.
If query is sent while connection is busy, it waits until last query is finished and discards all result.
See also pg_query(), pg_cancel_query(), pg_get_result() and pg_connection_busy()
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_set_client_encoding() sets the client encoding and returns 0 if success or -1 if error.
encoding is the client encoding and can be either:
Available encoding depends on your PostgreSQL and libpq version.
Refer to PostgreSQL manual for supported encodings for your PostgreSQL.
Note:
This function requires PHP-4.0.3 or higher and PostgreSQL-7.0 or higher.
Supported encoding depends on PostgreSQL version.
Refer to PostgreSQL manual for details.
The function used to be called pg_setclientencoding().
See also pg_client_encoding().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_trace() enables tracing of the PostgreSQL frontend / backend communication to a debugging file specified as pathname.
To fully understand the results, one needs to be familiar with the internals of PostgreSQL communication protocol.
For those who are not, it can still be useful for tracing errors in queries sent to the server, you could do for example grep '^To backend' trace.log and see what query actually were sent to the PostgreSQL server.
For more information, refer to PostgreSQL manual.
pathname and mode are the same as in fopen() (mode defaults to'w'), connection specifies the connection to trace and defaults to the last one opened.
It returns TRUE if pathname could be opened for logging, FALSE otherwise.
See also fopen() and pg_untrace().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_tty() returns the tty name that server side debugging output is sent to on the given PostgreSQL connection resource.
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_unescape_bytea() unescapes string from bytea datatype.
It returns unescaped string (binary).
Note:
When you SELECT bytea type, PostgreSQL returns octal byte value prefixed by\ (e.g. \032).
Users are supposed to convert back to binary format by yourself.
This function requires PostgreSQL 7.2 or later.
With PostgreSQL 7.2.0 and 7.2.1, bytea type must be casted when you enable multi-byte support. i.e.
INSERT INTO test_table (image) VALUES ('$image_escaped'::bytea); PostgreSQL 7.2.2 or later does not need cast.
Exception is when client and backend character encoding does not match, there may be multi-byte stream error.
User must cast to bytea to avoid this error.
See also pg_escape_bytea() and pg_escape_string()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Stop tracing started by pg_trace(). connection specifies the connection that was traced and defaults to the last one opened.
Returns always TRUE.
See also pg_trace().
Prev
Home
Next
Up
PHP Manual
Prev
Next
pg_update() updates records that matches condition with data.
If options is specified, pg_convert() is applied to data with specified options.
Example 1. pg_update
?php $db = pg_connect ('dbname=foo'); $data = array('field1'= 'AA', 'field2'= 'BB'); / / This is safe, since $_POST is converted automatically $res = pg_update($db, 'post_log', $_POST, $data); if ($res) {echo "Data is updated: $res\n";} else {echo "User must have sent wrong inputs\n";}?
Note:
This function is experimental.
See also pg_convert()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Table 1. phpinfo() options
Example 1. phpinfo() examples
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
This functionality was added in PHP 4.0.0.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. php_sapi_name() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. php_uname() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. phpversion() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns an approximation of pi.
The returned float has a precision based on the precision directive in php.ini, which defaults to 14.
Also, you can use the M_PI constant which yields identical results to pi().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Opens a pipe to a process executed by forking the command given by command.
This pointer may be used with fgets(), fgetss(), and fputs().
If an error occurs, returns FALSE.
If you' re looking for bi-directional support (two-way), use proc_open().
Example 1. popen() examole
?php $handle = popen ("/ bin / ls", "r");?
Note:
If the command to be executed could not be found, a valid resource is returned.
This may seem odd, but makes sense; it allows you to access any error message returned by the shell:
?php error_reporting( E_ALL); / * Add redirection so we can get stderr. * / $handle = popen(' / path / to / spooge 2 1', 'r'); echo "'$handle'; ". gettype($handle). "\n"; $read = fread($handle, 2096); echo $read; pclose($handle);?
See also pclose(), fopen(), and proc_open().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This is an alias for current().
See also end(), next(), prev(), and reset().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Needs to be written.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Needs to be written ASAP.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.10, PHP 4)
Return the numeric effective group ID of the current process.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.10, PHP 4)
Return the numeric effective user ID of the current process.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.10, PHP 4)
Return the numeric real group ID of the current process.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Needs to be written.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Needs to be written.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.10, PHP 4)
Returns the process group identifier of the process pid.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.10, PHP 4)
Return the process group identifier of the current process.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Needs to be written ASAP.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.10, PHP 4)
Return the sid of the process pid.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.10, PHP 4)
Return the numeric real user ID of the current process.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Needs to be written.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.13, PHP 4)
Send the signal sig to the process with the process identifier pid.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
When safe mode is enabled, PHP checks whether the directory in which you are about to operate has the same UID (owner) as the script that is being executed.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
Set the effective group ID of the current process.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
Set the real user ID of the current process.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.13, PHP 4)
Set the real group ID of the current process.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.13, PHP 4)
Let the process pid join the process group pgid.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.13, PHP 4)
Make the current process a session leader.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.13, PHP 4)
Set the real user ID of the current process.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Needs to be written.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PostgreSQL functions
PHP Manual
Prev
Next
Returns base raised to the power of exp.
If possible, this function will return an integer.
If the power cannot be computed, a warning will be issued, and pow() will return FALSE.
Example 1.
Some examples of pow()
?php var_dump( pow(2,8)); / / int(256) echo pow(-1,20); / / 1 echo pow(0, 0); / / 1 echo pow(-1, 5.5); / / error?
Warning
In PHP 4.0.6 and earlier pow() always returned a float, and did not issue warnings.
See also exp() and sqrt().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. preg_grep() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.9, PHP 4)
Searches subject for a match to the regular expression given in pattern.
Example 1.
Example 2. find the word "web"
Example 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1.
Note:
Example 2.
Example 3.
Example 4.
Example 5.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.9, PHP 4)
Parameter flags was added in PHP 4 Beta 3.
Example 1. preg_split() Example 1. preg_split() example:
Example 2.
Example 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the array element in the previous place that 's pointed by the internal array pointer, or FALSE if there are no more elements.
Warning
If the array contains empty elements then this function will return FALSE for these elements as well.
To properly traverse an array which may contain empty elements see the each() function.
prev() behaves just like next(), except it rewinds the internal array pointer one place instead of advancing it.
See also current(), end(), next(), and reset().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_abort() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_close() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
The function creates a new brush and returns a handle to it.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_create_dc() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
The function creates a new font and returns a handle to it.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
The function creates a new pen and returns a handle to it.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_draw_bmp() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
The function simply draws an chord. handle must be a valid handle to a printer.
$handle = printer_open(); printer_start_doc($handle, "My Document"); printer_start_page($handle); $pen = printer_create_pen(PRINTER_PEN_SOLID, 2, "000000"); printer_select_pen($handle, $pen); $brush = printer_create_brush(PRINTER_BRUSH_SOLID, "2222FF"); printer_select_brush($handle, $brush); printer_draw_chord($handle, 1, 1, 500, 500, 1, 1, 500, 1); printer_delete_brush($brush); printer_delete_pen($pen); printer_end_page($handle); printer_end_doc($handle); printer_close($handle);
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
The function simply draws an ellipse. handle must be a valid handle to a printer.
$handle = printer_open(); printer_start_doc($handle, "My Document"); printer_start_page($handle); $pen = printer_create_pen(PRINTER_PEN_SOLID, 2, "000000"); printer_select_pen($handle, $pen); $brush = printer_create_brush(PRINTER_BRUSH_SOLID, "2222FF"); printer_select_brush($handle, $brush); printer_draw_elipse($handle, 1, 1, 500, 500); printer_delete_brush($brush); printer_delete_pen($pen); printer_end_page($handle); printer_end_doc($handle); printer_close($handle);
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_draw_line() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
The function simply draws an pie. handle must be a valid handle to a printer.
$handle = printer_open(); printer_start_doc($handle, "My Document"); printer_start_page($handle); $pen = printer_create_pen(PRINTER_PEN_SOLID, 2, "000000"); printer_select_pen($handle, $pen); $brush = printer_create_brush(PRINTER_BRUSH_SOLID, "2222FF"); printer_select_brush($handle, $brush); printer_draw_pie($handle, 1, 1, 500, 500, 1, 1, 500, 1); printer_delete_brush($brush); printer_delete_pen($pen); printer_end_page($handle); printer_end_doc($handle); printer_close($handle);
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
$handle = printer_open(); printer_start_doc($handle, "My Document"); printer_start_page($handle); $pen = printer_create_pen(PRINTER_PEN_SOLID, 2, "000000"); printer_select_pen($handle, $pen); $brush = printer_create_brush(PRINTER_BRUSH_SOLID, "2222FF"); printer_select_brush($handle, $brush); printer_draw_rectangle($handle, 1, 1, 500, 500); printer_delete_brush($brush); printer_delete_pen($pen); printer_end_page($handle); printer_end_doc($handle); printer_close($handle);
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
The function simply draws a rectangle with rounded corners.
$handle = printer_open(); printer_start_doc($handle, "My Document"); printer_start_page($handle); $pen = printer_create_pen(PRINTER_PEN_SOLID, 2, "000000"); printer_select_pen($handle, $pen); $brush = printer_create_brush(PRINTER_BRUSH_SOLID, "2222FF"); printer_select_brush($handle, $brush); printer_draw_roundrect($handle, 1, 1, 500, 500, 200, 200); printer_delete_brush($brush); printer_delete_pen($pen); printer_end_page($handle); printer_end_doc($handle); printer_close($handle);
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_draw_text() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_get_option() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_list() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_logical_fontheight() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_open() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_select_brush() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_select_font() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_select_pen() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_set_option() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
The function creates a new document in the printer spooler.
Example 1. printer_start_doc() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. printer_write() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Produces output according to format, which is described in the documentation for sprintf().
See also print(), sprintf(), sscanf(), fscanf(), and flush().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns TRUE on success or FALSE on failure.
print() is not actually a real function (it is a language construct) so you are not required to use parentheses with it.
Example 1. print() examples
?php print( "Hello World"); print "print() also works without parentheses ."; print "This spans multiple lines.
The newlines will be output as well"; print "This spans\nmultiple lines.
The newlines will be\noutput as well ."; print "escaping characters is done \"Like this\" ."; / / You can use variables inside of an print statement $foo = "foobar"; $bar = "barbaz"; print "foo is $foo"; / / foo is foobar / / Using single quotes will print the variable name, not the value print'foo is $foo'; / / foo is $foo / / If you are not using any other characters, you can just print variables print $foo; / / foobar print END This uses the "here document "syntax to output multiple lines with $variable interpolation.
Note that the here document terminator must appear on a line with just a semicolon no extra whitespace!
See also echo(), printf(), and flush().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Tip:
As with anything that outputs its result directly to the browser, you can use the output-control functions to capture the output of this function, and save it in a string (for example).
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
pspell_add_to_personal() adds a word to the personal wordlist.
Example 1. pspell_add_to_personal()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pspell_check()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.2)
pspell_clear_session() clears the current session.
Example 1. pspell_add_to_personal()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pspell_config_create()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pspell_config_ignore()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pspell_config_mode()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pspell_config_personal()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pspell_config_repl()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pspell_config_runtogether()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pspell_new_config()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pspell_new()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pspell_new_personal()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pspell_add_to_personal()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pspell_store_replacement()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. pspell_suggest()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Adds setting to the server environment.
Warning
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function returns an 8-bit binary string corresponding to the decoded quoted printable string.
This function is similar to imap_qprint(), except this one does not require the IMAP module to work.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a version of str with a backslash character (\) before every character that is among these:
See also addslashes(), htmlentities(), htmlspecialchars(), nl2br(), and stripslashes().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function converts number from radian to degrees.
See also deg2rad().
Prev
Home
Next
Up
PHP Manual
Prev
Next
If called without the optional min, max arguments rand() returns a pseudo-random value between 0 and RAND_MAX.
If you want a random number between 5 and 15 (inclusive), for example, use rand (5, 15).
In older versions of PHP, you had to seed the random number generator before use with srand().
Since 4.2.0 this is no longer necessary.
Note:
In versions before 3.0.7 the meaning of max was range.
To get the same results in these versions the short example should be rand (5, 11) to get a random number between 5 and 15.
See also srand(), getrandmax(), and mt_rand().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.8, PHP 4)
range() returns an array of elements from low to high, inclusive.
New parameter:
The optional step parameter was added in 5.0.0.
If a step value is given, it will be used as the increment between elements in the sequence. step should be given as a positive number.
If not specified, step will default to 1.
Example 1. range() examples
?php / / array( 0,1,2,3,4,5,6,7,8,9) foreach(range(0, 9) as $number) {echo $number;} / / The step parameter was introduced in 5.0.0 / / array(0,10,20,30,40,50,60,70,80,90,100) foreach(range(0, 100, 10) as $number) {echo $number;} / / Use of characters introduced in 4.1.0 / / array('a' ,'b' ,'c' ,'d' ,'e' ,'f' ,'g' ,'h' ,'i'); foreach(range('a', 'i') as $letter) {echo $letter;} / / array('c' ,'b' ,'a'); foreach(range('c', 'a') as $letter) {echo $letter;}?
Note:
Prior to version 4.1.0 the range() function only generated incrementing integer arrays.
Support for character sequences and decrementing arrays was added in 4.1.0.
See also shuffle() and foreach.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. rawurlencode() example 1
Example 2. rawurlencode() example 2
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the filename of the next file from the directory.
The filenames are returned in the order in which they are stored by the filesystem.
Please note the fashion in which readdir() 's return value is checked in the examples below.
We are explicitly testing whether the return value is identical to (equal to and of the same type as--see Comparison Operators for more information) FALSE since otherwise, any directory entry whose name evaluates to FALSE will stop the loop (e.g. a directory named "0").
Example 1.
List all files in a directory
/ / Note that !== did not exist until 4.0.0-RC2 ?php if ($handle = opendir(' / path / to / files')) {echo "Directory handle: $handle\n"; echo "Files:\n"; / * This is the correct way to loop over the directory. * / while (false !== ($file = readdir($handle))) {echo "$file\n";} / * This is the WRONG way to loop over the directory. * / while ($file = readdir($handle)) {echo "$file\n";} closedir($handle);}?
Note that readdir() will return the. and.. entries.
If you don 't want these, simply strip them out:
Example 2.
List all files in the current directory and strip out. and..
See also is_dir().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
The read_exif_data() function is an alias for exif_read_data().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Reads a file and writes it to the output buffer.
Returns the number of bytes read from the file.
If an error occurs, FALSE is returned and unless the function was called as @readfile, an error message is printed.
Tip:
You can use a URL as a filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the filename and Appendix I for a list of supported URL protocols.
You can use the optional second parameter and set it to "1", if you want to search for the file in the include_path, too.
See also fpassthru(), file(), fopen(), include(), require(), virtual() and Appendix I.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Reads a file, decompresses it and writes it to standard output.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
This function registers a completion function.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. readline()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
readlink() does the same as the readlink C function and returns the contents of the symbolic link path or 0 in case of error.
See also is_link(), symlink(), and linkinfo().
Prev
Home
Next
Up
PHP Manual
Prev
Next
realpath() expands all symbolic links and resolves references to '/. /', '/.. /' and extra '/' characters in the input path and return the canonicalized absolute pathname.
The resulting path will have no symbolic link, '/. /' or '/.. /' components.
realpath() returns FALSE on failure, e.g. if the file does not exists.
Example 1. realpath() example
See also: basename(), dirname(), and pathinfo().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
This is an alias for recode_string().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Attempts to rename oldname to newname.
Returns TRUE on success or FALSE on failure.
Example 1.
Example with rename()
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
The require() statement includes and evaluates the specific file.
Detailed information on how this inclusion works is described in the documentation for include().
require() and include() are identical in every way except how they handle failure. include() produces a Warning while require() results in a Fatal Error.
In other words, don' t hesitate to use require() if you want a missing file to halt processing of the page. include() does not behave this way, the script will continue regardless.
Be sure to have an appropriate include_path setting as well.
Example 12-2.
Basic require() examples
See the include() documentation for more examples.
Note:
Prior to PHP 4.0.2, the following applies: require() will always attempt to read the target file, even if the line it's on never executes.
The conditional statement won' t affect require().
However, if the line on which the require() occurs is not executed, neither will any of the code in the target file be executed.
Similarly, looping structures do not affect the behaviour of require().
Although the code contained in the target file is still subject to the loop, the require() itself happens only once.
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
See also include(), require_once(), include_once(), eval(), file(), readfile(), virtual() and include_path.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
The require_once() statement includes and evaluates the specified file during the execution of the script.
This is a behavior similar to the require() This is a behavior similar to the require() statement, with the only difference being that if the code from a file has already been included, it will not be included again.
See the documentation for require() for more information on how this statement works.
require_once() should be used in cases where the same file might be included and evaluated more than once during a particular execution of a script, and you want to be sure that it is included exactly once to avoid problems with function redefinitions, variable value reassignments, etc.
For examples on using require_once() and include_once(), look at the PEAR code included in the latest PHP source code distributions.
Note:
Be aware, that the behaviour of require_once() and include_once() may not be what you expect on a non case sensitive operating system (such as Windows).
Example 12-8. require_once() is case sensitive
require_once( "a.php"); / / this will include a.php require_once("A.php"); / / this will include a.php again on Windows!
Warning
Windows versions of PHP prior to PHP 4.3 do not support accessing remote files via this function, even if allow_url_fopen is enabled.
See also: require(), include(), include_once(), get_required_files(), get_included_files(), readfile(), and virtual().
Prev
Home
Next
Up
PHP Manual
Prev
Next
reset() rewinds array's internal pointer to the first element.
reset() returns the value of the first array element.
See also current(), each(), next(), and prev().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 12.
Control Structures
Next
If called from within a function, the return() statement immediately ends execution of the current function, and returns its argument as the value of the function call. return() will also end the execution of an eval() statement or script file.
If called from the global scope, then execution of the current script file is ended.
If the current script file was include() ed or require() ed, then control is passed back to the calling file.
Furthermore, if the current script file was include() ed, then the value given to return() will be returned as the value of the include() Furthermore, if the current script file was include() ed, then the value given to return() will be returned as the value of the include() call.
If return() is called from within the main script file, then script execution ends.
If the current script file was named by the auto_prepend_file or auto_append_file configuration options in the configuration file, then that script file 's execution is ended.
For more information, see Returning values.
Note:
Note that since return() is a language construct and not a function, the parentheses surrounding its arguments are not required--in fact, it is more common to leave them out than to use them, although it doesn't matter one way or the other.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Resets the directory stream indicated by dir_handle to the beginning of the directory.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Sets the file position indicator for handle to the beginning of the file stream.
If an error occurs, returns 0, otherwise it returns 1.
The file pointer must be valid, and must point to a file successfully opened by fopen().
Note:
If you have opened the file in append ("a") mode, any data you write to the file will always be appended, regardless of the file position.
See also fseek() and ftell().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Attempts to remove the directory named by dirname.
The directory must be empty, and the relevant permissions must permit this.
Returns TRUE on success or FALSE on failure.
See also mkdir() and unlink().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the rounded value of val to specified precision (number of digits after the decimal point). precision can also be negative or zero (default).
Caution
PHP doesn' t handle strings like "12,300.2 "correctly by default.
See converting from strings.
Note:
The precision parameter is only available in PHP 4.
See also ceil() and floor().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function sorts an array in reverse order (highest to lowest).
Example 1. rsort() example
$fruits = array ("lemon", "orange", "banana", "apple"); rsort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "$key = $val\n";}
This example would display:
0 = orange 1 = lemon 2 = banana 3 = apple
The fruits have been sorted in reverse alphabetical order.
You may modify the behavior of the sort using the optional parameter sort_flags, for details see sort().
See also arsort(), asort(), ksort(), sort(), and usort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
The second parameter was added in PHP 4.1.0
This function returns a string with whitespace stripped from the end of str.
Without the second parameter, rtrim() will strip these characters:
"" (ASCII 32 (0x20)), an ordinary space.
"\t" (ASCII 9 (0x09)), a tab.
"\n" (ASCII 10 (0x0A)), a new line (line feed).
"\r" (ASCII 13 (0x0D)), a carriage return.
"\0" (ASCII 0 (0x00)), the NUL -byte.
"\x0B" (ASCII 11 (0x0B)), a vertical tab.
You can also specify the characters you want to strip, by means of the charlist You can also specify the characters you want to strip, by means of the charlist parameter.
Simply list all characters that you want to be stripped.
With.. you can specify a range of characters.
Example 1.
Usage example of rtrim()
?php $text = "\t\tThese are a few words:)..."; $trimmed = rtrim($text); / / $trimmed = "\t\tThese are a few words:)... "$trimmed = rtrim($text," \t ."); / / $trimmed = "\t\tThese are a few words:) "$clean = rtrim($binary ,"\0x00..\0x1F"); / / trim the ASCII control characters at the end of $binary / / (from 0 to 31 inclusive)?
See also trim() and ltrim().
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 13.
Functions
Next
Information may be passed to functions via the argument list, which is a comma-delimited list of variables and / or constants.
PHP supports passing arguments by value (the default), passing by reference, and default argument values.
Variable-length argument lists are supported only in PHP 4 and later; see Variable-length argument lists and the function references for func_num_args(), func_get_arg(), and func_get_args() for more information.
A similar effect can be achieved in PHP 3 by passing an array of arguments to a function:
function takes_array( $input) {echo "$input[0] + $input[1] = ", $input[0]+$input[1];}
By default, function arguments are passed by value (so that if you change the value of the argument within the function, it does not get changed outside of the function).
If you wish to allow a function to modify its arguments, you must pass them by reference.
If you want an argument to a function to always be passed by reference, you can prepend an ampersand () to the argument name in the function definition:
function add_some_extra( $string) {$string .= 'and something extra .';} $str = 'This is a string, '; add_some_extra($str); echo $str; / / outputs'This is a string, and something extra.'
A function may define C++-style default values for scalar arguments as follows:
function makecoffee ($type = "cappuccino") {return "Making a cup of $type.\n";} echo makecoffee (); echo makecoffee ("espresso");
The output from the above snippet is:
Making a cup of cappuccino.
Making a cup of espresso.
The default value must be a constant expression, not (for example) a variable or class member.
Note that when using default arguments, any defaults should be on the right side of any non-default arguments; otherwise, things will not work as expected.
Consider the following code snippet:
function makeyogurt ($type = "acidophilus", $flavour) {return "Making a bowl of $type $flavour.\n";} echo makeyogurt ("raspberry"); / / won't work as expected
The output of the above example is:
Missing argument 2 in call to makeyogurt() in / usr / local / etc / httpd / htdocs / php3test / functest.html on line 41 Making a bowl of raspberry.
Now, compare the above with this:
function makeyogurt ($flavour, $type = "acidophilus") {return "Making a bowl of $type $flavour.\n";} echo makeyogurt ("raspberry"); / / works as expected
The output of this example is:
Making a bowl of acidophilus raspberry.
PHP 4 has support for variable-length argument lists in user-defined functions.
This is really quite easy, using the func_num_args(), func_get_arg(), and func_get_args() functions.
No special syntax is required, and argument lists may still be explicitly provided with function definitions and will behave as normal.
Prev
Home
Next
Functions
Up
Returning values
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. serialize() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 CVS only)
result_id is a valid result id returned by sesam_query().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 CVS only)
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 CVS only)
Returns: always TRUE.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 CVS only)
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 CVS only)
result_id is a valid result id returned by sesam_query().
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns:
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 CVS only)
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 CVS only)
Returns:
Table 1.
Table 2.
Example 1.
Prev
Home
Next
Up
Session handling functions
PHP Manual
Prev
Next
If new_cache_expire is given, the current cache expire is replaced with new_cache_expire.
Also see the session.cache_expire configuration directive.
Prev
Home
Next
Session handling functions
Up
PHP Manual
Prev
Next
If cache_limiter is specified, the name of the current cache limiter is changed to the new value.
These headers determine the rules by which the page content may be cached by the client and intermediate proxies.
A value of public permits caching by proxies and the client, whereas private disallows caching by proxies and permits the client to cache the contents.
In private mode, the Expire header sent to the client may cause confusion for some browsers, including Mozilla.
You can avoid this problem by using private_no_expire mode.
The expire header is never sent to the client in this mode.
The cache limiter is reset to the default value stored in session.cache_limiter at request startup time.
Thus, you need to call session_cache_limiter() for every request (and before session_start() is called).
Example 1. session_cache_limiter() example
Also see the session.cache_limiter configuration directive.
Home
Next
session_cache_expire
session_decode
PHP Manual
Prev
Next
session_decode() decodes the session data in data, setting variables stored in the session.
Voir aussi session_encode()
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_destroy() destroys all of the data associated with the current session.
It does not unset any of the global variables associated with the session, or unset the session cookie.
This function returns TRUE on success and FALSE on failure to destroy the session data.
Example 1.
Destroying a session
?php / / Initialize the session. / / If you are using session_name( "something"), don't forget it now! session_start(); / / Unset all of the session variables. session_unset(); / / Finally, destroy the session. session_destroy();?
Example 2.
Destroying a session with $_SESSION
?php / / Initialize the session. / / If you are using session_name( "something"), don't forget it now! session_start(); / / Unset all of the session variables. $_SESSION = array(); / / Finally, destroy the session. session_destroy();?
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_encode() returns a string with the contents of the current session encoded within.
See also session_decode()
Prev
Home
Next
Up
PHP Manual
Prev
Next
The session_get_cookie_params() function returns an array with the current session cookie information, the array contains the following items:
"lifetime" - The lifetime of the cookie.
"path" - The path where information is stored.
"domain" - The domain of the cookie.
"secure" - The cookie should only be sent over secure connections. (This item was added in PHP 4.0.4.)
See also the configuration directives session.cookie_lifetime, session.cookie_path, session.cookie_domain, session.cookie_secure, and session_set_cookie_params().
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_id() returns the session id for the current session.
If id is specified, it will replace the current session id. session_id() needs to be called before session_start() for that purpose.
Depending on the session handler, not all characters are allowed within the session id.
For example, the file session handler only allows characters in the range a-z, A-Z and 0-9!
The constant SID can also be used to retrieve the current name and session id as a string suitable for adding to URLs.
Note that SID is only defined if the client didn 't send the right cookie.
See also Session handling.
See also session_start(), session_set_save_handler(), and session.save_handler.
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_is_registered() returns TRUE if there is a global variable with the name name registered in the current session.
Note:
If $_SESSION (or $HTTP_SESSION_VARS for PHP 4.0.6 or less) is used, use isset() to check a variable is registered in $_SESSION.
Caution
If you are using $_SESSION (or $HTTP_SESSION_VARS), do not use session_register(), session_is_registered() and session_unregister().
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_module_name() returns the name of the current session module.
If module is specified, that module will be used instead.
Prev
Home
Next
Up
PHP Manual
Prev
Next
If name is specified, the name of the current session is changed to its value.
It should contain only alphanumeric characters; it should be short and descriptive (i.e. for users with enabled cookie warnings).
Thus, you need to call session_name() for every request (and before session_start() or session_register() are called).
Example 1. session_name() examples
See also the session.name configuration directive.
Prev
Home
Next
session_module_name
Up
PHP Manual
Prev
Next
Read in session data without locking the session data.
Changing session data is not possible, but frameset performance will be improved.
Prev
Home
Next
Up
PHP Manual
Prev
Next
For each name, session_register() registers the global variable with that name in the current session.
If you want your script to work regardless of register_globals, you need to use the $_SESSION array.
If your script uses session_register(), it will not work in environments where register_globals is disabled.
Caution
This registers a global variable.
If you want to register a session variable from within a function, you need to make sure to make it global using the global keyword or the $GLOBALS[] array, or use the special session arrays as noted below.
Caution
If you are using $_SESSION (or $HTTP_SESSION_VARS), do not use session_register(), session_is_registered() and session_unregister().
This function returns TRUE when all of the variables are successfully registered with the session.
If session_start() was not called before this function is called, an implicit call to session_start() with no parameters will be made. $_SESSION does not mimick this behavior and requires session_start() before use.
You can also create a session variable by simply setting the appropriate member of the $_SESSION or $HTTP_SESSION_VARS (PHP 4.1.0) array.
$barney = "A big purple dinosaur ."; session_register("barney"); $_SESSION["zim"] = "An invader from another planet ."; # The old way was to use $HTTP_SESSION_VARS $HTTP_SESSION_VARS["spongebob"] = "He's got square pants .";
Note:
It is currently impossible to register resource variables in a session.
For example, you cannot create a connection to a database and store the connection id as a session variable and expect the connection to still be valid the next time the session is restored.
PHP functions that return a resource are identified by having a return type of resource in their function definition.
A list of functions that return resources are available in the resource types appendix.
For example: $_SESSION[ 'var'] = 'ABC';
See also session_is_registered() and session_unregister().
Prev
Home
Next
Up
PHP Manual
Prev
Next
If path is specified, the path to which data is saved will be changed. session_save_path() needs to be called before session_start() for that purpose.
On some operating systems, you may want to specify a path on a filesystem that handles lots of small files efficiently.
For example, on Linux, reiserfs may provide better performance than ext2fs.
See also the session.save_path configuration directive.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The effect of this function only lasts for the duration of the script.
Note:
The secure parameter was added in PHP 4.0.4.
See also the configuration directives session.cookie_lifetime, session.cookie_path, session.cookie_domain, session.cookie_secure, and session_get_cookie_params().
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_set_save_handler() sets the user-level session storage functions which are used for storing and retrieving data associated with a session.
This is most useful when a storage method other than those supplied by PHP sessions is preferred. i.e.
Storing the session data in a local database.
Returns TRUE on success or FALSE on failure.
Note:
The "write" handler is not executed until after the output stream is closed.
Thus, output from debugging statements in the "write" handler will never be seen in the browser.
If debugging output is necessary, it is suggested that the debug output be written to a file instead.
Note:
The write handler is not executed if the session contains no data; this applies even if empty session variables are registered.
This differs to the default file-based session save handler, which creates empty session files.
The following example provides file based session storage similar to the PHP sessions default save handler files.
This example could easily be extended to cover database storage using your favorite PHP supported database engine.
Read function must return string value always to make save handler work as expected.
Return empty string if there is no data to read.
Return values from other handlers are converted to boolean expression.
TRUE for success, FALSE for failure.
Example 1. session_set_save_handler() example
See also the session.save_handler configuration directive.
Prev
Home
Next
Up
PHP Manual
Prev
Next
session_start() creates a session or resumes the current one based on the current session id that's being passed via a request, such as GET, POST, or a cookie.
If you want to use a named session, you must call session_name() before calling session_start().
This function always returns TRUE.
Note:
If you are using cookie-based sessions, you must call session_start() before anything is output to the browser.
session_start() will register internal output handler for URL rewriting when trans-sid is enabled.
If a user uses ob_gzhandler or like with ob_start(), the order of output handler is important for proper output.
For example, user must register ob_gzhandler before session start.
Note:
Use of zlib.output_compression is recommended rather than ob_gzhandler()
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
session_unregister() unregisters the global variable named name from the current session.
Note:
If $_SESSION (or $HTTP_SESSION_VARS for PHP 4.0.6 or less) is used, use unset() to unregister a session variable.
Caution
This function does not unset the corresponding global variable for name, it only prevents the variable from being saved as part of the session.
You must call unset() to remove the corresponding global variable.
Caution
If you are using $_SESSION (or $HTTP_SESSION_VARS), do not use session_register(), session_is_registered() and session_unregister().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
If $_SESSION (or $HTTP_SESSION_VARS for PHP 4.0.6 or less) is used, use unset() to unregister session variable. i.e. $_SESSION = array();
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
End the current session and store session data.
Session data is usually stored after your script terminated without the need to call session_write_close(), but as session data is locked to prevent concurrent writes only one script may operate on a session at any time.
When using framesets together with sessions you will experience the frames loading one by one due to this locking.
You can reduce the time needed to load all the frames by ending the session as soon as all changes to session variables are done.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1. setcookie() parameters explained
Note:
Example 1. setcookie() send examples
Example 2. setcookie() delete examples
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.1)
Sets a user function (error_handler) to handle errors in a script.
Note:
Note:
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of stream_set_write_buffer().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Example 1. setlocale() Examples
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Set the number of seconds a script is allowed to run.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Set the type of variable var to type.
Returns TRUE on success or FALSE on failure.
Example 1. settype() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Calculates the sha1 hash of filename using the US Secure Hash Algorithm 1, and returns that hash.
The hash is a 40-character hexadecimal number.
Upon failure, FALSE is returned.
See also sha1(), crc32(), and md5_file()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Calculates the sha1 hash of str using the US Secure Hash Algorithm 1, and returns that hash.
The hash is a 40-character hexadecimal number.
See also sha1_file(), crc32(), and md5()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
shmop_close() is used to close a shared memory block.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
shmop_delete() is used to delete a shared memory block.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
shmop_open() can create or open a shared memory block.
Note:
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
shmop_read() will read a string from shared memory block.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
shmop_write() will write a string into shared memory block.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Removes shared memory from Unix systems.
This function does not work on Windows systems.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias to highlight_file().
For more information see the documentation there.
See also highlight_string() and highlight_file().
Prev
Home
Next
Up
PHP Manual
Prev
Next
A function may be defined using syntax such as the following:
function foo ($arg_1, $arg_2,..., $arg_n) {echo "Example function.\n"; return $retval;}
Any valid PHP code may appear inside a function, even other functions and class definitions.
In PHP 3, functions must be defined before they are referenced.
Except when a function is conditionally defined such as shown in the two examples below.
Its definition must be processed prior to being called.
Conditional functions
Example 13-2.
?php function foo() {function bar() {echo "I don't exist until foo() is called.\n";}} / * We can't call bar() yet since it doesn't exist. * / foo(); / * Now we can call bar(), foo()'s processesing has made it accessable. * / bar();?
PHP 3 does not support variable numbers of arguments to functions, although default arguments are supported (see Default argument values for more information).
PHP 4 supports both: see Variable-length argument lists and the function references for func_num_args(), func_get_arg(), and func_get_args() for more information.
Prev
Home
Next
Up
Function arguments
PHP Manual
Prev
Next
This function shuffles (randomizes the order of the elements in) an array.
You must use srand() to seed this function.
Example 1. shuffle() example
$numbers = range (1,20); srand ((float)microtime()*1000000); shuffle ($numbers); while (list (, $number) = each ($numbers)) {echo "$number ";}
See also arsort(), asort(), ksort(), rsort(), sort(), and usort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the hyperbolic sine of arg, defined as (exp(arg) - exp(-arg)) / 2.
See also sin(), asinh(), cos() and tan().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
sin() returns the sine of the arg parameter.
The arg parameter is in radians.
?php / / Precision depends on your precision directive print sin( deg2rad(60)); / / 0.866025403... print sin(60); / / -0.304810621...?
See also asin(), cos(), tan() and deg2rad().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The sizeof() function is an alias for count().
See also count().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The sleep() function delays program execution for the given number of seconds.
See also usleep() and set_time_limit()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.8, PHP 4)
Sets the value of quick_print within the UCD SNMP library.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Table 2.
Table 3.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns TRUE on success or FALSE on failure. socket_getpeername() may also return FALSE if the socket type is not any of AF_INET or AF_UNIX, in which case the last socket error code is not updated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns TRUE on success or FALSE on failure. socket_getsockname() may also return FALSE if the socket type is not any of AF_INET or AF_UNIX, in which case the last socket error code is not updated.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias of stream_get_meta_data().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
Note:
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias for stream_set_blocking().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
This is an alias for stream_set_timeout().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. socket_strerror() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 13.
Functions
Next
The old_function statement allows you to declare a function using a syntax identical to PHP / FI2 (except you must replace'function 'with'old_function'.
This is a deprecated feature, and should only be used by the PHP / FI2 - PHP 3 convertor.
Warning
Functions declared as old_function cannot be called from PHP 's internal code.
Among other things, this means you can' t use them in functions such as usort(), array_walk(), and register_shutdown_function().
You can get around this limitation by writing a wrapper function (in normal PHP 3 form) to call the old_function.
Prev
Home
Next
Returning values
Up
Variable functions
PHP Manual
Prev
Next
(PHP 3, PHP 4)
This function sorts an array.
Elements will be arranged from lowest to highest when this function has completed.
Example 1. sort() example
?php $fruits = array ("lemon", "orange", "banana", "apple"); sort ($fruits); reset ($fruits); while (list ($key, $val) = each ($fruits)) {echo "fruits[".$key ."] = ".$val ."\n";}?
This example would display:
fruits[ 0] = apple fruits[1] = banana fruits[2] = lemon fruits[3] = orange
The fruits have been sorted in alphabetical order.
The optional second parameter sort_flags may be used to modify the sorting behavior using these values:
Sorting type flags:
SORT_REGULAR - compare items normally
SORT_NUMERIC - compare items numerically
SORT_STRING - compare items as strings
See also arsort(), asort(), ksort(), natsort(), natcasesort(), rsort(), usort(), array_multisort(), and uksort().
Note:
The second parameter was added in PHP 4.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Calculates the soundex key of str.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. split() Example
Note:
Example 2. split() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns a string produced according to the formatting string format.
Example 1.
Example 2.
Example 3.
Example 4.
See also printf(), sscanf(), fscanf(), vsprintf(), and number_format().
Example 5. sprintf(): zero-padded integers
Example 6. sprintf(): formatting currency
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. sql_regcase() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the square root of arg.
?php / / Precision depends on your precision directive echo sqrt( 9); / / 3 echo sqrt(10); / / 3.16227766...?
See also pow().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Seeds the random number generator with seed.
/ / seed with microseconds function make_seed() {list($usec, $sec) = explode( '', microtime()); return (float) $sec + ((float) $usec * 100000);} srand(make_seed()); $randval = rand();
Note:
Since PHP 4.2.0 it 's no longer necessary to seed the random number generator before using it.
See also rand(), getrandmax() and mt_srand().
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 13.
Functions
Next
Values are returned by using the optional return statement.
Any type may be returned, including lists and objects.
This causes the function to end its execution immediately and pass control back to the line from which it was called.
See return() for more information.
function square ($num) {return $num * $num;} echo square (4); / / outputs '16 '.
You can 't return multiple values from a function, but similar results can be obtained by returning a list.
function small_numbers() {return array (0, 1, 2);} list ($zero, $one, $two) = small_numbers();
To return a reference from a function, you have to use the reference operator in both the function declaration and when assigning the returned value to a variable:
function returns_reference() {return $someref;} $newref = returns_reference();
For more information on references, please check out References Explained.
Prev
Home
Next
Function arguments
Up
PHP Manual
Prev
Next
Example 1. sscanf() Example
Example 2. sscanf() - using optional parameters
Prev
Home
Next
Up
PHP Manual
Prev
Next
Gathers the statistics of the file named by filename.
Returns an array with the statistics of the file with the following elements:
number of links
user id of owner
size in bytes
Returns FALSE in case of error.
stat() cannot be used on remote files.
The results of this function are cached.
See clearstatcache() for more details.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. strcasecmp() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function is an alias for strstr(), and is identical in every way.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns 0 if str1 is less than str2; 0 if str1 is greater than str2, and 0 if they are equal.
Note that this comparison is case sensitive.
See also ereg(), strcasecmp(), substr(), stristr(), strncasecmp(), strncmp(), and strstr().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns 0 if str1 is less than str2; 0 if str1 is greater than str2, and 0 if they are equal. strcoll() uses the current locale for doing the comparisons.
If the current locale is C or POSIX, this function is equivalent to strcmp().
Note that this comparison is case sensitive, and unlike strcmp() this function is not binary safe.
See also ereg(), strcmp(), strcasecmp(), substr(), stristr(), strncasecmp(), strncmp(), strstr(), and setlocale().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the length of the initial segment of str1 which does not contain any of the characters in str2.
See also strspn().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Adds filtername to the list of filters attached to stream.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Adds filtername to the list of filters attached to stream.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Returns information about an existing stream.
See Appendix I for more information about wrappers.
See Appendix I for more information about wrappers and their wrapper data.
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
Note:
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. stream_set_timeout() Example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Output using fwrite() is normally buffered at 8K.
Example 1. stream_set_write_buffer() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns a string formatted according to the given format string using the given timestamp or the current local time if no timestamp is given.
Month and weekday names and other language dependent strings respect the current locale set with setlocale().
%a - abbreviated weekday name according to the current locale
%b - abbreviated month name according to the current locale
%B - full month name according to the current locale
%c - preferred date and time representation for the current locale
%C - century number (the year divided by 100 and truncated to an integer, range 00 to 99)
%D - same as %m / %d / %y
%e - day of the month as a decimal number, a single digit is preceded by a space (range '1' to '31')
%G - The 4-digit year corresponding to the ISO week number (see %V).
This has the same format and value as %Y, except that if the ISO week number belongs to the previous or next year, that year is used instead.
%h - same as %b
%I - hour as a decimal number using a 12-hour clock (range 01 to 12)
%j - day of the year as a decimal number (range 001 to 366)
%M - minute as a decimal number
%p - either `am' or `pm 'according to the given time value, or the corresponding strings for the current locale
%r - time in a.m. and p.m. notation
%S - second as a decimal number
%T - current time, equal to %H:%M:%S
%u - weekday as a decimal number [1,7], with 1 representing Monday
Sun Solaris seems to start with Sunday as 1 although ISO 9889:1999 (the current C standard) clearly specifies that it should be Monday.
%V - The ISO 8601:1988 week number of the current year as a decimal number, range 01 to 53, where week 1 is the first week that has at least 4 days in the current year, and with Monday as the first day of the week. (Use %G or %g for the year component that corresponds to the week number for the specified timestamp.)
%W - week number of the current year as a decimal number, starting with the first Monday as the first day of the first week
%w - day of the week as a decimal, Sunday being 0
%x - preferred date representation for the current locale without the time
%X - preferred time representation for the current locale without the date
%y - year as a decimal number without a century (range 00 to 99)
%Y - year as a decimal number including the century
%% - a literal `% 'character
Note:
Not all conversion specifiers may be supported by your C library, in which case they will not be supported by PHP' s strftime().
This means that e.g. %e, %T, %R and %D (there might be more) will not work on Windows.
setlocale (LC_TIME, "C"); print (strftime ("%A in Finnish is ")); setlocale (LC_TIME, "fi_FI"); print (strftime ("%A, in French ")); setlocale (LC_TIME, "fr_FR"); print (strftime ("%A and in German ")); setlocale (LC_TIME, "de_DE"); print (strftime ("%A.\n"));
Note: %G and %V, which are based on ISO 8601:1988 week numbers can give unexpected (albiet correct) results if the numbering system is not thoroughly understood.
Example 2.
?php / * December 2002 / January 2003 ISOWk M Tu W Thu F Sa Su ---- - --------------------------- - 51 16 17 18 19 20 21 22 52 23 24 25 26 27 28 29 1 30 31 1 2 3 4 5 2 6 7 8 9 10 11 12 3 13 14 15 16 17 18 19 * / / / Outputs:
12 / 28 / 2002 - %V,%G,%Y = 52,2002,2002 print "12 / 28 / 2002 - %V,%G,%Y =". strftime("%V,%G,%Y",strtotime("12 / 28 / 2002")). "\n"; / / Outputs:
12 / 30 / 2002 - %V,%G,%Y = 1,2003,2002 print "12 / 30 / 2002 - %V,%G,%Y =". strftime("%V,%G,%Y",strtotime("12 / 30 / 2002")). "\n"; / / Outputs:
1 / 10 / 2003 - %V,%G,%Y = 2,2003,2003 print "1 / 10 / 2003 - %V,%G,%Y =". strftime("%V,%G,%Y",strtotime("1 / 10 / 2003")). "\n"; / * December 2004 / January 2005 ISOWk M Tu W Thu F Sa Su ---- - --------------------------- - 51 13 14 15 16 17 18 19 52 20 21 22 23 24 25 26 53 27 28 29 30 31 1 2 1 3 4 5 6 7 8 9 2 10 11 12 13 14 15 16 * / / / Outputs:
12 / 31 / 2004 - %V,%G,%Y = 53,2004,2004 print "12 / 31 / 2004 - %V,%G,%Y =". strftime("%V,%G,%Y",strtotime("12 / 31 / 2004")). "\n"; / / Outputs:
See also setlocale() and mktime() and the Open Group specification of strftime().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Returns a string with backslashes stripped off.
Recognizes C-like \n, \r..., octal and hexadecimal representation.
See also addcslashes().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns a string with backslashes stripped off. (\ 'becomes' and so on.) Double backslashes are made into a single backslash.
See also addslashes().
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function tries to return a string with all HTML and PHP tags stripped from a given str.
It errors on the side of caution in case of incomplete or bogus tags.
It uses the same tag stripping state machine as the fgetss() function.
You can use the optional second parameter to specify tags which should not be stripped.
Example 1. strip_tags() example
Warning
This function does not modify any attributes on the tags that you allow using allowable_tags, including the style and onmouseover attributes that a mischievous user may abuse when posting text that will be shown to other users.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the length of string.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. str_pad() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. strrchr() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. str_repeat() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. str_replace() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns string, reversed.
Reversing a string with strrev()
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
str_shuffle() shuffles a string.
?php $str = 'abcdef'; $shuffled = str_shuffle($str); / / This will print something like: bfdaec print $shuffled;?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. strstr() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. strtok() example
Example 2.
Example 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. strtolower() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
The function expects to be given a string containing an English date format and will try to parse that format into a UNIX timestamp relative to the timestamp given in now, or the current time if none is supplied.
Upon failure, -1 is returned.
Because strtotime() behaves according to GNU date syntax, have a look at the GNU manual page titled Date Input Formats.
Described there is valid syntax for the time parameter.
Example 1. strtotime() examples
Example 2.
Checking for failure
Note:
The valid range of a timestamp is typically from Fri, 13 Dec 1901 20:45:54 GMT to Tue, 19 Jan 2038 03:14:07 GMT. (These are the dates that correspond to the minimum and maximum values for a 32-bit signed integer.)
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. strtoupper() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. strtr() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns the string value of var.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.3.0)
Counts the number of words inside string.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. substr_count() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Example 2.
Example 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. substr_replace() example
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 13.
Functions
Next
PHP supports the concept of variable functions.
This means that if a variable name has parentheses appended to it, PHP will look for a function with the same name as whatever the variable evaluates to, and will attempt to execute it.
Variable functions won' t work with language constructs such as echo(), print(), unset(), isset(), empty(), include(), require() Variable functions won't work with language constructs such as echo(), print(), unset(), isset(), empty(), include(), require() and the like.
Example 13-3.
?php function foo() {echo "In foo() br \n";} function bar($arg = '') {echo "In bar(); argument was '$arg'. br \n";} / / This is a wrapper function around echo function echoit($string) {echo $string;} $func = 'foo'; $func(); / / This calls foo() $func = 'bar'; $func('test'); / / This calls bar() $func = 'echoit'; $func('test'); / / This calls echoit()?
Example 13-4.
?php class Foo {function Var() {$name = 'Bar'; $this - $name(); / / This calls the Bar() method} function Bar() {echo "This is Bar";}} $foo = new Foo(); $funcname = "Var"; $foo - $varname(); / / This calls $foo - Var()?
See also call_user_func(), variable variables and function_exists().
Prev
Home
Next
Up
Classes and Objects
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfaction() example
Example 2. swfaction() example
Example 3. swfaction() example
Example 4. swfaction() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. swf_addbuttonrecord() function example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Note:
Example 1.
Example 2. swfbitmap() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfbutton() example
Example 2. swfbutton - addaction() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfdisplayitem - multcolor() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfdisplayitem - rotateto() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfdisplayitem - setname() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfgradient() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfmorph() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfmovie - streammp3() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfshape - addfill() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfshape() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfshape - setline() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swfsprite() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Define an object id as a symbol.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
Miscellaneous functions
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Example 1. swftext() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
The number of affected rows by the last query.
sybase_affected_rows() returns the number of rows affected by the last INSERT, UPDATE or DELETE query on the server associated with the specified link identifier.
If the link identifier isn 't specified, the last opened link is assumed.
This command is not effective for SELECT statements, only on statements which modify records.
To retrieve the number of rows returned from a SELECT, use sybase_num_rows().
Note:
This function is only available using the CT library interface to Sybase, and not the DB library.
Prev
Home
Next
Sybase functions
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
TRUE on success, FALSE on error
sybase_close() closes the link to a Sybase database that's associated with the specified link identifier.
If the link identifier isn 't specified, the last opened link is assumed.
Note that this isn' t usually necessary, as non-persistent open links are automatically closed at the end of the script's execution.
sybase_close() will not close persistent links generated by sybase_pconnect().
See also: sybase_connect(), sybase_pconnect().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
A positive Sybase link identifier on success, or FALSE on error.
sybase_connect() establishes a connection to a Sybase server.
The servername argument has to be a valid servername that is defined in the 'interfaces' file.
In case a second call is made to sybase_connect() with the same arguments, no new link will be established, but instead, the link identifier of the already opened link will be returned.
The link to the server will be closed as soon as the execution of the script ends, unless it' s closed earlier by explicitly calling sybase_close().
See also sybase_pconnect(), sybase_close().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns an object containing field information.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Seeks to the specified field offset.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Returns:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Prev
Home
Next
Up
PHP Manual
Prev
Next
symlink() creates a symbolic link from the existing target with the specified name link.
See also link() to create hard links, and readlink() along with linkinfo().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1. syslog() Priorities (in descending order)
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the hyperbolic tangent of arg, defined as sinh( arg) / cosh(arg).
See also tan(), atanh(), sin() and cos().
Prev
Home
Next
Up
PHP Manual
Prev
Next
tan() returns the tangent of the arg parameter.
The arg parameter is in radians.
See also atan(), sin(), cos() and deg2rad().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Creates a file with a unique filename in the specified directory.
If the directory does not exist, tempnam() may generate a file in the system's temporary directory, and return the name of that.
Prior to PHP 4.0.6, the behaviour of the tempnam() function was system dependent.
On Windows the TMP environment variable will override the dir parameter, on Linux the TMPDIR environment variable has precedence, while SVR4 will always use your dir On Windows the TMP environment variable will override the dir parameter, on Linux the TMPDIR environment variable has precedence, while SVR4 will always use your dir parameter if the directory it points to exists.
Consult your system documentation on the tempnam( 3) function if in doubt.
Returns the new temporary filename, or the FALSE string on failure.
Example 1. tempnam() example
$tmpfname = tempnam ("/ tmp", "FOO"); $handle = fopen($tmpfname, "w"); fwrite($handle, "writing to tempfile"); fclose($handle); / / do here something unlink($tmpfname);
Note:
This function 's behavior changed in 4.0.3.
The temporary file is also created to avoid a race condition where the file might appear in the filesystem between the time the string was generated and before the the script gets around to creating the file.
Note, that you need to remove the file in case you need it no more, it is not done automatically.
See also tmpfile() and unlink().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Returns the current time measured in the number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT).
See also date().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Creates a temporary file with an unique name in write mode, returning a file handle similar to the one returned by fopen().
The file is automatically removed when closed (using fclose()), or when the script ends.
For details, consult your system documentation on the tmpfile( 3) function, as well as the stdio.h header file.
Example 1. tmpfile() example
$temp = tmpfile(); fwrite($temp, "writing to tempfile"); fclose($temp); / / this removes the file
See also tempnam().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
URL Functions
PHP Manual
Prev
Next
Attempts to set the access and modification time of the file named by filename to the value given by time.
If the option time is not given, uses the present time.
This is equivalent to what utime (sometimes referred to as utimes) does.
If the third option atime is present, the access time of the given filename is set to the value of atime.
Note that the access time is always modified, regardless of the number of parameters.
If the file does not exist, it is created.
Returns TRUE on success or FALSE on failure.
Example 1. touch() example
if (touch ($FileName)) {print "$FileName modification time has been changed to todays date and time";} else {print "Sorry Could Not change modification time of $FileName";}
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
The optional charlist parameter was added in PHP 4.1.0
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function sorts an array such that array indices maintain their correlation with the array elements they are associated with.
This is used mainly when sorting associative arrays where the actual element order is significant.
The comparison function is user-defined.
Note:
Please see usort() and uksort() for examples of user-defined comparison functions.
See also usort(), uksort(), sort(), asort(), arsort(), ksort(), and rsort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. ucfirst() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. ucwords() example
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
udm_api_version() returns mnoGoSearch API version number.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.2.0)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
udm_free_ispell_data() always returns TRUE.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
udm_load_ispell_data() loads ispell data.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function will sort the keys of an array using a user-supplied comparison function.
If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.
Example 1. uksort() example
1;} $a = array (4 = "four", 3 = "three", 20 = "twenty", 10 = "ten"); uksort ($a, "cmp"); while (list ($key, $value) = each ($a)) {echo "$key: $value\n";}
This example would display:
20: twenty 10: ten 4: four 3: three
See also usort(), uasort(), sort(), asort(), arsort(), ksort(), natsort(), and rsort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
umask() sets PHP's umask to mask 0777 and returns the old umask.
When PHP is being used as a server module, the umask is restored when each request is finished.
umask() without arguments simply returns the current umask.
Prev
Home
Next
Up
PHP Manual
Prev
Next
uniqid() returns a prefixed unique identifier based on the current time in microseconds.
The prefix can be useful for instance if you generate identifiers simultaneously on several hosts that might happen to generate the identifier at the same microsecond.
Prefix can be up to 114 characters long.
If the optional lcg parameter is TRUE, uniqid() will add additional "combined LCG "entropy at the end of the return value, which should make the results more unique.
With an empty prefix, the returned string will be 13 characters long.
If lcg is TRUE, it will be 23 characters.
Note:
The lcg parameter is only available in PHP 4 and PHP 3.0.13 and later.
If you need a unique identifier or token and you intend to give out that token to the user via the network (i.e. session cookies), it is recommended that you use something along the lines of
$token = md5( uniqid("")); / / no prefix $better_token = md5(uniqid(rand(),1)); / / better, difficult to guess
This will create a 32 character identifier (a 128 bit hex number) that is extremely difficult to predict.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Deletes filename.
Similar to the Unix C unlink() function.
Returns TRUE on success or FALSE on failure.
See also rmdir() for removing directories.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. unpack() format string
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. unserialize_callback_func example
Note:
Example 2. unserialize() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
unset() destroys the specified variables.
Example 1. unset() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
Decodes any% ## encoding in the given string.
The decoded string is returned.
Example 1. urldecode() example
$a = explode( '', $QUERY_STRING); $i = 0; while ($i count($a)) {$b = split('=', $a[$i]); echo'Value for parameter ', htmlspecialchars(urldecode($b[0])),' is', htmlspecialchars(urldecode($b[1])), "br / \n"; $i++;}
See also urlencode(), rawurlencode(), rawurldecode().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3, PHP 4)
This differs from the RFC1738 encoding (see rawurlencode()) in that for historical reasons, spaces are encoded as plus (+) signs.
Example 1. urlencode() example
Things like amp, copy and pound are parsed by the browser and the actual entity is used instead of the desired variable name.
The reference is here: http: / /www.w3.org / TR / html4 / appendix / notes.html#h-B.2.2 The reference is here: http: / /www.w3.org / TR / html4 / appendix / notes.html#h-B.2.2 PHP supports changing the argument separator to the W3C-suggested semi-colon through the arg_separator .ini directive.
A more portable way around this is to use amp; instead of as the separator.
Leave it as, but simply encode your URLs using htmlentities() (urlencode($data)).
echo 'a href="mycgi?foo=', htmlentities(urlencode($userinput)),' "';
See also urldecode(), htmlentities(), rawurldecode(), rawurlencode().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
This is an alias for the function trigger_error().
Prev
Home
Next
Up
PHP Manual
Prev
Next
A microsecond is one millionth of a second.
See also sleep() and set_time_limit().
Note:
This function does not work on Windows systems.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This function will sort an array by its values using a user-supplied comparison function.
If the array you wish to sort needs to be sorted by some non-trivial criteria, you should use this function.
The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
Note:
If two members compare as equal, their order in the sorted array is undefined.
Up to PHP 4.0.6 the user defined functions would keep the original order for those elements, but with the new sort algorithm intruduced with 4.1.0 this is no longer the case as there is no solution to do so in an efficient way.
Example 1. usort() example
1;} $a = array (3, 2, 5, 6, 1); usort ($a, "cmp"); while (list ($key, $value) = each ($a)) {echo "$key: $value\n";}
This example would display:
Note:
Obviously in this trivial case the rsort() function would be more appropriate.
Example 2. usort() example using multi-dimensional array
function cmp ($a, $b) {return strcmp($a["fruit"], $b["fruit"]);} $fruits[0]["fruit"] = "lemons"; $fruits[1]["fruit"] = "apples"; $fruits[2]["fruit"] = "grapes"; usort($fruits, "cmp"); while (list ($key, $value) = each ($fruits)) {echo "\$fruits[$key]: ". $value["fruit"]. "\n";}
When sorting a multi-dimensional array, $a and $b contain references to the first index of the array.
This example would display:
$fruits[ 0]: apples $fruits[1]: grapes $fruits[2]: lemons
Example 3. usort() example using a member function of an object
class TestObj {var $name; function TestObj($name) {$this - name = $name;} / * This is the static comparing function: * / function cmp_obj($a, $b) {$al = strtolower($a - name); $bl = strtolower($b - name); if ($al == $bl) return 0; return ($al $bl)? +1: -1;}} $a[] = new TestObj("c"); $a[] = new TestObj("b"); $a[] = new TestObj("d"); uasort($a, array ("TestObj", "cmp_obj")); foreach ($a as $item) {print $item - name ."\n";}
This example would display:
See also uasort(), uksort(), sort(), asort(), arsort(), ksort(), natsort(), and rsort().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Tip:
As with anything that outputs its result directly to the browser, you can use the output-control functions to capture the output of this function, and save it in a string (for example).
Example 1. var_dump() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. version_compare() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
virtual() is an Apache-specific function which is equivalent to !--#include virtual...- - in mod_include.
It performs an Apache sub-request.
It is useful for including CGI scripts or .shtml files, or anything else that you would parse through Apache.
Note that for a CGI script, the script must generate valid CGI headers.
At the minimum that means it must generate a Content-type header.
For PHP files, you need to use include() or require(); virtual() cannot be used to include a document which is itself a PHP file.
To run the sub-request, all buffers are terminated and flushed to the browser, pending headers are sent too.
Prev
Home
Next
Up
Array Functions
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.1.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Returns TRUE on success or FALSE on failure.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.2.0 - 4.2.3 only)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. wddx_serialize_vars() example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Example 1. wordwrap() example
Example 2. wordwrap() example
Prev
Home
Next
Up
Sybase functions
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
An error code from xml_get_error_code().
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
A reference to the XML parser to get byte index from.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
A reference to the XML parser to get column number from.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
A reference to the XML parser to get line number from.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
A reference to the XML parser to get error code from.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
A reference to the XML parser to use.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. moldb.xml - small database of molecular information
Example 2. parsemoldb.php - parses moldb.xml into and array of molecular objects
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Which character encoding the parser should use.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
A reference to the XML parser to free.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
A reference to the XML parser to get an option from.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 3 = 3.0.6, PHP 4)
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Warning
This function is currently not documented; only the argument list is available.
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
This function allows to use parser inside object.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Warning
This function is currently not documented; only the argument list is available.
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Instead of a function name, an array containing an object reference and a method name can also be supplied.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
This function is EXPERIMENTAL.
The behaviour of this function, the name of this function, and anything else documented about this function may change without notice in a future release of PHP.
Use this function at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.4)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
Example 1.
Example 2.
Example 3.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
Set the output encoding for the XSLT transformations.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
A reference to the XSLT parser.
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.3 - 4.0.6 only)
Set SAX handlers on the resource handle given by xh.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(4.0.5 - 4.0.6 only)
Set Scheme handlers on the resource handle given by xh.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.6)
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function invokes a CCL parser.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.1)
Closes connection given by id.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.1)
This function sets the element set name for retrieval.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.1)
Returns error for target (last request).
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.1)
Returns error text message for target (last request).
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 5 CVS only)
Returns value of option with the name specified.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.0.5)
This function prepares for a Z39.50 Scan Request.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Like yaz_connect() this function is non-blocking and only prepares for a search to be executed later when yaz_wait() is called.
Table 1.
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 5 CVS only)
PYP / YAZ Connection Options
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4)
Note:
This functionality was added in PHP 4.0.0.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 1. zend_version() Example
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Closes a zip file archive.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Closes a directory entry specified by zip_entry.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Opens a directory entry in a zip file for reading.
Note:
Returns TRUE on success or FALSE on failure.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Opens a new zip archive for reading.
Prev
Home
Next
Up
PHP Manual
Prev
Next
(PHP 4 = 4.1.0)
Reads the next entry in a zip file archive.
Prev
Home
Next
Up
Zlib Compression Functions
PHP Manual
Prev
Next
Prev
Home
Next
Preface
Introduction
PHP Manual
Prev
Next
PHP has come a long way in the last few years.
Growing to be one of the most prominent languages powering the Web was not an easy task.
Those of you interested in briefly seeing how PHP grew out to what it is today, read on.
PHP succeeds an older product, named PHP / FI.
PHP / FI was created by Rasmus Lerdorf in 1995, initially as a simple set of Perl scripts for tracking accesses to his online resume.
He named this set of scripts' Personal Home Page Tools'.
As more functionality was required, Rasmus wrote a much larger C implementation, which was able to communicate with databases, and enabled users to develop simple dynamic Web applications.
Rasmus chose to release the source code for PHP / FI for everybody to see, so that anybody can use it, as well as fix bugs in it and improve the code.
PHP / FI, which stood for Personal Home Page / Forms Interpreter, included some of the basic functionality of PHP as we know it today.
It had Perl-like variables, automatic interpretation of form variables and HTML embedded syntax.
The syntax itself was similar to that of Perl, albeit much more limited, simple, and somewhat inconsistent.
By 1997, PHP / FI 2.0, the second write-up of the C implementation, had a cult of several thousand users around the world (estimated), with approximately 50,000 domains reporting as having it installed, accounting for about 1% of the domains on the Internet.
PHP / FI 2.0 was officially released only in November 1997, after spending most of its life in beta releases.
It was shortly afterwards succeeded by the first alphas of PHP 3.0.
PHP 3.0 was the first version that closely resembles PHP as we know it today.
It was created by Andi Gutmans and Zeev Suraski in 1997 as a complete rewrite, after they found PHP / FI 2.0 severely underpowered for developing their own eCommerce application.
In an effort to cooperate and start building upon PHP / FI 's existing user-base, Andi, Rasmus and Zeev decided to cooperate and announce PHP 3.0 as the official successor of PHP / FI 2.0, and development of PHP / FI 2.0 was mostly halted.
One of the biggest strengths of PHP 3.0 was its strong extensibility features.
In addition to providing end users with a solid infrastructure for lots of different databases, protocols and APIs, PHP 3.0 's extensibility features attracted dozens of developers to join in and submit new extension modules.
Arguably, this was the key to PHP 3.0 's tremendous success.
Other key features introduced in PHP 3.0 were the object oriented syntax support and the much more powerful and consistent language syntax.
The whole new language was released under a new name, that removed the implication of limited personal use that the PHP / FI 2.0 name held.
It was named plain 'PHP', with the meaning being a recursive acronym - PHP:
By the end of 1998, PHP grew to an install base of tens of thousands of users (estimated) and hundreds of thousands of Web sites reporting it installed.
At its peak, PHP 3.0 was installed on approximately 10% of the Web servers on the Internet.
PHP 3.0 was officially released in June 1998, after having spent about 9 months in public testing.
By the winter of 1998, shortly after PHP 3.0 was officially released, Andi Gutmans and Zeev Suraski had begun working on a rewrite of PHP 's core.
The design goals were to improve performance of complex applications, and improve the modularity of PHP 's code base.
Such applications were made possible by PHP 3.0 's new features and support for a wide variety of third party databases and APIs, but PHP 3.0 was not designed to handle such complex applications efficiently.
The new engine, dubbed 'Zend Engine' (comprised of their first names, Zeev and Andi), met these design goals successfully, and was first introduced in mid 1999.
PHP 4.0, based on this engine, and coupled with a wide range of additional new features, was officially released in May 2000, almost two years after its predecessor, PHP 3.0.
In addition to the highly improved performance of this version, PHP 4.0 included other key features such as support for many more Web servers, HTTP sessions, output buffering, more secure ways of handling user input and several new language constructs.
PHP 4 is currently the latest released version of PHP.
Work has already begun on modifying and improving the Zend Engine to integrate the features which were designed for PHP 5.0.
Today, PHP is being used by hundreds of thousands of developers (estimated), and several million sites report as having it installed, which accounts for over 20% of the domains on the Internet.
PHP 's development team includes dozens of developers, as well as dozens others working on PHP-related projects such as PEAR and the documentation project.
The future of PHP is mainly driven by it 's core, the Zend Engine.
PHP 5 will include the new Zend Engine 2.0.
To get more information on this engine, see it 's webpage.
Prev
Home
Next
Appendixes
Up
History of PHP related projects
PHP Manual
Prev
Appendix A.
History of PHP and related projects
Next
As PHP grew, it began to be recognized as a world-wide popular development platform.
One of the most interesting ways of seeing this trend was by observing the books about PHP that came out throughout the years.
To the best of our knowledge, the first book dedicated to PHP was' PHP - tvorba interaktivních internetových aplikací '- a Czech book published in April 1999, authored by Jirka Kosek.
Next month followed a German book authored by Egon Schmid, Christian Cartus and Richard Blume.
The first book in English about PHP was published shortly afterwards, and was' Core PHP Programming 'by Leon Atkinson.
Both of these books covered PHP 3.0.
While these books were the first of their kind - they were followed by a large number of books from a host of authors and publishers.
There are over 40 books in English, 50 books in German, and over 20 books in French!
In addition, you can find books about PHP in many other languages, including Spanish, Korean, Japanese and Hebrew.
Clearly, this large number of books, written by different authors, published by many publishers, and their availability in so many languages - are a strong testimony for PHP 's world-wide success.
Prev
Home
Next
History of PHP related projects
Up
Publications about PHP
PHP Manual
Prev
Appendix A.
History of PHP and related projects
Next
To the best of our knowledge, the first article about PHP in a hard-copy magazine was published in the Czech mutation of Computerworld in the spring of 1998, and covered PHP 3.0.
As with books, this was the first in a series of many articles published about PHP in various prominent magazines.
Articles about PHP appeared in Dr.
Dobbs, Linux Enterprise, Linux Magazine and many more.
Articles about migrating ASP-based applications to PHP under Windows even appear on Microsoft 's very own MSDN!
Prev
Home
Next
Books about PHP
Up
PHP Manual
Prev
Appendix A.
History of PHP and related projects
Next
PEAR, the PHP Extension and Application Repository (originally, PHP Extension and Add-on Repository) is PHP's version of foundation classes, and may grow in the future to be one of the key ways to distribute both PHP and C-based PHP extensions among developers.
PEAR was born in discussions held in the PHP Developers' Meeting (PDM) held in January 2000 in Tel Aviv.
It was created by Stig S.
Bakken, and is dedicated to his first-born daughter, Malin Bakken.
Since early 2000, PEAR has grown to be a big, significant project with a large number of developers working on implementing common, reusable functionality for the benefit of the entire PHP community.
PEAR today includes a wide variety of infrastructure foundation classes for database access, content caching, mathematical calculations, eCommerce and much more.
The PHP Quality Assurance Initiative was set up in the summer of 2000 in response to criticism that PHP releases were not being tested well enough for production environments.
The team now consists of a core group of developers with a good understanding of the PHP code base.
These developers spend a lot of their time localizing and fixing bugs within PHP.
In addition there are many other team members who test and provide feedback on these fixes using a wide variety of platforms.
PHP-GTK is the PHP solution for writing client side GUI applications.
Andrei Zmievski remembers the planing and creation process of PHP-GTK:
GUI programming has always been of my interests, and I found that Gtk + is a very nice toolkit, except that programming with it in C is somewhat tedious.
After witnessing PyGtk and GTK-Perl implementations, I decided to see if PHP could be made to interface with Gtk+, even minimally.
Starting in August of 2000, I began to have a bit more free time so that is when I started experimenting.
My main guideline was the PyGtk implementation as it was fairly feature complete and had a nice object-oriented interface.
James Henstridge, the author of PyGtk, provided very helpful advice during those initial stages.
Hand-writing the interfaces to all the Gtk + functions was out of the question, so I seized upon the idea of code-generator, similar to how PyGtk did it.
What cannot be generated automatically can be written by hand in .overrides file.
Working on the code generator and the infrastructure took some time, because I could spend little time on PHP-GTK during the fall of 2000.
After I showed PHP-GTK to Frank Kromann, he got interested and started helping me out with code generator work and Win32 implementation.
When we wrote the first Hello World program and fired it up, it was extremely exciting.
The story promptly hit SlashDot.
Sensing that PHP-GTK might be extensive, I set up separate mailing lists and CVS repositories for it, as well as the gtk.php.net website with the help of Colin Viebrock.
The documentation would also need to be done and James Moore came in to help with that.
Since its release PHP-GTK has been gaining popularity.
We have our own documentation team, the manual keeps improving, people start writing extensions for PHP-GTK, and more and more exciting applications with it.
Prev
Home
Next
History of PHP and related projects
Up
Books about PHP
27-01-2003
Copyright © 1997, 1998, 1999, 2000, 2001, 2002, 2003 the PHP Documentation Group
Next
Preface
PHP Manual
Prev
Chapter 3.
Installation
Next
Warning
You are highly encouraged to take a look at the Apache Documentation to get a basic understanding of the Apache 2.0 Server.
Note:
Download the most recent version of Apache 2.0 and a fitting PHP version from the above mentioned places.
Example 3-6.
Note:
The recommended setup is to build Apache with the standard prefork MPM-Module.
Warning
Example 3-7.
Example 3-8.
Note:
Warning
Prev
Home
Next
Servers-Apache
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
This section contains notes and hints specific to Apache installs of PHP, both for Unix and Windows This section contains notes and hints specific to Apache installs of PHP, both for Unix and Windows versions.
We also have instructions and notes for Apache 2 on a separate page.
You can select arguments to add to the configure on line 10 below from the Complete list of configure options.
The version numbers have been omitted here, to ensure the instructions are not incorrect.
You will need to replace the 'xxx' here with the correct values from your files.
Example 3-5.
Installation Instructions (Apache Shared Module Version) for PHP 4
1. gunzip apache_xxx.tar.gz 2. tar -xvf apache_xxx.tar 3. gunzip php-xxx.tar.gz 4. tar -xvf php-xxx.tar 5. cd apache_xxx 6.. / configure --prefix= / www --enable-module=so 7. make 8. make install 9. cd.. / php-xxx 10.. / configure --with-mysql --with-apxs= / www / bin / apxs 11. make 12. make install If you decide to change your configure options after installation you only need to repeat the last three steps.
You only need to restart apache for the new module to take effect.
A recompile of Apache is not needed.
13. cp php.ini-dist / usr / local / lib / php.ini You can edit your .ini file to set PHP options.
If you prefer this file in another location, use --with-config-file-path= / path in step 10.
Edit your httpd.conf or srm.conf file and check that these lines are present and not commented out:
AddType application / x-httpd-php .php LoadModule php4_module libexec / libphp4.so You can choose any extension you wish here. .php is simply the one we suggest.
You can even include .html, and .php3 can be added for backwards compatibility.
The path on the right hand side of the LoadModule statement must point to the path of the PHP module on your system.
The above statement is correct for the steps shown above.
Use your normal procedure for starting the Apache server. (You must stop and restart the server, not just cause the server to reload by use a HUP or USR1 signal.)
Depending on your Apache install and Unix variant, there are many possible ways to stop and restart the server.
Below are some typical lines used in restarting the server, for different apache / unix installations.
You should replace / path / to / with the path to these applications on your systems.
Several Linux and SysV variants: / etc / rc.d / init.d / httpd restart 2.
Using apachectl scripts: / path / to / apachectl stop / path / to / apachectl start 3. httpdctl and httpsdctl (Using OpenSSL), similar to apachectl: / path / to / httpsdctl stop / path / to / httpsdctl start 4.
Using mod_ssl, or another SSL server, you may want to manually stop and start: / path / to / apachectl stop / path / to / apachectl startssl
Different examples of compiling PHP for apache are as follows:
This will create a libphp4.so shared library that is loaded into Apache using a LoadModule line in Apache 's httpd.conf file.
The PostgreSQL support is embedded into this libphp4.so library.
This will create a libphp4.so shared library for Apache, but it will also create a pgsql.so shared library that is loaded into PHP either by using the extension directive in php.ini file or by loading it explicitly in a script using the dl() function.
. / configure --with-apache= / path / to / apache_source --with-pgsql
This will create a libmodphp4.a library, a mod_php4.c and some accompanying files and copy this into the src / modules / php4 This will create a libmodphp4.a library, a mod_php4.c and some accompanying files and copy this into the src / modules / php4 directory in the Apache source tree.
Then you compile Apache using --activate-module=src / modules / php4 / libphp4.a and the Apache build system will create libphp4.a and link it statically into the httpd binary.
The PostgreSQL support is included directly into this httpd binary, so the final result here is a single httpd binary that includes all of Apache and all of PHP.
. / configure --with-apache= / path / to / apache_source --with-pgsql=shared
Same as before, except instead of including PostgreSQL support directly into the final httpd you will get a pgsql.so shared library that you can load into PHP from either the php.ini file or directly using dl().
When choosing to build PHP in different ways, you should consider the advantages and drawbacks of each method.
Building PHP into apache (static method) means that PHP will load and run faster.
For more information, see the Apache webpage on DSO support.
Note:
Apache 's default http.conf currently ships with a section that looks like this:
Note:
Make sure you specify the installed version of apxs when using --with-apxs= / path / to / apxs.
You must NOT use the apxs version that is in the apache sources but the one that is actually installed on your system.
There are two ways to set up PHP to work with Apache 1.3.x on Windows.
One is to use the CGI binary (php.exe), the other is to use the Apache module DLL.
In either case you need to stop the Apache server, and edit your srm.conf or httpd.conf to configure Apache to work with PHP.
It is worth noting here that now the SAPI module has been made more stable under windows, we recommend it 's use above the CGI binary, since it is more transparent and secure.
Although there can be a few variations of configuring PHP under Apache, these are simple enough to be used by the newcomer.
Please consult the Apache Docs for further configuration directives.
If you unziped the PHP package to c:\php\ as described in the Manual Installation Steps section, you need to insert these lines to your Apache configuration file to set up the CGI binary:
Warning
By using the CGI setup, your server is open to several possible attacks.
Please read our CGI security section to learn how to defend yourself from attacks.
If you would like to use PHP as a module in Apache, be sure to move php4ts.dll to the windows / system (for Windows 9x / Me) or winnt / system32 (for Windows NT / 2000 / XP) directory, overwriting any older file.
Then you should add the following two lines to you Apache conf file:
After changing the configuration file, remember to restart the server, for example, NET STOP APACHE followed by NET START APACHE, if you run Apache as a Windows Service, or use your regular shortcuts.
Note:
You may find after using the windows installer for Apache that you need to define the AddModule directive for mod_php4.c in the configuration file (httpd.conf).
This is done by adding AddModule mod_php4.c to the AddModule list, near the beginning of the configuration file.
This is especially important if the ClearModuleList directive is defined.
Failure to do this may mean PHP will not be registered as an Apache module.
There are 2 ways you can use the source code highlighting feature, however their ability to work depends on your installation.
If you have configured Apache to use PHP as an ISAPI module, then by adding the following line to your configuration file you can use this feature:
If you chose to configure Apache to use PHP as a CGI binary, you will need to use the show_source() function.
To do this simply create a PHP script file and add this code: ?php show_source ("original_php_script.php");?.
Substitute original_php_script.php with the name of the file you wish to show the source of.
Note:
On Win-Apache all backslashes in a path statement such as "c:\directory\file.ext", must be converted to forward slashes, as "c: / directory / file.ext".
Prev
Home
Next
Up
PHP Manual
Prev
Next
Before installing first, you need to know what do you want to use PHP for.
There are three main fields you can use PHP, as described in the What can PHP do? section:
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Example 3-9.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
The default is to build PHP as a CGI program.
This way you may catch a problem with PHP on your platform early instead of having to struggle with it later.
Use the max_execution_time configuration setting to control this time for your own scripts. make bench ignores the configuration file.
Prev
Home
Next
Up
Servers-Apache
PHP Manual
Prev
Chapter 3.
Installation
Next
Note:
These are only used at compile time.
Note:
These options are only used in PHP 4 as of PHP 4.1.0.
If you want to compile an older version, some options will probably not be available.
Disable GD support.
Include ming support.
Specify path to the installed AOLserver.
Prev
Home
Next
Up
Configuration
PHP Manual
Prev
Chapter 3.
Installation
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Example 3-1.
Prev
Home
Next
Installation
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Warning
Check the 'Execute' checkbox, and confirm.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
If you are unfamiliar with building and compiling your own software, it 's worth checking whether somebody has already built a packaged version of PHP with the features you need.
Example 3-2.
9. make 10. make install 11. copy and rename the php.ini-dist file to your "bin" directory from your PHP 4 source directory: cp php.ini-dist / usr / local / bin / php.ini or (if your don't have a local directory) cp php.ini-dist / usr / bin / php.ini
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Example 3-10.
Example 3-11.
Example 3-12.
Graeme Hoose (GraemeHoose@BrightStation.com) Init fn="load-modules "shlib=" / path / to / server4 / bin / libphp4.so" funcs="php4_init,php4_close,php4_execute,php4_auth_trans "Init fn="php4_init" LateInit="yes "
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Example 3-3.
Read the packages( 7) manual page for more information about binary packages on OpenBSD.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Some problems are more common than others.
If you want to get help on the mailing list, please try to be precise and give the necessary details about your environment (which operating system, what PHP version, what web server, if you are running PHP as CGI or a server module, etc.), and preferably enough code to make others able to reproduce and test your problem.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Example 3-4.
Use your normal procedure for restarting the Apache server. (You must stop and restart the server, not just cause the server to reload by use a HUP or USR1 signal.)
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Note:
Warning
This automatically working setup gives you an instantly working PHP installation, but it is not meant to be used on online servers.
Warning
You can get the latest development version using anonymous CVS, a snapshot or the most recent released source tarball.
Note:
A properly installed Cygwin environment provides the mandatory files bison.simple and bison.exe.
You must build the resolv.lib library.
Note:
In order to build the SAPI module (php4isapi.dll for integrating PHP with Microsoft IIS, set your active configuration to php4isapi-whatever-config and build the desired dll.
Note:
Note:
Table 3-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 3.
Installation
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
PHP (recursive acronym for "PHP:
Simple answer, but what does that mean?
An example:
Example 1-1.
An introductory example
html head title Example / title / head body ?php echo "Hi, I'm a PHP script !";? / body / html
Notice how this is different from a script written in other languages like Perl or C - - instead of writing a program with lots of commands to output HTML, you write an HTML script with some embedded code to do something (in this case, output some text).
The PHP code is enclosed in special start and end tags that allow you to jump into and out of "PHP mode".
What distinguishes PHP from something like client-side JavaScript is that the code is executed on the server.
If you were to have a script similar to the above on your server, the client would receive the results of running that script, with no way of determining what the underlying code may be.
You can even configure your web server to process all your HTML files with PHP, and then there 's really no way that users can tell what you have up your sleeve.
The best things in using PHP are that it is extremely simple for a newcomer, but offers many advanced features for a professional programmer.
Don' t be afraid reading the long list of PHP's features.
You can jump in, in a short time, and start writing simple scripts in a few hours.
Although PHP 's development is focused on server-side scripting, you can do much more with it.
Read on, and see more in the What can PHP do? section.
Prev
Home
Next
Getting Started
Up
What can PHP do?
PHP Manual
Prev
Chapter 1.
Introduction
Next
Anything.
PHP is mainly focused on server-side scripting, so you can do anything any other CGI program can do, such as collect form data, generate dynamic page content, or send and receive cookies.
But PHP can do much more.
There are three main fields where PHP scripts are used.
Server-side scripting.
This is the most traditional and main target field for PHP.
You need three things to make this work.
The PHP parser (CGI or server module), a webserver and a web browser.
You need to run the webserver, with a connected PHP installation.
You can access the PHP program output with a web browser, viewing the PHP page through the server.
See the installation instructions section for more information.
Command line scripting.
You can make a PHP script to run it without any server or browser.
You only need the PHP parser to use it this way.
This type of usage is ideal for scripts regularly executed using cron (on *nix or Linux) or Task Scheduler (on Windows).
These scripts can also be used for simple text processing tasks.
See the section about Command line usage of PHP for more information.
Writing client-side GUI applications.
PHP is probably not the very best language to write windowing applications, but if you know PHP very well, and would like to use some advanced PHP features in your client-side applications you can also use PHP-GTK to write such programs.
You also have the ability to write cross-platform applications this way.
PHP-GTK is an extension to PHP, not available in the main distribution.
If you are interested in PHP-GTK, visit it 's own website.
PHP can be used on all major operating systems, including Linux, many Unix variants (including HP-UX, Solaris and OpenBSD), Microsoft Windows, Mac OS X, RISC OS, and probably others.
This includes Apache, Microsoft Internet Information Server, Personal Web Server, Netscape and iPlanet servers, Oreilly Website Pro server, Caudium, Xitami, OmniHTTPd, and many others.
For the majority of the servers PHP has a module, for the others supporting the CGI standard, PHP can work as a CGI processor.
So with PHP, you have the freedom of choosing an operating system and a web server.
Furthermore, you also have the choice of using procedural programming or object oriented programming, or a mixture of them.
Although not every standard OOP feature is realized in the current version of PHP, many code libraries and large applications (including the PEAR library) are written only using OOP code.
With PHP you are not limited to output HTML.
PHP' s abilities includes outputting images, PDF files and even Flash movies (using libswf and Ming) generated on the fly.
You can also output easily any text, such as XHTML and any other XML file.
PHP can autogenerate these files, and save them in the file system, instead of printing it out, forming a server-side cache for your dynamic content.
One of the strongest and most significant feature in PHP is its support for a wide range of databases.
Writing a database-enabled web page is incredibly simple.
The following databases are currently supported:
PHP also has support for talking to other services using protocols such as LDAP, IMAP, SNMP, NNTP, POP3, HTTP, COM (on Windows) and countless others.
You can also open raw network sockets and interact using any other protocol.
PHP has support for the WDDX complex data exchange between virtually all Web programming languages.
Talking about interconnection, PHP has support for instantiation of Java objects and using them transparently as PHP objects.
You can also use our CORBA extension to access remote objects.
PHP has extremely useful text processing features, from the POSIX Extended or Perl regular expressions to parsing XML documents.
For parsing and accessing XML documents, we support the SAX and DOM standards.
You can use our XSLT extension to transform XML documents.
While using PHP in the ecommerce field, you 'll find the Cybercash payment, CyberMUT, VeriSign Payflow Pro and CCVS functions useful for your online payment programs.
At last but not least, we have many other interesting extensions, the mnoGoSearch search engine functions, the IRC Gateway functions, many compression utilities (gzip, bz2), calendar conversion, translation...
As you can see this page is not enough to list all the features and benefits PHP can offer.
Read on in the sections about installing PHP, and see the function reference part for explanation of the extensions mentioned here.
Prev
Home
Next
Introduction
Up
PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
Often you need classes with similar variables and functions to another existing class.
In fact, it is good practice to define a generic class which can be used in all your projects and adapt this class for the needs of each of your specific projects.
To facilitate this, classes can be extensions of other classes.
The extended or derived class has all variables and functions of the base class (this is called'inheritance 'despite the fact that nobody died) and what you add in the extended definition.
It is not possible to substract from a class, that is, to undefine any existing functions or variables.
An extended class is always dependent on a single base class, that is, multiple inheritance is not supported.
Classes are extended using the keyword 'extends'.
class Named_Cart extends Cart {var $owner; function set_owner ($name) {$this - owner = $name;}}
This defines a class Named_Cart that has all variables and functions of Cart plus an additional variable $owner and an additional function set_owner().
You create a named cart the usual way and can now set and get the carts owner.
You can still use normal cart functions on named carts:
$ncart = new Named_Cart; / / Create a named cart $ncart - set_owner("kris"); / / Name that cart print $ncart - owner; / / print the cart owners name $ncart - add_item("10", 1); / / (inherited functionality from cart)
This is also called a "parent-child" relationship.
You create a class, parent, and use extends to create a new class based on the parent class: the child class.
You can even use this new child class and create another class based on this child class.
Note:
Classes must be defined before they are used!
If you want the class Named_Cart to extend the class Cart, you will have to define the class Cart first.
If you want to create another class called Yellow_named_cart based on the class Named_Cart you have to define Named_Cart If you want to create another class called Yellow_named_cart based on the class Named_Cart you have to define Named_Cart first.
To make it short: the order in which the classes are defined is important.
Prev
Home
Next
Classes and Objects
Up
Constructors
PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
Caution
The following is valid for PHP 4 only.
Sometimes it is useful to refer to functions and variables in base classes or to refer to functions in classes that have not yet any instances.
The:: operator is being used for this.
class A {function example() {echo "I am the original function A::example(). br \n";}} class B extends A {function example() {echo "I am the redefined function B::example(). br \n"; A::example();}} / / there is no object of class A. / / this will print / / I am the original function A::example(). br A::example(); / / create an object of class B. $b = new B; / / this will print / / I am the redefined function B::example(). br / / I am the original function A::example(). br $b - example();
Instead we call example() as a'class function ', that is, as a function of the class itself, not any object of that class.
There are class functions, but there are no class variables.
In fact, there is no object at all at the time of the call.
Thus, a class function may not use any object variables (but it can use local and global variables), and it may no use $this at all.
In the above example, class B redefines the function example().
The original definition in class A is shadowed and no longer available, unless you are refering specifically to the implementation of example() in class A using the ::-operator.
Write A::example() to do this (in fact, you should be writing parent::example(), as shown in the next section).
In this context, there is a current object and it may have object variables.
Thus, when used from WITHIN an object function, you may use $this and object variables.
Prev
Home
Next
Constructors
Up
PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
You may find yourself writing code that refers to variables and functions in base classes.
This is particularly true if your derived class is a refinement or specialisation of code in your base class.
Instead of using the literal name of the base class in your code, you should be using the special name parent, which refers to the name of your base class as given in the extends Instead of using the literal name of the base class in your code, you should be using the special name parent, which refers to the name of your base class as given in the extends declaration of your class.
Should your inheritance tree change during implementation, the change is easily made by simply changing the extends declaration of your class.
class A {function example() {echo "I am A::example() and provide basic functionality. br \n";}} class B extends A {function example() {echo "I am B::example() and provide additional functionality. br \n"; parent::example();}} $b = new B; / / This will call B::example(), which will in turn call A::example(). $b - example();
Prev
Home
Next
Up
Serializing objects - objects in sessions
PHP Manual
Prev
Next
Prev
Home
Next
Keeping Current
Basic syntax
PHP Manual
Prev
Chapter 6.
Basic syntax
Next
PHP supports' C', 'C++ 'and Unix shell-style comments.
For example:
?php echo "This is a test"; / / This is a one-line c+ + style comment / * This is a multi line comment yet another line of comment * / echo "This is yet another test"; echo "One Final Test"; # This is shell-style style comment?
The "one-line" comment styles actually only comment to the end of the line or the current block of PHP code, whichever comes first.
h1 This is an ?php # echo "simple";? example. / h1 p The header above will say'This is an example '.
You should be careful not to nest 'C' style comments, which can happen when commenting out large blocks.
?php / * echo "This is a test"; / * This comment will cause a problem * / * /?
The one-line comment styles actually only comment to the end of the line or the current block of PHP code, whichever comes first.
This means that HTML code after / /?
WILL be printed:? skips out of the PHP mode and returns to HTML mode, and / / cannot influence that.
Prev
Home
Next
Instruction separation
Up
Types
PHP Manual
Prev
Next
When PHP parses a file, it simply passes the text of the file through until it encounters one of the special tags which tell it to start interpreting the text as PHP code.
The parser then executes all the code it finds, up until it runs into a PHP closing tag, which tells the parser to just start passing the text through again.
This is the mechanism which allows you to embed PHP code inside HTML: everything outside the PHP tags is left utterly alone, while everything inside is parsed as code.
There are four sets of tags which can be used to denote blocks of PHP code.
Of these, only two (?php...? and script language="php "... / script) are always available; the others can be turned on or off from the php.ini Of these, only two (?php...? and script language="php"... / script) are always available; the others can be turned on or off from the php.ini configuration file.
While the short-form tags and ASP-style tags may be convenient, they are not as portable as the longer versions.
Also, if you intend to embed PHP code in XML or XHTML, you will need to use the ?php...? form to conform to the XML.
The tags supported by PHP are:
Example 6-1.
Ways of escaping from HTML
1. ?php echo( "if you want to serve XHTML or XML documents, do like this\n");?
2.? echo ("this is the simplest, an SGML processing instruction\n");? ?= expression?
This is a shortcut for "? echo expression?" 3. script language="php "echo ("some editors (like FrontPage) don't like processing instructions"); / script 4.% echo ("You may optionally use ASP-style tags");% %= $variable; # This is a shortcut for"% echo... "%
The first way, ?php...?, is the preferred method, as it allows the use of PHP in XML-conformant code such as XHTML.
The second way is not available always.
Short tags are available only when they have been enabled.
This can be done via the short_tags() function (PHP 3 only), by enabling the short_open_tag configuration setting in the PHP config file, or by compiling PHP with the --enable-short-tags option to configure.
Even if it is enabled by default in php.ini-dist, use of short tags are discouraged.
The fourth way is only available if ASP-style tags have been enabled using the asp_tags configuration setting.
Note:
Support for ASP-style tags was added in 3.0.4.
Note:
Using short tags should be avoided when developing applications or libraries that are meant for redistribution, or deployment on PHP servers which are not under your control, because short tags may not be supported on the target server.
For portable, redistributable code, be sure not to use short tags.
The closing tag for the block will include the immediately trailing newline if one is present.
Also, the closing tag automatically implies a semicolon; you do not need to have a semicolon terminating the last line of a PHP block.
PHP allows you to use structures like this:
Example 6-2.
Advanced escaping
?php if ($expression) {? strong This is true. / strong ?php} else {? strong This is false. / strong ?php}?
Prev
Home
Next
Language Reference
Up
Instruction separation
PHP Manual
Prev
Chapter 6.
Basic syntax
Next
Instructions are separated the same as in C or Perl - terminate each statement with a semicolon.
The closing tag (?) also implies the end of the statement, so the following are equivalent:
?php echo "This is a test";? ?php echo "This is a test"?
Prev
Home
Next
Basic syntax
Up
Comments
PHP Manual
Prev
Next
A constant is a identifier (name) for a simple value.
As the name suggests, that value cannot change during the execution of the script (except the magic constants As the name suggests, that value cannot change during the execution of the script (except the magic constants which aren't actually constants).
A constant is case-sensitive by default.
By convention constant identifiers are always uppercase.
The name of a constant follows the same rules as any label in PHP.
A valid constant name starts with a letter or underscore, followed by any number of letters, numbers, or underscores.
As a regular expression, it would be expressed thus: [a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff ]*
Note:
For our purposes here, a letter is a-z, A-Z, and the ASCII characters from 127 through 255 (0x7f-0xff).
The scope of a constant is global--you can access it anywhere in your script without regard to scope.
You can define a constant by using the define() -function.
Once a constant is defined, it can never be changed or undefined.
Only scalar data (boolean, integer, float and string) can be contained in constants.
You can get the value of a constant by simply specifying its name.
Unlike with variables, you should not prepend a constant with a $.
You can also use the function constant(), to read a constant's value, if you are to obtain the constant's name dynamically.
Use get_defined_constants() to get a list of all defined constants.
Note:
Constants and (global) variables are in a different namespace.
This implies that for example TRUE and $TRUE are generally different.
If you use an undefined constant, PHP assumes that you mean the name of the constant itself.
A notice will be issued when this happens.
Use the defined() -function if you want to know if a constant is set.
These are the differences between constants and variables:
Constants do not have a dollar sign ($) before them;
Constants may only be defined using the define() function, not by simple assignment;
Constants may be defined and accessed anywhere without regard to variable scoping rules;
Constants may not be redefined or undefined once they have been set; and
Constants may only evaluate to scalar values.
Example 9-1.
Defining Constants
?php define( "CONSTANT", "Hello world ."); echo CONSTANT; / / outputs "Hello world. "echo Constant; / / outputs "Constant" and issues a notice.?
Prev
Home
Next
Variables from outside PHP
Up
Predefined constants
PHP Manual
Prev
Chapter 9.
Constants
Next
PHP provides a large number of predefined constants to any script which it runs.
There are four magical constants that change depending on where they 're used.
These special constants are case-insensitive and are as follows:
A list of predefined constants is available in the section Reserved predefined constants.
Prev
Home
Next
Constants
Up
Expressions
PHP Manual
Prev
Next
Expressions are the most important building stones of PHP.
In PHP, almost anything you write is an expression.
The simplest yet most accurate way to define an expression is "anything that has a value".
The most basic forms of expressions are constants and variables.
When you type "$a = 5", you're assigning '5 'into $a. '5', obviously, has the value 5, or in other words '5' is an expression with the value of 5 (in this case, '5 'is an integer constant).
After this assignment, you' d expect $a's value to be 5 as well, so if you wrote $b = $a, you'd expect it to behave just as if you wrote $b = 5.
In other words, $a is an expression with the value of 5 as well.
If everything works right, this is exactly what will happen.
Slightly more complex examples for expressions are functions.
For instance, consider the following function:
Assuming you' re familiar with the concept of functions (if you're not, take a look at the chapter about functions), you'd assume that typing $c = foo() is essentially just like writing $c = 5, and you're right.
Functions are expressions with the value of their return value.
Since foo() returns 5, the value of the expression'foo() 'is 5.
Usually functions don 't just return a static value but compute something.
Of course, values in PHP don' t have to be integers, and very often they aren't.
PHP supports three scalar value types: integer values, floating point values and string values (scalar values are values that you can't'break 'into smaller pieces, unlike arrays, for instance).
PHP also supports two composite (non-scalar) types: arrays and objects.
Each of these value types can be assigned into variables or returned from functions.
So far, users of PHP / FI 2 shouldn 't feel any change.
However, PHP takes expressions much further, in the same way many other languages do.
PHP is an expression-oriented language, in the sense that almost everything is an expression.
Consider the example we' ve already dealt with, '$a = 5 '.
It' s easy to see that there are two values involved here, the value of the integer constant '5 ', and the value of $a which is being updated to 5 as well.
But the truth is that there' s one additional value involved here, and that's the value of the assignment itself.
The assignment itself evaluates to the assigned value, in this case 5.
In practice, it means that '$a = 5', regardless of what it does, is an expression with the value 5.
Thus, writing something like '$b = ($a = 5)' is like writing '$a = 5; $b = 5; '(a semicolon marks the end of a statement).
Since assignments are parsed in a right to left order, you can also write '$b = $a = 5'.
Another good example of expression orientation is pre - and post-increment and decrement.
Users of PHP / FI 2 and many other languages may be familiar with the notation of variable+ + and variable--.
These are increment and decrement operators.
In PHP / FI 2, the statement '$a++' has no value (is not an expression), and thus you can't assign it or use it in any way.
PHP enhances the increment / decrement capabilities by making these expressions as well, like in C.
In PHP, like in C, there are two types of increment - pre-increment and post-increment.
Both pre-increment and post-increment essentially increment the variable, and the effect on the variable is idential.
The difference is with the value of the increment expression.
Pre-increment, which is written '++$variable', evaluates to the incremented value (PHP increments the variable before reading its value, thus the name'pre-increment').
Post-increment, which is written '$variable++' evaluates to the original value of $variable, before it was incremented (PHP increments the variable after reading its value, thus the name'post-increment').
A very common type of expressions are comparison expressions.
These expressions evaluate to either 0 or 1, meaning FALSE or TRUE (respectively).
PHP supports (bigger than), = (bigger than or equal to), == (equal), != (not equal), (smaller than) and = (smaller than or equal to).
These expressions are most commonly used inside conditional execution, such as if statements.
The last example of expressions we 'll deal with here is combined operator-assignment expressions.
You already know that if you want to increment $a by 1, you can simply write '$a++' or '++$a '.
But what if you want to add more than one to it, for instance 3?
You could write '$a++' multiple times, but this is obviously not a very efficient or comfortable way.
A much more common practice is to write '$a = $a + 3'. '$a + 3' evaluates to the value of $a plus 3, and is assigned back into $a, which results in incrementing $a by 3.
In PHP, as in several other languages like C, you can write this in a shorter way, which with time would become clearer and quicker to understand as well.
Adding 3 to the current value of $a can be written '$a += 3'.
In addition to being shorter and clearer, this also results in faster execution.
The value of '$a += 3', like the value of a regular assignment, is the assigned value.
Notice that it is NOT 3, but the combined value of $a plus 3 (this is the value that's assigned into $a).
Any two-place operator can be used in this operator-assignment mode, for example '$a -= 5' (subtract 5 from the value of $a), '$b *= 7 '(multiply the value of $b by 7), etc.
There is one more expression that may seem odd if you haven 't seen it in other languages, the ternary conditional operator:
$first? $second: $third
The following example should help you understand pre - and post-increment and expressions in general a bit better:
function double( $i) {return $i*2;} $b = $a = 5; / * assign the value five into the variable $a and $b * / $c = $a++; / * post-increment, assign original value of $a (5) to $c * / $e = $d = ++$b; / * pre-increment, assign the incremented value of $b (6) to $d and $e * / / * at this point, both $d and $e are equal to 6 * / $f = double($d++); / * assign twice the value of $d emphasis before / emphasis the increment, 2*6 = 12 to $f * / $g = double(++$e); / * assign twice the value of $e emphasis after / emphasis the increment, 2*7 = 14 to $g * / $h = $g += 10; / * first, $g is incremented by 10 and ends with the value of 24. the value of the assignment (24) is then assigned into $h, and $h ends with the value of 24 as well. * /
In the beginning of the chapter we said that we 'll be describing the various statement types, and as promised, expressions can be statements.
However, not every expression is a statement.
In this case, a statement has the form of 'expr' ';' that is, an expression followed by a semicolon.
In '$b=$a=5 ;', $a=5 is a valid expression, but it's not a statement by itself. '$b=$a=5;' however is a valid statement.
One last thing worth mentioning is the truth value of expressions.
In many events, mainly in conditional execution and loops, you 're not interested in the specific value of the expression, but only care about whether it means TRUE or FALSE.
The constants TRUE and FALSE The constants TRUE and FALSE (case-insensitive) are the two possible boolean values.
When necessary, an expression is automatically converted to boolean.
See the section about type-casting for details about how.
PHP provides a full and powerful implementation of expressions, and documenting it entirely goes beyond the scope of this manual.
The above examples should give you a good idea about what expressions are and how you can construct useful expressions.
Throughout the rest of this manual we 'll write expr to indicate any valid PHP expression.
Prev
Home
Next
Predefined constants
Up
Operators
PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
Caution
In PHP 3 and PHP 4 constructors behave differently.
The PHP 4 semantics are strongly preferred.
Constructors are functions in a class that are automatically called when you create a new instance of a class with new.
In PHP 3, a function becomes a constructor when it has the same name as the class.
In PHP 4, a function becomes a constructor, when it has the same name as the class it is defined in - the difference is subtle, but crucial (see below).
/ / Works in PHP 3 and PHP 4. class Auto_Cart extends Cart {function Auto_Cart() {$this - add_item ("10", 1);}}
This defines a class Auto_Cart that is a Cart plus a constructor which initializes the cart with one item of article number "10" each time a new Auto_Cart is being made with "new ".
Constructors can take arguments and these arguments can be optional, which makes them much more useful.
To be able to still use the class without parameters, all parameters to constructors should be made optional by providing default values.
/ / Works in PHP 3 and PHP 4. class Constructor_Cart extends Cart {function Constructor_Cart($item = "10", $num = 1) {$this - add_item ($item, $num);}} / / Shop the same old boring stuff. $default_cart = new Constructor_Cart; / / Shop for real... $different_cart = new Constructor_Cart("20", 17);
You also can use the @ operator to mute errors occuring in the constructor, e.g. @new.
Caution
In PHP 3, derived classes and constructors have a number of limitations.
The following examples should be read carefully to understand these limitations.
class A {function A() {echo "I am the constructor of A. br \n";}} class B extends A {function C() {echo "I am a regular function. br \n";}} / / no constructor is being called in PHP 3. $b = new B;
In PHP 3, no constructor is being called in the above example.
The rule in PHP 3 is: 'A constructor is a function of the same name as the class.'.
The name of the class is B, and there is no function called B() in class B.
Nothing happens.
This is fixed in PHP 4 by introducing another rule:
If a class has no constructor, the constructor of the base class is being called, if it exists.
The above example would have printed 'I am the constructor of A. br' in PHP 4.
class A {function A() {echo "I am the constructor of A. br \n";} function B() {echo "I am a regular function named B in class A. br \n"; echo "I am not a constructor in A. br \n";}} class B extends A {function C() {echo "I am a regular function. br \n";}} / / This will call B() as a constructor. $b = new B;
In PHP 3, the function B() in class A will suddenly become a constructor in class B, although it was never intended to be.
The rule in PHP 3 is: 'A constructor is a function of the same name as the class.'.
PHP 3 does not care if the function is being defined in class B, or if it has been inherited.
This is fixed in PHP 4 by modifying the rule to: 'A constructor is a function of the same name as the class it is being defined in.'.
Thus in PHP 4, the class B would have no constructor function of its own and the constructor of the base class would have been called, printing 'I am the constructor of A. br'.
Caution
Neither PHP 3 nor PHP 4 call constructors of the base class automatically from a constructor of a derived class.
It is your responsibility to propagate the call to constructors upstream where appropriate.
Note:
There are no destructors in PHP 3 or PHP 4.
You may use register_shutdown_function() instead to simulate most effects of destructors.
Destructors are functions that are called automatically when an object is destroyed, either with unset() or by simply going out of scope.
There are no destructors in PHP.
Prev
Home
Next
Up
PHP Manual
Prev
Next
A class is a collection of variables and functions working with these variables.
A class is defined using the following syntax:
?php class Cart {var $items; / / Items in our shopping cart / / Add $num articles of $artnr to the cart function add_item ($artnr, $num) {$this - items[$artnr] += $num;} / / Take $num articles of $artnr out of the cart function remove_item ($artnr, $num) {if ($this - items[$artnr] $num) {$this - items[$artnr] -= $num; return true;} else {return false;}}}?
This defines a class named Cart that consists of an associative array of articles in the cart and two functions to add and remove items from this cart.
Caution
The following cautionary notes are valid for PHP 4.
The name stdClass is used interally by Zend and is reserved.
You cannot have a class named stdClass in PHP.
The function names __sleep and __wakeup The function names __sleep and __wakeup are magical in PHP classes.
You cannot have functions with these names in any of your classes unless you want the magic functionality associated with them.
See below for more information.
PHP reserves all function names starting with __ as magical.
It is recommended that you do not use function names with __ in PHP unless you want some documented magic functionality.
Note:
In PHP 4, only constant initializers for var variables are allowed.
To initialize variables with non-constant values, you need an initialization function which is called automatically when an object is being constructed from the class.
Such a function is called a constructor (see below).
?php / * None of these will work in PHP 4. * / class Cart {var $todays_date = date("Y-m-d"); var $name = $firstname; var $owner = 'Fred '. 'Jones'; var $items = array("VCR", "TV");} / * This is how it should be done. * / class Cart {var $todays_date; var $name; var $owner; var $items; function Cart() {$this - todays_date = date("Y-m-d"); $this - name = $GLOBALS['firstname']; / * etc... * /}}?
Classes are types, that is, they are blueprints for actual variables.
You have to create a variable of the desired type with the new operator.
?php $cart = new Cart; $cart - add_item("10", 1); $another_cart = new Cart; $another_cart - add_item("0815", 3);
This creates the objects $cart and $another_cart, both of the class Cart.
The function add_item() of the $cart object is being called to add 1 item of article number 10 to the $cart.
3 items of article number 0815 are being added to $another_cart.
Both, $cart and $another_cart, have functions add_item(), remove_item() and a variable items.
These are distinct functions and variables.
You can think of the objects as something similar to directories in a filesystem.
In a filesystem you can have two different files README.TXT, as long as they are in different directories.
Just like with directories where you 'll have to type the full pathname in order to reach each file from the toplevel directory, you have to specify the complete name of the function you want to call:
In PHP terms, the toplevel directory would be the global namespace, and the pathname separator would be -.
Thus, the names $cart - items and $another_cart - items name two different variables.
Note that the variable is named $cart - items, not $cart - $items, that is, a variable name in PHP has only a single dollar sign.
/ / correct, single $$cart - items = array( "10 "= 1); / / invalid, because $cart - $items becomes $cart -" "$cart - $items = array("10" = 1); / / correct, but may or may not be what was intended: / / $cart - $myvar becomes $cart - items $myvar = 'items'; $cart - $myvar = array("10 "= 1);
Within a class definition, you do not know under which name the object will be accessible in your program: at the time the Cart class was written, it was unknown that the object will be named $cart or $another_cart later.
Thus, you cannot write $cart - items within the Cart class itself.
Instead, in order to be able to access it' s own functions and variables from within a class, one can use the pseudo-variable $this which can be read as'my own 'or'current object'.
Thus, '$this - items[$artnr] += $num' can be read as'add $num to the $artnr counter of my own items array 'or'add $num to the $artnr counter of the items array within the current object'.
Note:
There are some nice functions to handle classes and objects.
You might want to take a look at the Class / Object Functions
Prev
Home
Next
Variable functions
Up
PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
serialize() checks if your class has a function with the magic name __sleep.
If so, that function is being run prior to any serialization.
It can clean up the object and is supposed to return an array with the names of all variables of that object that should be serialized.
The intended use of __sleep is to close any database connections that object may have, committing pending data or perform similar cleanup tasks.
Also, the function is useful if you have very large objects which need not be saved completely.
Conversely, unserialize() checks for the presence of a function with the magic name __wakeup.
If present, this function can reconstruct any resources that object may have.
The intended use of __wakeup is to reestablish any database connections that may have been lost during serialization and perform other reinitialization tasks.
Prev
Home
Next
Serializing objects - objects in sessions
Up
References inside the constructor
PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
Creating references within the constructor can lead to confusing results.
This tutorial-like section helps you to avoid problems.
class Foo {function Foo($name) {/ / create a reference inside the global array $globalref global $globalref; $globalref[] = $this; / / set name to passed value $this - setName($name); / / and put it out $this - echoName();} function echoName() {echo "br ",$this - name;} function setName($name) {$this - name = $name;}}
Let us check out if there is a difference between $bar1 which has been created using the copy = operator and $bar2 which has been created using the reference = operator...
$bar1 = new Foo( 'set in constructor'); $bar1 - echoName(); $globalref[0] - echoName(); / * output: set in constructor set in constructor set in constructor * / $bar2 = new Foo('set in constructor'); $bar2 - echoName(); $globalref[1] - echoName(); / * output: set in constructor set in constructor set in constructor * /
Apparently there is no difference, but in fact there is a very significant one: $bar1 and $globalref[ 0] are _NOT_ referenced, they are NOT the same variable.
This is because "new" does not return a reference by default, instead it returns a copy.
Note:
There is no performance loss (since PHP 4 and up use reference counting) returning copies instead of references.
On the contrary it is most often better to simply work with copies instead of references, because creating references takes some time where creating copies virtually takes no time (unless none of them is a large array or object and one of them gets changed and the other(s) one(s) subsequently, then it would be wise to use references to change them all concurrently).
/ / now we will change the name. what do you expect? / / you could expect that both $bar1 and $globalref[ 0] change their names... $bar1 - setName('set from outside'); / / as mentioned before this is not the case. $bar1 - echoName(); $globalref[0] - echoName(); / * output: set from outside set in constructor * / / / let us see what is different with $bar2 and $globalref[1] $bar2 - setName('set from outside'); / / luckily they are not only equal, they are the same variable / / thus $bar2 - name and $globalref[1] - name are the same too $bar2 - echoName(); $globalref[1] - echoName(); / * output: set from outside set from outside * /
Another final example, try to understand it.
class A {function A($i) {$this - value = $i; / / try to figure out why we do not need a reference here $this - b = new B($this);} function createRef() {$this - c = new B($this);} function echoValue() {echo "br" ,"class ",get_class($this) ,': ',$this - value;}} class B {function B ($a) {$this - a = $a;} function echoValue() {echo "br" ,"class ",get_class($this) ,': ',$this - a - value;}} / / try to undestand why using a simple copy here would yield / / in an undesired result in the *-marked line $a = new A(10); $a - createRef(); $a - echoValue(); $a - b - echoValue(); $a - c - echoValue(); $a - value = 11; $a - echoValue(); $a - b - echoValue(); / / * $a - c - echoValue(); / * output: class A:
10 class B:
10 class B:
10 class A:
11 class B:
11 class B:
Prev
Home
Next
The magic functions __sleep and __wakeup
Up
References Explained
PHP Manual
Prev
Chapter 14.
Classes and Objects
Next
Note:
In PHP 3, objects will lose their class association throughout the process of serialization and unserialization.
The resulting variable is of type object, but has no class and no methods, thus it is pretty useless (it has become just like an array with a funny syntax).
Caution
The following information is valid for PHP 4 only.
serialize() returns a string containing a byte-stream representation of any value that can be stored in PHP. unserialize() can use this string to recreate the original variable values.
Using serialize to save an object will save all variables in an object.
The functions in an object will not be saved, only the name of the class.
In order to be able to unserialize() an object, the class of that object needs to be defined.
That is, if you have an object $a of class A on page1.php and serialize this, you 'll get a string that refers to class A and contains all values of variabled contained in $a.
If you want to be able to unserialize this on page2.php, recreating $a of class A, the definition of class A must be present in page2.php.
This can be done for example by storing the class defintion of class A in an include file and including this file in both page1.php and page2.php.
classa.inc: class A {var $one = 1; function show_one() {echo $this - one;}} page1.php: include("classa.inc"); $a = new A; $s = serialize($a); / / store $s somewhere where page2.php can find it. $fp = fopen("store", "w"); fputs($fp, $s); fclose($fp); page2.php: / / this is needed for the unserialize to work properly. include("classa.inc"); $s = implode("", @file("store")); $a = unserialize($s); / / now use the function show_one() of the $a object. $a - show_one();
If you are using sessions and use session_register() to register objects, these objects are serialized automatically at the end of each PHP page, and are unserialized automatically on each of the following pages.
This basically means that these objects can show up on any of your pages once they become part of your session.
It is strongly recommended that you include the class definitions of all such registered objects on all of your pages, even if you do not actually use these classes on all of your pages.
If you don 't and an object is being unserialized without its class definition being present, it will lose its class association and become an object of class stdClass without any functions available at all, that is, it will become quite useless.
So if in the example above $a became part of a session by running session_register( "a"), you should include the file classa.inc on all of your pages, not only page1.php and page2.php.
Prev
Home
Next
Up
The magic functions __sleep and __wakeup
PHP Manual
Prev
Chapter 11.
Operators
Next
Remember basic arithmetic from school?
These work just like those.
Table 11-2.
Arithmetic Operators
Example
Name
Result
Addition
Sum of $a and $b.
Subtraction
Difference of $a and $b.
Multiplication
Product of $a and $b.
Division
Quotient of $a and $b.
Modulus
Remainder of $a divided by $b.
The division operator ("/") returns a float value anytime, even if the two operands are integers (or strings that get converted to integers).
Prev
Home
Next
Operators
Up
Assignment Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
The only array operator in PHP is the + operator.
It appends the right handed array to the left handed, whereas duplicated keys are NOT overwritten.
$a = array( "a "= "apple", "b" = "banana"); $b = array("a "= "pear", "b" = "strawberry", "c "= "cherry"); $c = $a + $b; var_dump($c);
array( 3) {["a"]= string(5) "apple "["b"]= string(6) "banana" ["c"]= string(6) "cherry "}
Prev
Home
Next
String Operators
Up
Control Structures
PHP Manual
Prev
Chapter 11.
Operators
Next
The basic assignment operator is "=".
Your first inclination might be to think of this as "equal to".
Don 't.
It really means that the the left operand gets set to the value of the expression on the rights (that is, "gets set to").
The value of an assignment expression is the value assigned.
That is, the value of "$a = 3" is 3.
This allows you to do some tricky things:
$a = ($b = 4) + 5; / / $a is equal to 9 now, and $b has been set to 4.
In addition to the basic assignment operator, there are "combined operators" for all of the binary arithmetic and string operators that allow you to use a value in an expression and then set its value to the result of that expression.
For example:
$a = 3; $a += 5; / / sets $a to 8, as if we had said: $a = $a + 5; $b = "Hello "; $b .= "There !"; / / sets $b to "Hello There !", just like $b = $b. "There !";
Note that the assignment copies the original variable to the new one (assignment by value), so changes to one will not affect the other.
This may also have relevance if you need to copy something like a large array inside a tight loop.
PHP 4 supports assignment by reference, using the $var = $othervar; syntax, but this is not possible in PHP 3. 'Assignment by reference 'means that both variables end up pointing at the same data, and nothing is copied anywhere.
To learn more about references, please read References explained.
Prev
Home
Next
Arithmetic Operators
Up
Bitwise Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
Bitwise operators allow you to turn specific bits within an integer on or off.
If both the left - and right-hand parameters are strings, the bitwise operator will operate on the characters in this string.
?php echo 12 ^ 9; / / Outputs '5 'echo "12 "^ "9"; / / Outputs the Backspace character (ascii 8) / / ('1' (ascii 49)) ^ ('9 '(ascii 57)) = #8 echo "hallo" ^ "hello"; / / Outputs the ascii values #0 #4 #0 #0 #0 / / 'a' ^ 'e '= #4?
Table 11-3.
Bitwise Operators
Example
Name
Result
And
Bits that are set in both $a and $b are set.
Or
Bits that are set in either $a or $b are set.
Xor
Bits that are set in $a or $b but not both are set.
Not
Bits that are set in $a are not set, and vice versa.
Shift left
Shift the bits of $a $b steps to the left (each step means "multiply by two")
Shift right
Shift the bits of $a $b steps to the right (each step means "divide by two")
Prev
Home
Next
Assignment Operators
Up
Comparison Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
Comparison operators, as their name implies, allow you to compare two values.
Table 11-4.
Comparison Operators
Example
Name
Result
Equal
TRUE if $a is equal to $b.
Identical
TRUE if $a is equal to $b, and they are of the same type. (PHP 4 only)
Not equal
TRUE if $a is not equal to $b.
Not equal
TRUE if $a is not equal to $b.
Not identical
TRUE if $a is not equal to $b, or they are not of the same type. (PHP 4 only)
Less than
TRUE if $a is strictly less than $b.
Greater than
TRUE if $a is strictly greater than $b.
Less than or equal to
TRUE if $a is less than or equal to $b.
Greater than or equal to
TRUE if $a is greater than or equal to $b.
Another conditional operator is the "?:" (or ternary) operator, which operates as in C and many other languages.
Prev
Home
Next
Bitwise Operators
Up
Error Control Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
PHP supports one error control operator: the at sign (@).
When prepended to an expression in PHP, any error messages that might be generated by that expression will be ignored.
If the track_errors feature is enabled, any error message generated by the expression will be saved in the variable $php_errormsg.
This variable will be overwritten on each error, so check early if you want to use it.
?php / * Intentional file error * / $my_file = @file ('non_existent_file') or die ("Failed opening file: error was '$php_errormsg'"); / / this works for any expression, not just functions: $value = @$cache[$key]; / / will not issue a notice if the index $key doesn't exist.?
Note:
The @-operator works only on expressions.
A simple rule of thumb is: if you can take the value of something, you can prepend the @ operator to it.
For instance, you can prepend it to variables, function and include() calls, constants, and so forth.
You cannot prepend it to function or class definitions, or conditional structures such as if and foreach, and so forth.
See also error_reporting().
Note:
The "@" error-control operator prefix will not disable messages that are the result of parse errors.
Warning
Currently the "@" error-control operator prefix will even disable error reporting for critical errors that will terminate script execution.
Among other things, this means that if you use "@" to suppress errors from a certain function and either it isn't available or has been mistyped, the script will die right there with no indication as to why.
Prev
Home
Next
Comparison Operators
Up
Execution Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
PHP supports one execution operator: backticks (``).
Note that these are not single-quotes!
PHP will attempt to execute the contents of the backticks as a shell command; the output will be returned (i.e., it won't simply be dumped to output; it can be assigned to a variable).
Note:
The backtick operator is disabled when safe mode is enabled or shell_exec() is disabled.
See also escapeshellcmd(), exec(), passthru(), popen(), shell_exec(), and system().
Prev
Home
Next
Error Control Operators
Up
Incrementing / Decrementing Operators
PHP Manual
Prev
Next
For example, in the expression 1 + 5 * 3, the answer is 16 and not 18 because the multiplication ("*") operator has a higher precedence than the addition ("+") operator.
The following table lists the precedence of operators with the lowest-precedence operators listed first.
Operator Precedence
! ~ + + - - (int) (float) (string) (array) (object) @
Although! has a higher precedence than =, PHP will still allow expressions similar to the following: if (!$a = foo()), in which case the output from foo() is put into $a.
Prev
Home
Next
Expressions
Up
Arithmetic Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
PHP supports C-style pre - and post-increment and decrement operators.
Table 11-5.
Increment / decrement Operators
Example
Name
Effect
Pre-increment
Increments $a by one, then returns $a.
Post-increment
Returns $a, then increments $a by one.
Pre-decrement
Decrements $a by one, then returns $a.
Post-decrement
Returns $a, then decrements $a by one.
Here 's a simple example script:
?php echo "h3 Postincrement / h3"; $a = 5; echo "Should be 5: ". $a+ +." br / \n"; echo "Should be 6: ". $a." br / \n"; echo "h3 Preincrement / h3"; $a = 5; echo "Should be 6: ". ++$a." br / \n"; echo "Should be 6: ". $a." br / \n"; echo "h3 Postdecrement / h3"; $a = 5; echo "Should be 5: ". $a- -." br / \n"; echo "Should be 4: ". $a." br / \n"; echo "h3 Predecrement / h3"; $a = 5; echo "Should be 4: ". --$a." br / \n"; echo "Should be 4: ". $a." br / \n";?
Prev
Home
Next
Execution Operators
Up
Logical Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
Table 11-6.
Logical Operators
Example
Name
Result
And
TRUE if both $a and $b are TRUE.
Or
TRUE if either $a or $b is TRUE.
Xor
TRUE if either $a or $b is TRUE, but not both.
Not
TRUE if $a is not TRUE.
And
TRUE if both $a and $b are TRUE.
Or
TRUE if either $a or $b is TRUE.
The reason for the two different variations of "and" and "or "operators is that they operate at different precedences. (See Operator Precedence.)
Prev
Home
Next
Incrementing / Decrementing Operators
Up
String Operators
PHP Manual
Prev
Chapter 11.
Operators
Next
There are two string operators.
The first is the concatenation operator ('.'), which returns the concatenation of its right and left arguments.
The second is the concatenating assignment operator ('.='), which appends the argument on the right side to the argument on the left side.
Please read Assignment Operators for more information.
$a = "Hello"; $b = $a. "World !"; / / now $b contains "Hello World! "$a = "Hello"; $a .= "World !"; / / now $a contains "Hello World! "
Prev
Home
Next
Logical Operators
Up
Array Operators
PHP Manual
Prev
Chapter 7.
Types
Next
mixed indicates that a parameter may accept multiple (but not necesseraly all) types.
gettype() for example will accept all PHP types, while str_replace() will accept strings and arrays.
number indicates that a parameter can be either integer or float.
Some functions like call_user_function() or usort() accept user defined callback functions as a parameter.
Example 7-11.
Callback function examples
?php / / simple callback example function foobar() {echo "hello world !";} call_user_function("foobar"); / / method callback examples class foo {function bar() {echo "hello world !";}} $foo = new foo; call_user_function(array($foo, "bar")); / / object method call call_user_function(array("foo", "bar")); / / static class method call?
Prev
Home
Next
Up
Type Juggling
PHP Manual
Prev
Chapter 15.
References Explained
Next
As said before, references aren 't pointers.
That means, the following construct won 't do what you expect:
What happens is that $var in foo will be bound with $bar in caller, but then it will be re-bound with $GLOBALS[ "baz"].
There' s no way to bind $bar in the calling scope to something else using the reference mechanism, since $bar is not available in the function foo (it is represented by $var, but $var has only variable contents and not name-to-value binding in the calling symbol table).
Prev
Home
Next
What References Do
Up
Passing by Reference
PHP Manual
Prev
Next
References in PHP are a means to access the same variable content by different names.
They are not like C pointers, they are symbol table aliases.
Note that in PHP, variable name and variable content are different, so the same content can have different names.
The most close analogy is with Unix filenames and files - variable names are directory entries, while variable contents is the file itself.
References can be thought of as hardlinking in Unix filesystem.
Prev
Home
Next
References inside the constructor
Up
What References Do
PHP Manual
Prev
Chapter 15.
References Explained
Next
You can pass variable to function by reference, so that function could modify its arguments.
The syntax is as follows:
function foo ($var) {$var++;} $a=5; foo ($a); / / $a is 6 here
Following things can be passed by reference:
Variable, i.e. foo( $a)
New statement, i.e. foo( new foobar())
Reference, returned from a function, i.e.:
Any other expression should not be passed by reference, as the result is undefined.
For example, the following examples of passing by reference are invalid:
function bar() / / Note the missing {$a = 5; return $a;} foo(bar()); foo($a = 5) / / Expression, not variable foo(5) / / Constant, not variable
Prev
Home
Next
What References Are Not
Up
Returning References
PHP Manual
Prev
Chapter 15.
References Explained
Next
Returning by-reference is useful when you want to use a function to find which variable a reference should be bound to.
When returning references, use this syntax:
function find_var ($param) {...code... return $found_var;} $foo = find_var ($bar); $foo - x = 2;
Note:
Unlike parameter passing, here you have to use in both places - to indicate that you return by-reference, not a copy as usual, and to indicate that reference binding, rather than usual assignment, should be done for $foo.
Prev
Home
Next
Passing by Reference
Up
Unsetting References
PHP Manual
Prev
Chapter 15.
References Explained
Next
Many syntax constructs in PHP are implemented via referencing mechanisms, so everything told above about reference binding also apply to these constructs.
Some constructs, like passing and returning by-reference, are mentioned above.
Other constructs that use references are:
When you declare variable as global $var you are in fact creating reference to a global variable.
That means, this is the same as:
That means, for example, that unsetting $var won 't unset global variable.
In an object method, $this is always reference to the caller object.
Prev
Home
Next
Unsetting References
Up
Features
PHP Manual
Prev
Chapter 15.
References Explained
Next
When you unset the reference, you just break the binding between variable name and variable content.
This does not mean that variable content will be destroyed.
For example:
Again, it might be useful to think about this as analogous to Unix unlink call.
Prev
Home
Next
Returning References
Up
Spotting References
PHP Manual
Prev
Chapter 15.
References Explained
Next
PHP references allow you to make two variables to refer to the same content.
Meaning, when you do:
The same syntax can be used with functions, that return references, and with new operator (in PHP 4.0.4 and later):
Note:
Not using the operator causes a copy of the object to be made.
If you use $this in the class it will operate on the current instance of the class.
The assignment without will copy the instance (i.e. the object) and $this will operate on the copy, which is not always what is desired.
Usually you want to have a single instance to work with, due to performance and memory consumption issues.
While you can use the @ operator to mute any errors in the constructor when using it as @new, this does not work when using the new While you can use the @ operator to mute any errors in the constructor when using it as @new, this does not work when using the new statement.
This is a limitation of the Zend Engine and will therefore result in a parser error.
The second thing references do is to pass variables by-reference.
This is done by making a local variable in a function and a variable in the calling scope reference to the same content.
Example:
The third thing reference can do is return by reference.
Prev
Home
Next
References Explained
Up
What References Are Not
PHP Manual
Prev
Chapter 7.
Types
Next
An array in PHP is actually an ordered map.
A map is a type that maps values to keys.
Because you can have another PHP-array as a value, you can also quite easily simulate trees.
For more information we refer you to external literature about this broad topic.
An array can be created by the array() An array can be created by the array() language-construct.
It takes a certain number of comma-separated key = value pairs.
array( [key =] value,...) / / key is either string or nonnegative integer / / value can be anything
?php $arr = array( "foo "= "bar", 12 = true); echo $arr["foo"]; / / bar echo $arr[12]; / / 1?
A key is either an integer or a string.
There are no different indexed and associative array types in PHP, there is only one array type, which can both contain integer and string indices.
A value can be of any PHP type.
?php $arr = array( "somearray "= array(6 = 5, 13 = 9, "a" = 42)); echo $arr["somearray"][6]; / / 5 echo $arr["somearray"][13]; / / 9 echo $arr["somearray"]["a"]; / / 42?
If you omit a key, the maximum of the integer-indices is taken, and the new key will be that maximum + 1.
As integers can be negative, this is also true for negative indices.
Having e.g. the highest index being -6 will result in -5 being the new key.
If you specify a key that already has a value assigned to it, that value will be overwritten.
?php / / This array is the same as... array( 5 = 43, 32, 56, "b "= 12); / / ...this array array(5 = 43, 6 = 32, 7 = 56, "b" = 12);?
Using TRUE as a key will evalute to integer 1 Using TRUE as a key will evalute to integer 1 as key.
Using FALSE as a key will evalute to integer 0 as key.
Using an emptry string as key will create (or overwrite) a key with an empty string and its value, it is not the same as using empty brackets.
You cannot use arrays or objects as keys.
Doing so will result in a warning:
You can also modify an existing array, by explicitly setting values in it.
This is done by assigning values to the array while specifying the key in brackets.
You can also omit the key, add an empty pair of brackets ("[]") to the variable-name in that case.
$arr[ key] = value; $arr[] = value; / / key is either string or nonnegative integer / / value can be anything
?php $arr = array( 5 = 1, 12 = 2); $arr[] = 56; / / This is the same as $arr[13] = 56; / / at this point of the script $arr["x"] = 42; / / This adds a new element to / / the array with key "x "unset($arr[5]); / / This removes the element from the array unset($arr); / / This deletes the whole array?
There are quite some useful function for working with arrays, see the array functions section.
The unset() function allows unsetting keys of an array.
Be aware that the array will NOT be reindexed.
If you only use "usual integer indices" (starting from zero, increasing by one), you can achive the reindex effect by using array_values().
?php $a = array( 1 = 'one', 2 = 'two', 3 = 'three'); unset($a[2]); / * will produce an array that would have been defined as $a = array(1 = 'one', 3 = 'three'); and NOT $a = array(1 = 'one', 2 = 'three'); * / $b = array_values($a); / / Now b is array(1 = 'one', 2 = 'three')?
The foreach control structure exists specifically for arrays.
It provides an easy way to traverse an array.
You should always use quotes around an associative array index.
For example, use $foo[ 'bar'] and not $foo[bar].
You might have seen the following syntax in old scripts:
?php $foo[ bar] = 'enemy'; echo $foo[bar]; / / etc?
More examples to demonstrate this fact:
?php / / Let' s show all errors error_reporting(E_ALL); $arr = array('fruit '= 'apple', 'veggie' = 'carrot'); / / Correct print $arr['fruit']; / / apple print $arr['veggie']; / / carrot / / Incorrect.
This works but also throws a PHP error of / / level E_NOTICE because of an undefined constant named fruit / / / / Notice:
Use of undefined constant fruit - assumed 'fruit' in... print $arr[fruit]; / / apple / / Let's define a constant to demonstrate what's going on.
Constants are not / / looked for within strings so no E_NOTICE error here print "Hello $arr[fruit]"; / / Hello apple / / With one exception, braces surrounding arrays within strings / / allows constants to be looked for print "Hello {$arr[fruit]}"; / / Hello carrot print "Hello {$arr['fruit']}"; / / Hello apple / / This will not work, results in a parse error such as: / / Parse error: parse error, expecting T_STRING 'or T_VARIABLE' or T_NUM_STRING '/ / This of course applies to using autoglobals in strings as well print "Hello $arr['fruit']"; print "Hello $_GET['foo']"; / / Concatenation is another option print "Hello". $arr['fruit']; / / Hello apple?
By default, error_reporting is turned down to not show them.
That means that you can write things like this:
?php echo $arr[ somefunc($bar)];?
?php $error_descriptions[ E_ERROR] = "A fatal error has occured"; $error_descriptions[E_WARNING] = "PHP issued a warning"; $error_descriptions[E_NOTICE] = "This is just an informal notice";?
As we already explained in the above examples, $foo[ bar] still works but is wrong.
It works, because bar is due to its syntax expected to be a constant expression.
PHP now assumes that you meant bar literally, as the string "bar", but that you forgot to write the quotes.
For example, you already cannot use the words empty and default this way, since they are special reserved keywords.
Note:
See the above examples for details on why as well as the section on variable parsing in strings.
For any of the types: integer, float, string, boolean and resource, if you convert a value to an array, you get an array with one element (with index 0), which is the scalar value you started with.
If you convert an object If you convert an object to an array, you get the properties (member variables) of that object as the array's elements.
If you convert a NULL value to an array, you get an empty array.
?php / / this $a = array( 'color '= 'red', 'taste' = 'sweet', 'shape '= 'round', 'name' = 'apple', 4 / / key will be 0); / / is completely equivalent with $a['color'] = 'red'; $a['taste'] = 'sweet'; $a['shape'] = 'round'; $a['name'] = 'apple'; $a[] = 4; / / key will be 0 $b[] = 'a'; $b[] = 'b'; $b[] = 'c'; / / will result in the array array(0 = 'a ', 1 = 'b', 2 = 'c'), / / or simply array('a', 'b', 'c')?
Example 7-4.
Using array()
?php / / Array as (property -)map $map = array ('version '= 4, 'OS' = 'Linux', 'lang '= 'english', 'short_tags' = true); / / strictly numerical keys $array = array (7, 8, 0, 156, -10); / / this is the same as array(0 = 7, 1 = 8,...) $switching = array (10, / / key = 0 5 = 6, 3 = 7, 'a '= 4, 11, / / key = 6 (maximum of integer-indices was 5) '8' = 2, / / key = 8 (integer!) '02 '= 77, / / key = '02' 0 = 12 / / the value 10 will be overwritten by 12); / / empty array $empty = array();?
Example 7-5.
Collection
?php $colors = array( 'red', 'blue', 'green', 'yellow'); foreach ($colors as $color) {echo "Do you like $color?\n";} / * output:
Do you like red?
Do you like blue?
Do you like green?
Do you like yellow? * /?
Note that it is currently not possible to change the values of the array directly in such a loop.
A workaround is the following:
Example 7-6.
Collection
?php foreach ($colors as $key = $color) {/ / won't work: / /$color = strtoupper($color); / / works: $colors[$key] = strtoupper($color);} print_r($colors); / * output:
Array ([0] = RED [1] = BLUE [2] = GREEN [3] = YELLOW) * /?
This example creates a one-based array.
Example 7-7.
One-based index
?php $firstquarter = array( 1 = 'January', 'February', 'March'); print_r($firstquarter); / * output:
Array ([1] = 'January '[2] = 'February' [3] = 'March ') * /
Example 7-8.
Filling an array
/ / fill an array with all items from a directory $handle = opendir( '.'); while ($file = readdir($handle)) {$files[] = $file;} closedir($handle);?
Arrays are ordered.
See the array functions section for more information.
You can count the number of items in an array using the count() function.
Example 7-9.
Sorting array
?php sort( $files); print_r($files);?
Because the value of an array can be everything, it can also be another array.
Example 7-10.
Recursive and multi-dimensional arrays
You should be aware, that array assignment always involves value copying.
?php $arr1 = array( 2, 3); $arr2 = $arr1; $arr2[] = 4; / / $arr2 is changed, / / $arr1 is still array(2,3) $arr3 = $arr1; $arr3[] = 4; / / now $arr1 and $arr3 are the same?
Prev
Home
Next
Up
Objects
PHP Manual
Prev
Chapter 7.
Types
Next
This is the easiest type.
A boolean A boolean expresses a truth value.
It can be either TRUE or FALSE.
Note:
The boolean type was introduced in PHP 4.
To specify a boolean literal, use either the keyword TRUE or FALSE.
Both are case-insensitive.
?php $foo = True; / / assign the value TRUE to $foo?
Usually you use some kind of operator which returns a boolean value, and then pass it on to a control structure.
?php / / == is an operator which test / / equality and returns a boolean if ($action == "show_version") {echo "The version is 1.23";} / / this is not necessary... if ($show_separators == TRUE) {echo "hr \n";} / / ...because you can simply type if ($show_separators) {echo" hr \n";}?
To explicitly convert a value to boolean, use either the (bool) or the (boolean) cast.
See also Type Juggling.
When converting to boolean, the following values are considered FALSE:
the integer 0 (zero)
the float 0.0 (zero)
the empty string, and the string "0"
an array with zero elements
an object with zero member variables
the special type NULL (including unset variables)
Warning
-1 is considered TRUE, like any other non-zero (whether negative or positive) number!
?php echo gettype( (bool) ""); / / bool(false) echo gettype((bool) 1); / / bool(true) echo gettype((bool) -2); / / bool(true) echo gettype((bool) "foo"); / / bool(true) echo gettype((bool) 2.3e5); / / bool(true) echo gettype((bool) array(12)); / / bool(true) echo gettype((bool) array()); / / bool(false)?
Prev
Home
Next
Types
Up
Integers
PHP Manual
Prev
Chapter 7.
Types
Next
?php $a = 1.234; $b = 1.2e3; $c = 7E-10;?
LNUM [0-9] + DNUM ([0-9]*[\ .]{LNUM}) _BAR_ ({LNUM}[\ .][0-9]*) EXPONENT_DNUM (({LNUM} _BAR_ {DNUM}) [eE][+ -]? {LNUM})
Floating point precision
It is quite usual that simple decimal fractions like 0.1 or 0.7 cannot be converted into their internal binary counterparts without a little loss of precision.
This can lead to confusing results: for example, floor( (0.1+0.7)*10) will usually return 7 instead of the expected 8 as the result of the internal representation really being something like 7.9999999999....
For instance, 1 / 3 in decimal form becomes 0.3333333....
So never trust floating number results to the last digit and never compare floating point numbers for equality.
For information on when and how strings are converted to floats, see the section titled String conversion to numbers.
See the Converting to integer section for more information.
Prev
Home
Next
Integers
Up
PHP Manual
Prev
Next
PHP supports eight primitive types.
Four scalar types:
integer
floating-point number (float)
string
array
object
NULL
callback
If you simply want a human-readable representation of the type for debugging, use gettype().
Some examples:
?php $bool = TRUE; / / a boolean $str = "foo"; / / a string $int = 12; / / an integer echo gettype($bool); / / prints out "boolean "echo gettype($str); / / prints out "string" / / If this is an integer, increment it by four if (is_int($int)) {$int += 4;} / / If $bool is a string, print it out / / (does not print out anything) if (is_string($bool)) {echo "String: $bool";}?
If you would like to force a variable to be converted to a certain type, you may either cast the variable or use the settype() function on it.
Note that a variable may be evaluated with different values in certain situations, depending on what type it is at the time.
For more information, see the section on Type Juggling.
Prev
Home
Next
Comments
Up
Booleans
PHP Manual
Prev
Chapter 7.
Types
Next
An integer is a number of the set Z = {..., -2, -1, 0, 1, 2,...}.
See also:
Arbitrary length integers and Floating point numbers
Integers can be specified in decimal (10-based), hexadecimal (16-based) or octal (8-based) notation, optionally preceded by a sign (- or +).
If you use the octal notation, you must precede the number with a 0 (zero), to use hexadecimal notation precede the number with 0x.
Example 7-1.
Integer literals
?php $a = 1234; # decimal number $a = -123; # a negative number $a = 0123; # octal number (equivalent to 83 decimal) $a = 0x1A; # hexadecimal number (equivalent to 26 decimal)?
?php decimal: [1-9][0-9]* _BAR_ 0 hexadecimal:
0[ 0-7] + integer: [+ -]?decimal _BAR_ [+ -]?hexadecimal _BAR_ [+ - ]?octal?
If you specify a number beyond the bounds of the integer type, it will be interpreted as a float If you specify a number beyond the bounds of the integer type, it will be interpreted as a float instead.
?php $large_number = 2147483647; var_dump($large_number); / / output: int(2147483647) $large_number = 2147483648; var_dump($large_number); / / output: float(2147483648) / / this goes also for hexadecimal specified integers: var_dump (0x80000000); / / output: float(2147483648) $million = 1000000; $large_number = 50000 * $million; var_dump($large_number); / / output: float(50000000000)?
Warning
Unfortunately, there was a bug in PHP so that this does not always work correctly when there are negative numbers involved.
For example: when you do -50000 * $million, the result will be -429496728.
However, when both operands are positive there is no problem.
This is solved in PHP 4.1.0.
There is no integer division operator in PHP.
1 / 2 yields the float 0.5.
You can cast the value to an integer to always round it downwards, or you can use the round() function.
?php var_dump( 25 / 7); / / float(3.5714285714286) var_dump((int) (25 / 7)); / / int(3) var_dump(round(25 / 7)); / / float(4)?
However, in most cases you do not need to use the cast, since a value will be automatically converted if an operator, function or control structure requires an integer argument.
You can also convert a value to integer with the function intval().
See also type-juggling.
FALSE will yield 0 (zero), and TRUE will yield 1 (one).
When converting from float to integer, the number will be rounded towards zero.
If the float is beyond the boundaries of integer (usually + / - 2.15e+9 = 2^31), the result is undefined, since the float hasn't got enough precision to give an exact integer result.
No warning, not even a notice will be issued in this case!
Warning
Never cast an unknown fraction to integer, as this can sometimes lead to unexpected results.
?php echo (int) ((0.1+0.7) * 10); / / echoes 7!?
See String conversion to numbers
Caution
Behaviour of converting to integer is undefined for other types.
Currently, the behaviour is the same as if the value was first converted to boolean.
However, do not rely on this behaviour, as it can change without notice.
Prev
Home
Next
Booleans
Up
Floating point numbers
PHP Manual
Prev
Chapter 7.
Types
Next
The special NULL value represents that a variable has no value.
NULL is the only possible value of type NULL.
Note:
The null type was introduced in PHP 4
A variable is considered to be NULL if
it has been assigned the constant NULL.
it has not been set to any value yet.
it has been unset().
There is only one value of type NULL, and that is the case-insensitive keyword NULL.
?php $var = NULL;?
See also is_null() and unset().
Prev
Home
Next
Up
Pseudo-types used in this documentation
PHP Manual
Prev
Chapter 7.
Types
Next
To initialize an object, you use the new statement to instantiate the object to a variable.
For a full discussion, please read the section Classes and Objects.
If a value of any other type is converted to an object, a new instace of the stdClass built in class is created.
For any other value, a member variable named scalar will contain the value.
?php $obj = (object) 'ciao'; echo $obj - gt;scalar; / / outputs'ciao '?
Prev
Next
Up
PHP Manual
Prev
Chapter 7.
Types
Next
A resource is a special variable, holding a reference to an external resource.
Resources are created and used by special functions.
See the appendix for a listing of all these functions and the corresponding resource types.
Note:
The resource type was introduced in PHP 4
As resource types hold special handlers to opened files, database connections, image canvas areas and the like, you cannot convert any value to a resource.
Due to the reference-counting system introduced with PHP4' s Zend-engine, it is automatically detected when a resource is no longer referred to (just like Java).
When this is the case, all resources that were in use for this resource are made free by the garbage collector.
For this reason, it is rarely ever necessary to free the memory manually by using some free_result function.
Note:
Persistent database links are special, they are not destroyed by the garbage collector.
See also the section about persistent connections.
Prev
Home
Next
Objects
Up
PHP Manual
Prev
Chapter 7.
Types
Next
A string is series of characters.
This also implies that PHP has no native support of Unicode.
See utf8_encode() and utf8_decode() for some Unicode support.
Note:
It is no problem for a string to become very large.
There is no practical bound to the size of strings imposed by PHP, so there is no reason at all to worry about long strings.
A string literal can be specified in three different ways.
single quoted
double quoted
heredoc syntax
The easiest way to specify a simple string is to enclose it in single quotes (the character ').
To specify a literal single quote, you will need to escape it with a backslash (\), like in many other languages.
If a backslash needs to occur before a single quote or at the end of the string, you need to double it.
Note that if you try to escape any other character, the backslash will also be printed!
So usually there is no need to escape the backslash itself.
Note:
In PHP 3, a warning will be issued at the E_NOTICE level when this happens.
Note:
Unlike the two other syntaxes, variables will not be expanded when they occur in single quoted strings.
You deleted C:\*.*? echo 'You deleted C:\\*.* ?'; / / Outputs:
You deleted C:\*.*? echo 'You deleted C:\*.* ?'; / / Outputs:
Variables do not $expand $either echo 'Variables do not $expand $either';?
If the string is enclosed in double-quotes ("), PHP understands more escape sequences for special characters:
Table 7-1.
Escaped characters
sequence
linefeed (LF or 0x0A (10) in ASCII)
carriage return (CR or 0x0D (13) in ASCII)
horizontal tab (HT or 0x09 (9) in ASCII)
backslash
dollar sign
double-quote
the sequence of characters matching the regular expression is a character in octal notation
the sequence of characters matching the regular expression is a character in hexadecimal notation
Again, if you try to escape any other character, the backslash will be printed too!
See string parsing for details.
Another way to delimit strings is by using heredoc syntax ("").
One should provide an identifier after, then the string, and then the same identifier to close the quotation.
The closing identifier must begin in the first column of the line.
Warning
It is very important to note that the line with the closing identifier contains no other characters, except possibly a semicolon (;).
It 's also important to realize that the first character before the closing identifier must be a newline as defined by your operating system.
This is \r on Macintosh for example.
If this rule is broken and the closing identifier is not "clean" then it's not considered to be a closing identifier and PHP will continue looking for one.
If in this case a proper closing identifier is not found then a parse error will result with the line number being at the end of the script.
Heredoc text behaves just like a double-quoted string, without the double-quotes.
This means that you do not need to escape quotes in your here docs, but you can still use the escape codes listed above.
Variables are expanded, but the same care must be taken when expressing complex variables inside a here doc as with strings.
Example 7-2.
Heredoc string quoting example
?php $str = EOD Example of string spanning multiple lines using heredoc syntax.
EOD; / * More complex example, with variables. * / class foo {var $foo; var $bar; function foo() {$this - foo = 'Foo'; $this - bar = array('Bar1', 'Bar2', 'Bar3');}} $foo = new foo(); $name = 'MyName'; echo EOT My name is "$name ".
I am printing some $foo - foo.
Now, I am printing some {$foo - bar[1]}.
This should print a capital 'A': \x41 EOT;?
Note:
Heredoc support was added in PHP 4.
When a string is specified in double quotes or with heredoc, variables are parsed within it.
The simple syntax is the most common and convenient, it provides a way to parse a variable, an array value, or an object property.
The complex syntax was introduced in PHP 4, and can be recognised by the curly braces surrounding the expression.
If a dollar sign ($) is encountered, the parser will greedily take as much tokens as possible to form a valid variable name.
Enclose the variable name in curly braces if you want to explicitly specify the end of the name.
?php $beer = 'Heineken'; echo "$beer's taste is great"; / / works, "'"is an invalid character for varnames echo "He drank some $beers"; / / won't work, 's' is a valid character for varnames echo "He drank some ${beer}s"; / / works echo "He drank some {$beer}s"; / / works?
Similarly, you can also have an array index or an object property parsed.
For object properties the same rules apply as to simple variables, though with object properties there doesn 't exist a trick like the one with variables.
This results in a parse error. echo "A banana is $fruits['banana'] ."; / / Works echo "A banana is". $fruits['banana']. "."; / / Works echo "This square is $square - width meters broad ."; / / Won't work.
For a solution, see the complex syntax. echo "This square is $square - width00 centimeters broad .";?
This isn 't called complex because the syntax is complex, but because you can include complex expressions this way.
You simply write the expression the same way as you would outside the string, and then include it in {and}.
Some examples to make it clear:
?php / / Let' s show all errors error_reporting(E_ALL); $great = 'fantastic'; / / Won't work, outputs:
This is {fantastic} echo "This is {$great}"; / / Works, outputs:
This is fantastic echo "This is {$great}"; echo "This is ${great}"; / / Works echo "This square is {$square - width}00 centimeters broad ."; / / Works echo "This works: {$arr[4][3]}"; / / This is wrong for the same reason as $foo[bar] is wrong / / outside a string.
In otherwords, it will still work but / / because PHP first looks for a constant named foo, it will / / throw an error of level E_NOTICE (undefined constant). echo "This is wrong: {$arr[foo][3]}"; / / Works.
Characters within strings may be accessed by specifying the zero-based offset of the desired character after the string in curly braces.
Note:
However, this syntax is deprecated as of PHP 4.
Some string examples
Strings may be concatenated using the '.' (dot) operator.
Note that the '+' (addition) operator will not work for this.
There are a lot of useful functions for string modification.
Perl and POSIX extended).
There are also functions for URL-strings, and functions to encrypt / decrypt strings (mcrypt and mhash).
Finally, if you still didn' t find what you're looking for, see also the character type functions.
String conversion is automatically done in the scope of an expression for you where a string is needed.
Reading the manual sections on Types and Type Juggling will make the following clearer.
A boolean TRUE value is converted to the string "1", the FALSE value is represented as "" (empty string).
This way you can convert back and forth between boolean and string values.
An integer or a floating point number (float) is converted to a string representing the number with its digits (including the exponent part for floating point numbers).
Arrays are always converted to the string "Array", so you cannot dump out the contents of an array with echo() or print() to see what is inside them.
See below for tips on dumping / viewing the entire contents.
If you would like to print out the member variable values of an object If you would like to print out the member variable values of an object for debugging reasons, read the paragraphs below.
If you would like to find out the class name of which an object is an instance of, use get_class().
Resources are always converted to strings with the structure "Resource id #1" where 1 is the unique number of the resource assigned by PHP during runtime.
NULL is always converted to an empty string.
As you can see above, printing out the arrays, objects or resources does not provide you any useful information about the values themselfs.
You can also convert PHP values to strings to store them permanently.
You can also serialize PHP values to XML structures, if you have WDDX support in your PHP setup.
When a string is evaluated as a numeric value, the resulting value and type are determined as follows.
The string will evaluate as a float if it contains any of the characters' .', 'e', or'E '.
The value is given by the initial portion of the string.
If the string starts with valid numeric data, this will be the value used.
Valid numeric data is an optional sign, followed by one or more digits (optionally containing a decimal point), followed by an optional exponent.
The exponent is an 'e' or'E 'followed by one or more digits.
For more information on this conversion, see the Unix manual page for strtod( 3).
If you would like to test any of the examples in this section, you can cut and paste the examples and insert the following line to see for yourself what 's going on:
Do not expect to get the code of one character by converting it to integer (as you would do in C for example).
Use the functions ord() and chr() to convert between charcodes and characters.
Prev
Home
Next
Floating point numbers
Up
PHP Manual
Prev
Chapter 7.
Types
Next
That is to say, if you assign a string value to variable $var, $var becomes a string.
If you then assign an integer value to $var, it becomes an integer.
An example of PHP' s automatic type conversion is the addition operator '+ '.
If any of the operands is a float, then all operands are evaluated as floats, and the result will be a float.
Otherwise, the operands will be interpreted as integers, and the result will also be an integer.
Note that this does NOT change the types of the operands themselves; the only change is in how the operands are evaluated.
?php $foo = "0"; / / $foo is string (ASCII 48) !- - bad example, no real operator (must be used with variable, modifies it too) $foo++; / / $foo is the string "1" (ASCII 49) - - $foo += 2; / / $foo is now an integer (2) $foo = $foo + 1.3; / / $foo is now a float (3.3) $foo = 5 + "10 Little Piggies"; / / $foo is integer (15) $foo = 5 + "10 Small Pigs"; / / $foo is integer (15) !- - TODO: explain ++ / - - behaviour with strings examples: ++'001 '= '002' ++'abc '= 'abd' ++'xyz '= 'xza' ++'9.9 '= '9.0' ++'-3 '= '-4' - -'9 '= 8 (integer!) - -'5.5' = '5.5 '- -'-9' = -10 (integer) - -'09 '= 8 (integer) - -'abc' = 'abc '- -?
If the last two examples above seem odd, see String conversion to numbers.
If you wish to force a variable to be evaluated as a certain type, see the section on Type casting.
If you wish to change the type of a variable, see settype().
If you would like to test any of the examples in this section, you can use the var_dump() function.
Note:
The behaviour of an automatic conversion to array is currently undefined.
?php $a = "1"; / / $a is a string $a[0] = "f"; / / What about string offsets?
What happens??
Since PHP (for historical reasons) supports indexing into strings via offsets using the same syntax as array indexing, the example above leads to a problem: should $a become an array with its first element being "f", or should "f "become the first character of the string $a?
The current versions of PHP interpret the second assignment as a string offset identification, so $a becomes "f", the result of this automatic conversion however should be considered undefined.
?php $a = "abc"; / / $a is a string $a{1} = "f"; / / $a is now "afc"?
Type casting in PHP works much as it does in C: the name of the desired type is written in parentheses before the variable which is to be cast.
?php $foo = 10; / / $foo is an integer $bar = (boolean) $foo; / / $bar is a boolean?
The casts allowed are:
(int), (integer) - cast to integer
(bool), (boolean) - cast to boolean
(float), (double), (real) - cast to float
(array) - cast to array
Note that tabs and spaces are allowed inside the parentheses, so the following are functionally equivalent:
Note:
Instead of casting a variable to string, you can also enclose the variable in double quotes.
?php $foo = 10; / / $foo is an integer $str = "$foo"; / / $str is a string $fst = (string) $foo; / / $fst is also a string / / This prints out that "they are the same "if ($fst === $str) {echo "they are the same";}?
It may not be obvious exactly what will happen when casting between certain types.
Converting to boolean
Converting to float
Converting to array
Converting to resource
Prev
Home
Next
Pseudo-types used in this documentation
Up
Variables
PHP Manual
Prev
Chapter 8.
Variables
Next
When a form is submitted to a PHP script, the information from that form is automatically made available to the script.
There are many ways to access this information, for example:
Example 8-2.
A simple HTML form
form action=" foo.php "method="post" Name: input type="text "name="username" br Email: input type="text "name="email" br input type="submit "name="submit" value="Submit me! "/ form
Some examples are:
Example 8-3.
Accessing data from a simple POST HTML form
As of / / PHP 4.2.0 the default value of register_globals = off. / / Using / relying on this method is not preferred. print $username;?
Using a GET form is similar except you 'll use the appropriate GET predefined variable instead.
GET also applies to the QUERY_STRING (the information after the '?' in an URL).
So, for example, http: / /www.example.com / test.php?id=3 contains GET data which is accessible with $_GET[ 'id'].
See also $_REQUEST and import_request_variables().
Note:
Superglobal arrays, like $_POST and $_GET, became available in PHP 4.1.0
As shown, before PHP 4.2.0 the default value for register_globals was on.
And, in PHP 3 it was always on.
The PHP community is encouraging all to not rely on this directive as it' s preferred to assume it's off and code accordingly.
Note:
The magic_quotes_gpc configuration directive affects Get, Post and Cookie values.
If turned on, value (It's "PHP !") will automagically become (It\'s \"PHP!\").
Escaping is needed for DB insertion.
See also addslashes(), stripslashes() and magic_quotes_sybase.
PHP also understands arrays in the context of form variables (see the related faq).
You may, for example, group related variables together, or use this feature to retrieve values from a multiple select input.
For example, let 's post a form to itself and upon submission display the data:
Example 8-4.
More complex form variables
?php if ($HTTP_POST_VARS['action'] == 'submitted') {print 'pre'; print_r($HTTP_POST_VARS); print 'a href="'. $HTTP_SERVER_VARS['PHP_SELF'] .' "Please try again / a'; print '/ pre';} else {? form action=" ?php echo $HTTP_SERVER_VARS['PHP_SELF'];? "method="post" Name: input type="text "name="personal[name]" br Email: input type="text "name="personal[email]" br Beer: br select multiple name="beer[] "option value="warthog" Warthog / option option value="guinness "Guinness / option option value="stuttgarter" Stuttgarter Schwabenbräu / option / select br input type="hidden "name="action" value="submitted "input type="submit" name="submit "value="submit me!" / form ?php}?
In PHP 3, the array form variable usage is limited to single-dimensional arrays.
In PHP 4, no such restriction applies.
When submitting a form, it is possible to use an image instead of the standard submit button with a tag like:
When the user clicks somewhere on the image, the accompanying form will be transmitted to the server with two additional variables, sub_x and sub_y.
These contain the coordinates of the user click within the image.
The experienced may note that the actual variable names sent by the browser contains a period rather than an underscore, but PHP converts the period to an underscore automatically.
PHP transparently supports HTTP cookies as defined by Netscape 's Spec.
Cookies are a mechanism for storing data in the remote browser and thus tracking or identifying return users.
You can set cookies using the setcookie() function.
Cookies are part of the HTTP header, so the SetCookie function must be called before any output is sent to the browser.
This is the same restriction as for the header() function.
Cookie data is then available in the appropriate cookie data arrays, such as $_COOKIE, $HTTP_COOKIE_VARS as well as in $_REQUEST.
See the setcookie() manual page for more details and examples.
For example:
?php setcookie( "MyCookie[foo]", "Testing 1", time()+3600); setcookie("MyCookie[bar]", "Testing 2", time()+3600);?
That will create two seperate cookies although MyCookie will now be a single array in your script.
If you want to set just one cookie with multiple values, consider using serialize() or explode() on the value first.
Note that a cookie will replace a previous cookie by the same name in your browser unless the path or domain is different.
So, for a shopping cart application you may want to keep a counter and pass this along. i.e.
Example 8-5.
A setcookie() example
?php $count++; setcookie("count", $count, time()+3600); setcookie("Cart[$count]", $item, time()+3600);?
Typically, PHP does not alter the names of variables when they are passed into a script.
However, it should be noted that the dot (period, full stop) is not a valid character in a PHP variable name.
For the reason, look at it:
?php $varname.ext; / * invalid variable name * /?
For this reason, it is important to note that PHP will automatically replace any dots in incoming variable names with underscores.
Because PHP determines the types of variables and converts them (generally) as needed, it is not always obvious what type a given variable is at any one time.
PHP includes several functions which find out what type a variable is, such as: gettype(), is_array(), is_float(), is_int(), is_object(), and is_string().
See also the chapter on Types.
Prev
Home
Next
Variable variables
Up
Constants
PHP Manual
Prev
Next
Variables in PHP are represented by a dollar sign followed by the name of the variable.
The variable name is case-sensitive.
Variable names follow the same rules as other labels in PHP.
A valid variable name starts with a letter or underscore, followed by any number of letters, numbers, or underscores.
Note:
For our purposes here, a letter is a-z, A-Z, and the ASCII characters from 127 through 255 (0x7f-0xff).
?php $var = "Bob"; $Var = "Joe"; echo "$var, $Var"; / / outputs "Bob, Joe" $4site = 'not yet'; / / invalid; starts with a number $_4site = 'not yet'; / / valid; starts with an underscore $täyte = 'mansikka'; / / valid; 'ä 'is ASCII 228.?
In PHP 3, variables are always assigned by value.
That is to say, when you assign an expression to a variable, the entire value of the original expression is copied into the destination variable.
For more information on this kind of assignment, see the chapter on Expressions.
PHP 4 offers another way to assign values to variables: assign by reference.
This means that the new variable simply references (in other words, "becomes an alias for "or "points to") the original variable.
Changes to the new variable affect the original, and vice versa.
This also means that no copying is performed; thus, the assignment happens more quickly.
However, any speedup will likely be noticed only in tight loops or when assigning large arrays or objects.
To assign by reference, simply prepend an ampersand () to the beginning of the variable which is being assigned (the source variable).
For instance, the following code snippet outputs' My name is Bob 'twice:
One important thing to note is that only named variables may be assigned by reference.
?php $foo = 25; $bar = $foo; / / This is a valid assignment. $bar = (24 * 7); / / Invalid; references an unnamed expression. function test() {return 25;} $bar = test(); / / Invalid.?
For example, in Perl 'Z'+1 turns into'AA', while in C'Z'+1 turns into '[' {ord('Z') == 90, ord('[') == 91).
Arithmetric Operations on Character Variables
X Y Z AA AB AC * /?
Prev
Home
Next
Type Juggling
Up
Predefined variables
PHP Manual
Prev
Chapter 8.
Variables
Next
PHP provides a large number of predefined variables to any script which it runs.
Many of these variables, however, cannot be fully documented as they are dependent upon which server is running, the version and setup of the server, and other factors.
Some of these variables will not be available when PHP is run on the command line.
For a listing of these variables, please see the section on Reserved Predefined Variables.
Warning
In PHP 4.2.0 and later, the default value for the PHP directive register_globals is off.
This is a major change in PHP.
Having register_globals off affects the set of predefined variables available in the global scope.
For example, to get DOCUMENT_ROOT you' ll use $_SERVER['DOCUMENT_ROOT'] instead of $DOCUMENT_ROOT, or $_GET['id'] from the URL http: / /www.example.com / test.php?id=3 instead of $id, or $_ENV['HOME'] instead of $HOME.
For related information on this change, read the configuration entry for register_globals, the security chapter on Using Register Globals, as well as the PHP 4.1.0 and 4.2.0 Release Announcements.
Using the available PHP Reserved Predefined Variables, like the superglobal arrays, is preferred.
From version 4.1.0 onward, PHP provides an additional set of predefined arrays containing variables from the web server (if applicable), the environment, and user input.
These new arrays are rather special in that they are automatically global--i.e., automatically available in every scope.
Also, you' ll notice how the older predefined variables ($HTTP_*_VARS) still exist.
Superglobals cannot be used as variable variables.
If certain variables in variables_order are not set, their appropriate PHP predefined arrays are also left empty.
PHP Superglobals
Contains a reference to every variable which is currently available within the global scope of the script.
The keys of this array are the names of the global variables. $GLOBALS has existed since PHP 3.
Variables set by the web server or otherwise directly related to the execution environment of the current script.
Analogous to the old $HTTP_SERVER_VARS array (which is still available, but deprecated).
Variables provided to the script via HTTP GET.
Analogous to the old $HTTP_GET_VARS array (which is still available, but deprecated).
Variables provided to the script via HTTP POST.
Analogous to the old $HTTP_POST_VARS array (which is still available, but deprecated).
Variables provided to the script via HTTP cookies.
Analogous to the old $HTTP_COOKIE_VARS array (which is still available, but deprecated).
Variables provided to the script via HTTP post file uploads.
Analogous to the old $HTTP_POST_FILES array (which is still available, but deprecated).
See POST method uploads for more information.
Variables provided to the script via the environment.
Analogous to the old $HTTP_ENV_VARS array (which is still available, but deprecated).
Variables provided to the script via any user input mechanism, and which therefore cannot be trusted.
The presence and order of variable inclusion in this array is defined according to the variables_order configuration directive.
This array has no direct analogue in versions of PHP prior to 4.1.0.
See also import_request_variables().
Note:
When running on the command line, this will not include the argv and argc entries; these are present in the $_SERVER array.
Variables which are currently registered to a script 's session.
Analogous to the old $HTTP_SESSION_VARS array (which is still available, but deprecated).
See the Session handling functions section for more information.
Prev
Home
Next
Variables
Up
Variable scope
PHP Manual
Prev
Chapter 8.
Variables
Next
The scope of a variable is the context within which it is defined.
For the most part all PHP variables only have a single scope.
This single scope spans included and required files as well.
For example:
Here the $a variable will be available within the included b.inc Here the $a variable will be available within the included b.inc script.
However, within user-defined functions a local function scope is introduced.
Any variable used inside a function is by default limited to the local function scope.
For example:
?php $a = 1; / * global scope * / function Test() {echo $a; / * reference to local scope variable * /} Test();?
This script will not produce any output because the echo statement refers to a local version of the $a variable, and it has not been assigned a value within this scope.
You may notice that this is a little bit different from the C language in that global variables in C are automatically available to functions unless specifically overridden by a local definition.
This can cause some problems in that people may inadvertently change a global variable.
In PHP global variables must be declared global inside a function if they are going to be used in that function.
An example:
?php $a = 1; $b = 2; function Sum() {global $a, $b; $b = $a + $b;} Sum(); echo $b;?
The above script will output "3".
By declaring $a and $b By declaring $a and $b global within the function, all references to either variable will refer to the global version.
There is no limit to the number of global variables that can be manipulated by a function.
A second way to access variables from the global scope is to use the special PHP-defined $GLOBALS array.
The previous example can be rewritten as:
?php $a = 1; $b = 2; function Sum() {$GLOBALS["b"] = $GLOBALS["a"] + $GLOBALS["b"];} Sum(); echo $b;?
The $GLOBALS array is an associative array with the name of the global variable being the key and the contents of that variable being the value of the array element.
Notice how $GLOBALS exists in any scope, this is because $GLOBALS is a superglobal.
Here 's an example demonstrating the power of superglobals:
?php function test_global() {/ / Most predefined variables aren't "super "and require / / 'global 'to be available to the functions local scope. global $HTTP_POST_VARS; print $HTTP_POST_VARS['name']; / / Superglobals are available in any scope and do / / not require'global'.
Superglobals are available / / as of PHP 4.1.0 print $_POST[ 'name'];}?
Another important feature of variable scoping is the static Another important feature of variable scoping is the static variable.
A static variable exists only in a local function scope, but it does not lose its value when program execution leaves this scope.
Consider the following example:
?php function Test () {$a = 0; echo $a; $a++;}?
This function is quite useless since every time it is called it sets $a to 0 and prints "0".
The $a + + which increments the variable serves no purpose since as soon as the function exits the $a variable disappears.
To make a useful counting function which will not lose track of the current count, the $a variable is declared static:
?php function Test() {static $a = 0; echo $a; $a++;}?
Now, every time the Test() function is called it will print the value of $a and increment it.
Static variables also provide one way to deal with recursive functions.
A recursive function is one which calls itself.
Care must be taken when writing a recursive function because it is possible to make it recurse indefinitely.
You must make sure you have an adequate way of terminating the recursion.
The following simple function recursively counts to 10, using the static variable $count to know when to stop:
?php function Test() {static $count = 0; $count++; echo $count; if ($count 10) {Test ();} $count--;}?
The Zend Engine 1, driving PHP4, implements the static and global modifier for variables in terms of references.
For example, a true global variable imported inside a function scope with the global statement actually creates a reference to the global variable.
This can lead to unexpected behaviour which the following example addresses:
Executing this example will result in the following output:
A similar behaviour applies to the static statement.
References are not stored statically:
?php function get_instance_ref() {static $obj; echo "Static object: "; var_dump($obj); if (!isset($obj)) {/ / Assign a reference to the static variable $obj = new stdclass;} $obj - property++; return $obj;} function get_instance_noref() {static $obj; echo "Static object:"; var_dump($obj); if (!isset($obj)) {/ / Assign the object to the static variable $obj = new stdclass;} $obj - property++; return $obj;} $obj1 = get_instance_ref(); $still_obj1 = get_instance_ref(); echo "\n"; $obj2 = get_instance_noref(); $still_obj2 = get_instance_noref();?
Executing this example will result in the following output:
Static object:
NULL Static object:
NULL Static object:
NULL Static object: object( stdClass)(1) {["property"]= int(1)}
This example demonstrates that when assigning a reference to a static variable, it' s not remembered when you call the get_instance_ref() function a second time.
Prev
Home
Next
Predefined variables
Up
Variable variables
PHP Manual
Prev
Chapter 8.
Variables
Next
Sometimes it is convenient to be able to have variable variable names.
That is, a variable name which can be set and used dynamically.
A normal variable is set with a statement such as:
A variable variable takes the value of a variable and treats that as the name of a variable.
In the above example, hello, can be used as the name of a variable by using two dollar signs. i.e.
At this point two variables have been defined and stored in the PHP symbol tree: $a with contents "hello" and $hello with contents "world ".
Therefore, this statement:
produces the exact same output as:
i.e. they both produce: hello world.
In order to use variable variables with arrays, you have to resolve an ambiguity problem.
That is, if you write $$a[ 1] then the parser needs to know if you meant to use $a[1] as a variable, or if you wanted $$a as the variable and then the [1] index from that variable.
The syntax for resolving this ambiguity is: ${$a[1]} for the first case and ${$a}[1] for the second.
Warning
Please note that variable variables cannot be used with PHP 's Superglobal arrays.
This means you cannot do things like ${$_GET}.
If you are looking for a way to handle availability of superglobals and the old HTTP_*_VARS, you might want to try referencing them.
Prev
Home
Next
Variable scope
Up
Variables from outside PHP
PHP Manual
Prev
Appendix B.
Migrating from PHP 3 to PHP 4
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Migrating from PHP 3 to PHP 4
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Migrating from PHP 3 to PHP 4
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Next
With PHP 3 the error reporting level was set as a simple numeric value formed by summing up the numbers related to different error levels.
Warning
Warning
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Migrating from PHP 3 to PHP 4
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
PHP 4 and the integrated Zend engine have greatly improved PHP 's performance and capabilities, but great care has been taken to break as little existing code as possible.
Prev
Home
Next
Publications about PHP
Up
PHP Manual
Prev
Appendix B.
Migrating from PHP 3 to PHP 4
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Next
The Adabas and Solid database extensions are no more.
unset(), although still available, is implemented as a language construct rather than a function.
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Migrating from PHP 3 to PHP 4
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Migrating from PHP 3 to PHP 4
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Migrating from PHP 3 to PHP 4
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix B.
Migrating from PHP 3 to PHP 4
Next
Example B-1.
Prev
Home
Next
Up
PHP Manual
Prev
Appendix C.
Migrating from PHP / FI 2 to PHP 3
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix C.
Migrating from PHP / FI 2 to PHP 3
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix C.
Migrating from PHP / FI 2 to PHP 3
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
PHP 3.0 is rewritten from the ground up.
Prev
Home
Next
Up
PHP Manual
Prev
Appendix C.
Migrating from PHP / FI 2 to PHP 3
Next
Example C-5.
Example C-6.
Prev
Home
Next
Up
PHP Manual
Prev
Appendix C.
Migrating from PHP / FI 2 to PHP 3
Next
Example C-11.
Prev
Home
Next
Up
Debugging PHP
PHP Manual
Prev
Appendix C.
Migrating from PHP / FI 2 to PHP 3
Next
Example C-1.
Example C-2.
Example C-3.
Example C-4.
Prev
Home
Next
Up
PHP Manual
Prev
Appendix C.
Migrating from PHP / FI 2 to PHP 3
Next
Example C-9.
Example C-10.
Prev
Home
Next
Up
PHP Manual
Prev
Appendix C.
Migrating from PHP / FI 2 to PHP 3
Next
Example C-7.
Example C-8.
Warning
Prev
Home
Next
Up
PHP Manual
Prev
Prev
Home
Translations
Up
PHP Manual
Prev
Next
The current possible PCRE modifiers are listed below.
The names in parentheses refer to internal PCRE names for these modifiers.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
The PCRE library is a set of functions that implement regular expression pattern matching using the same syntax and semantics as Perl 5, with just a few differences (see below).
The differences described here are with respect to Perl 5.005.
If PCRE_UNGREEDY is set, the greediness of the repeti - tion quantifiers is inverted, that is, by default they are not greedy, but if followed by a question mark they are.
As a trivial example, the pattern The quick brown fox matches a portion of a subject string that is identical to itself.
All non-alphanumeric characters other than\, -, ^ (at the start) and the terminating] are non-special in character classes, but it does no harm if they are escaped.
If the PCRE_EXTENDED option is set, an unescaped # character outside a character class introduces a comment that contin - ues up to the next newline character in the pattern.
If no memory can be obtained, it saves data for the first 15 capturing parentheses only, as there is no way to give an out-of-memory error from within a recursion.
Prev
Home
Next
Up
PHP Manual
Prev
Appendix E.
Next
The error levels are:
For example, trying to access the value of a variable which has not been set, or calling stat() on a file that doesn't exist.
These indicate errors that can not be recovered from, such as a memory allocation problem.
All of the above.
Prev
Home
Next
Up
List of Function Aliases
PHP Manual
Prev
Next
All functions look like this:
void php3_foo( INTERNAL_FUNCTION_PARAMETERS) {}
Example E-1.
If you change the string of a parameter which already IS_STRING or IS_ARRAY you should run pval_destructor on it first.
Example E-2.
pval *arg1, *arg2, *arg3; int arg_count = ARG_COUNT(ht); if (arg_count 2 _BAR_ _BAR_ arg_count 3 _BAR_ _BAR_ getParameters(ht,arg_count, arg1, arg2, arg3)==FAILURE) {WRONG_PARAM_COUNT;}
Table E-1.
If you compile with "-DDEBUG", PHP will print out a list of all memory that was allocated using emalloc() and estrdup() but never freed with efree() when it is done running the specified script.
Warning
Example E-3.
Example E-4.
Example E-5.
Example E-6.
Just about any hash function returns SUCCESS or FAILURE (except for hash_exists(), which returns a boolean truth value).
If your function returns boolean success / error responses, always use RETURN_TRUE and RETURN_FALSE respectively.
add_next_index_stringl( return_value,str,length) - specify the string length
Example E-7.
Example E-8.
Example E-9.
pval *resource_id; RESOURCE *resource; int type; convert_to_long(resource_id); php3_list_delete(resource_id - value.lval);
Many of the features of PHP can be configured at runtime.
Prev
Home
Next
Debugger Protocol
Up
PHP Manual
Prev
Next
PHP, which stands for "PHP:
Hypertext Preprocessor "is a widely-used Open Source general-purpose scripting language that is especially suited for Web development and can be embedded into HTML.
Its syntax draws upon C, Java, and Perl, and is easy to learn.
The main goal of the language is to allow web developers to write dynamically generated webpages quickly, but you can do much more with PHP.
This manual consists primarily of a function reference, but also contains a language reference, explanations of some of PHP 's major features, and other supplemental information.
You can download this manual in several formats at http: / /www.php.net / docs.php.
The downloads are updated as the content changes.
More information about how this manual is developed can be found in the 'About the manual' appendix.
See also PHP History
Prev
Home
Next
PHP Manual
Getting Started
PHP Manual
Prev
Next
These functions are only available when running PHP as an Apache 1.x module.
For PHP installation on Apache 1.x see the Apache section in the installation chapter.
The behaviour of the Apache PHP module is affected by settings in php.ini.
Configuration settings from php.ini may be overridden by php_flag settings in the server configuration file or local .htaccess files.
Example 1.
Turning off PHP parsing for a directory using .htaccess
Table 1.
Apache configuration options
Name
Default
Changeable
Function
turns PHP parsing on or off
specify whether PHP scripts may request child process termination on end of request, see also apache_child_terminate()
send PHP scripts modification date as Last-Modified: header for this request
parse files with executable bit set as PHP regardles of their file ending
Here is a short explanation of the configuration directives.
This directive is really only useful in the Apache module version of PHP.
It is used by sites that would like to turn PHP parsing on and off on a per-directory or per-virtual server basis.
By putting engine off in the appropriate places in the httpd.conf file, PHP can be enabled or disabled.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Function Reference
Up
PHP Manual
Prev
Next
These functions allow you to interact with and manipulate arrays in various ways.
Arrays are essential for storing, managing, and operating on sets of variables.
Simple and multi-dimensional arrays are supported, and may be either user created or created by another function.
There are specific database handling functions for populating arrays from database queries, and several functions return arrays.
Please see the Arrays section of the manual for a detailed explanation of how arrays are implemented and used in PHP.
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are always available as part of the PHP core.
CASE_LOWER is used with array_change_key_case() and is used to convert array keys to lower case.
This is also the default case for array_change_key_case().
CASE_UPPER is used with array_change_key_case() and is used to convert array keys to upper case.
Sorting order flags:
SORT_ASC is used with array_multisort() to sort in ascending order.
SORT_DESC is used with array_multisort() to sort in descending order.
Sorting type flags: used by various sort functions
SORT_REGULAR is used to compare items normally.
SORT_NUMERIC is used to compare items numerically.
SORT_STRING is used to compare items as strings.
See also is_array(), explode(), implode(), split(), preg_split(), and join().
Prev
Home
Next
Up
PHP Manual
Prev
Next
The aspell() functions allows you to check the spelling on a word and offer suggestions.
It uses pspell library and works with newer versions of aspell.
You need the aspell library, available from: http: / /aspell.sourceforge.net /.
Prev
Home
Next
Up
PHP Manual
Prev
Next
For arbitrary precision mathematics PHP offers the Binary Calculator which supports numbers of any size and precision, represented as strings.
You don 't need any external libraries for this extension.
In PHP 4, these functions are only available if PHP was configured with --enable-bcmath.
In PHP 3, these functions are only available if PHP was NOT configured with --disable-bcmath.
The windows version of PHP The windows version of PHP has built in support for this extension.
You do not need to load any additional extension in order to use these functions.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
BC math configuration options
Name
Default
Changeable
Here is a short explanation of the configuration directives.
Number of decimal digits for all bcmath functions.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The bzip2 functions are used to transparently read and write bzip2 (.bz2) compressed files.
This module uses the functions of the bzip2 library by Julian Seward.
This module requires bzip2 / libbzip2 version = 1.0.x.
Bzip2 support in PHP is not enabled by default.
You will need to use the --with-bz2[ =DIR] configuration option when compiling PHP to enable bzip2 support.
This extension has no configuration directives defined in php.ini.
This extension defines one resource type: a file pointer identifying the bz2-file to work on.
This extension has no constants defined.
This example opens a temporary file and writes a test string to it, then prints out the contents of the file.
Example 1.
Small bzip2 Example
?php $filename = "/ tmp / testfile.bz2"; $str = "This is a test string.\n"; / / open file for writing $bz = bzopen($filename, "w"); / / write string to file bzwrite($bz, $str); / / close file bzclose($bz); / / open file for reading $bz = bzopen($filename, "r"); / / read 10 characters print bzread($bz, 10); / / output until end of the file (or the next 1024 char) and close it. print bzread($bz); bzclose($bz);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
You do not need to load any additional extension in order to use these functions.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions interface the CCVS API, allowing you to work directly with CCVS from your PHP scripts.
Note:
You will also need to make sure the PHP Processes are running under the same user as your CCVS was installed as (e.g. if you installed CCVS as user'ccvs', your PHP processes must run as'ccvs' as well.)
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to obtain information about classes and instance objects.
You can obtain the name of the class to which a object belongs, as well as its member properties and methods.
No external libraries are needed to build this extension.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
In this example, we first define a base class and an extension of the class.
The base class describes a general vegetable, whether it is edible or not and what is its color.
The subclass Spinach adds a method to cook it and another to find out if it is cooked.
Example 1. classes.inc
We then instantiate 2 objects from these classes and print out information about them, including their class parentage.
We also define some utility functions, mainly to have a nice printout of the variables.
Example 2. test_script.php
One important thing to note in the example above is that the object $leafy is an instance of the class Spinach which is a subclass of Vegetable, therefore the last part of the script above will output:
Prev
Home
Next
Up
PHP Manual
Prev
Next
COM encourages versioning, separation of implementation from interface and hiding the implementation details such as executable location and the language it was written in.
COM functions are only available on the Windows version of PHP.
There is no installation needed to use these functions; they are part of the PHP core.
You do not need to load any additional extension in order to use these functions.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
ClibPDF lets you create PDF documents with PHP.
To do so add to your configure line the options --with-jpeg-dir[ =DIR] --with-tiff-dir[=DIR].
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
Simple ClibPDF Example
Example 2. pdfclock example from pdflib 2.0 distribution
?php $radius = 200; $margin = 20; $pagecount = 40; $pdf = cpdf_open(0); cpdf_set_creator($pdf, "pdf_clock.php3"); cpdf_set_title($pdf, "Analog Clock"); while($pagecount- - 0) {cpdf_page_init($pdf, $pagecount+1, 0, 2 * ($radius + $margin), 2 * ($radius + $margin), 1.0); cpdf_set_page_animation($pdf, 4, 0.5, 0, 0, 0); / * wipe * / cpdf_translate($pdf, $radius + $margin, $radius + $margin); cpdf_save($pdf); cpdf_setrgbcolor($pdf, 0.0, 0.0, 1.0); / * minute strokes * / cpdf_setlinewidth($pdf, 2.0); for ($alpha = 0; $alpha 360; $alpha += 6) {cpdf_rotate($pdf, 6.0); cpdf_moveto($pdf, $radius, 0.0); cpdf_lineto($pdf, $radius-$margin / 3, 0.0); cpdf_stroke($pdf);} cpdf_restore($pdf); cpdf_save($pdf); / * 5 minute strokes * / cpdf_setlinewidth($pdf, 3.0); for ($alpha = 0; $alpha 360; $alpha += 30) {cpdf_rotate($pdf, 30.0); cpdf_moveto($pdf, $radius, 0.0); cpdf_lineto($pdf, $radius-$margin, 0.0); cpdf_stroke($pdf);} $ltime = getdate(); / * draw hour hand * / cpdf_save($pdf); cpdf_rotate($pdf, -(($ltime['minutes'] / 60.0) + $ltime['hours'] - 3.0) * 30.0); cpdf_moveto($pdf, -$radius / 10, -$radius / 20); cpdf_lineto($pdf, $radius / 2, 0.0); cpdf_lineto($pdf, -$radius / 10, $radius / 20); cpdf_closepath($pdf); cpdf_fill($pdf); cpdf_restore($pdf); / * draw minute hand * / cpdf_save($pdf); cpdf_rotate($pdf, -(($ltime['seconds'] / 60.0) + $ltime['minutes'] - 15.0) * 6.0); cpdf_moveto($pdf, -$radius / 10, -$radius / 20); cpdf_lineto($pdf, $radius * 0.8, 0.0); cpdf_lineto($pdf, -$radius / 10, $radius / 20); cpdf_closepath($pdf); cpdf_fill($pdf); cpdf_restore($pdf); / * draw second hand * / cpdf_setrgbcolor($pdf, 1.0, 0.0, 0.0); cpdf_setlinewidth($pdf, 2); cpdf_save($pdf); cpdf_rotate($pdf, -(($ltime['seconds'] - 15.0) * 6.0)); cpdf_moveto($pdf, -$radius / 5, 0.0); cpdf_lineto($pdf, $radius, 0.0); cpdf_stroke($pdf); cpdf_restore($pdf); / * draw little circle at center * / cpdf_circle($pdf, 0, 0, $radius / 30); cpdf_fill($pdf); cpdf_restore($pdf); cpdf_finalize_page($pdf, $pagecount+1);} cpdf_finalize($pdf); Header("Content-type: application / pdf"); cpdf_output_buffer($pdf); cpdf_close($pdf);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to use the CrackLib library to test the 'strength' of a password.
CrackLib will also give helpful diagnostic messages that will help 'strengthen' the password.
More information regarding CrackLib along with the library can be found at http: / /www.users.dircon.co.uk / ~crypto /.
In order to use these functions, you must compile PHP with Crack support by using the --with-crack[ =DIR] option.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
This extension has no constants defined.
Example 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Passing anything else but a string or integer will return FALSE immediately.
None besides functions from the standard C library which are always available.
Note:
Builtin support for ctype is available with PHP 4.3.0.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
C:\WINNT\SYSTEM32 or C:\WINDOWS\SYSTEM32)
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions are only available if the interpreter has been compiled with the --with-cybercash=[ DIR].
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This function is currently not documented; only the argument list is available.
Note:
This extension is not available on Windows platforms.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to get the date and time from the server where your PHP scripts are running.
You can use these functions to format the date and time in many different ways.
Note:
Please keep in mind that these functions are dependent on the locale settings of your server.
Make sure to take daylight saving time and leap years into consideration when working with these functions.
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions build the foundation for accessing Berkeley DB style databases.
Table 1.
Table 2.
Note: db2 conflicts with db3 and db4.
Note: db3 conflicts with db2 and db4.
Note: db4 conflicts with db2 and db3.
Note:
Note:
Note:
Note:
Starting with PHP 5.0.0 there is a configuration check avoid such missconfigurations.
This extension has no configuration directives defined in php.ini.
The functions dba_open() and dba_popen() return a handle to the specified database file to access which is used by all other dba-function calls.
This extension has no constants defined.
Example 1.
DBA example
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to access records stored in dBase-format (dbf) databases.
Choose any real SQL server instead; MySQL or Postgres are common choices with PHP. dBase support is here to allow you to import and export data to and from your web database, because the file format is commonly understood by Windows spreadsheets and organizers.
In order to enable the bundled dbase library and to use these functions, you must compile PHP with the --enable-dbase option.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to store records stored in a dbm-style database.
Note:
However, dbm support is deprecated and you are encourged to use the Database (dbm-style) abstraction layer functions instead.
In addition you must ensure support for an underlying database or you can use some sytem libraries.
This extension has no configuration directives defined in php.ini.
The function dbmopen() returns an database identifier which is used by the other dbm-functions.
This extension has no constants defined.
Example 1.
DBM example
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Concept asa always had an interest in supporting open source languages, db+ + has had Perl and Tcl call interfaces for years now and uses Tcl as its internal stored procedure language.
If you have installed db+ + in a different place you have add the installation path to the configure option like this: --with-dbplus= / your / installation / path.
This extension has no configuration directives defined in php.ini.
A dbplus_relation is a handle to a stored relation or a relation generated as the result of a query.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Table 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The dbx module is a database abstraction layer (db'X', where'X 'is a supported database).
To get other supported databases to work with the dbx-module refer to their specific documentation.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Note:
This directive can be overridden with a flag to dbx_query().
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
This extension is not available on Windows platforms.
No external libraries are needed to build this extension.
To get these functions to work, you have to configure PHP with --enable-dio.
This extension has no configuration directives defined in php.ini.
One resource type is defined by this extension: a file descriptor returnded by dio_open().
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no configuration directives defined in php.ini.
This extension has no constants defined.
For related functions such as dirname(), is_dir(), mkdir(), and rmdir(), see the Filesystem section.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Therefore, if you want to read an XML file and write a modified version, use DomDocument_create_element(), DomDocument_create_text_node(), set_attribute(), etc. and finally the DomDocument_dump_mem() function.
C:\WINNT\SYSTEM32 or C:\WINDOWS\SYSTEM32)
Table 1.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Table 2.
Table 3.
Table 4.
Table 5.
Table 6.
Table 7.
Table 8.
Table 9.
Table 10.
Table 11.
Example 1.
?php $xmlstr = "?xml version='1.0 'standalone='yes'? !DOCTYPE chapter SYSTEM' / share / sgml / Norman_Walsh / db3xml10 / db3xml10.dtd '[!ENTITY sp \"spanish\"] !- - lsfj - - chapter language='en' title language='en 'Title / title para language='ge' amp;sp; !- - comment - - informaltable ID='findme 'language=' amp;sp; 'tgroup cols='3' tbody row entry a1 / entry entry morerows='1 'b1 / entry entry c1 / entry / row row entry a2 / entry entry c2 / entry / row row entry a3 / entry entry b3 / entry entry c3 / entry / row / tbody / tgroup / informaltable / para / chapter ";?
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These are functions dealing with error handling and logging.
The error reporting functions allow you to customize what level and kind of error feedback is given, ranging from simple notices to customized functions returned during errors.
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Note:
Note:
Note:
This is to make it easier to find scripts that need to be rewritten to using the string concatenator instead (.).
The constants below are always available as part of the PHP core.
Note:
Table 2.
Note that only '_BAR_', '~',' !', and '' will be understood within php.ini, however, and that no bitwise operators will be understood within php3.ini.
Example 1.
?php / / we will do our own error handling error_reporting( 0); / / user defined error handling function function userErrorHandler ($errno, $errmsg, $filename, $linenum, $vars) {/ / timestamp for the error entry $dt = date("Y-m-d H:i:s (T)"); / / define an assoc array of error string / / in reality the only entries we should / / consider are 2,8,256,512 and 1024 $errortype = array (1 = "Error", 2 = "Warning", 4 = "Parsing Error", 8 = "Notice", 16 = "Core Error", 32 = "Core Warning", 64 = "Compile Error", 128 = "Compile Warning", 256 = "User Error", 512 = "User Warning", 1024= "User Notice "); / / set of errors for which a var trace will be saved $user_errors = array(E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE); $err =" errorentry \n"; $err .= "\t datetime ".$dt. "/ datetime \n"; $err .= "\t errornum ".$errno." / errornum \n"; $err .= "\t errortype ".$errortype[$errno]. "/ errortype \n"; $err .= "\t errormsg ".$errmsg." / errormsg \n"; $err .= "\t scriptname ".$filename. "/ scriptname \n"; $err .= "\t scriptlinenum ".$linenum." / scriptlinenum \n"; if (in_array($errno, $user_errors)) $err .= "\t vartrace ".wddx_serialize_value($vars ,"Variables"). "/ vartrace \n"; $err .=" / errorentry \n\n"; / / for testing / / echo $err; / / save to the error log, and e-mail me if there is a critical user error error_log($err, 3, "/ usr / local / php4 / error.log"); if ($errno == E_USER_ERROR) mail("phpdev@example.com" ,"Critical User Error",$err);} function distance ($vect1, $vect2) {if (!is_array($vect1) _BAR_ _BAR_ !is_array($vect2)) {trigger_error("Incorrect parameters, arrays expected", E_USER_ERROR); return NULL;} if (count($vect1) != count($vect2)) {trigger_error("Vectors need to be of the same size", E_USER_ERROR); return NULL;} for ($i=0; $i count($vect1); $i++) {$c1 = $vect1[$i]; $c2 = $vect2[$i]; $d = 0.0; if (!is_numeric($c1)) {trigger_error("Coordinate $i in vector 1 is not a number, using zero", E_USER_WARNING); $c1 = 0.0;} if (!is_numeric($c2)) {trigger_error("Coordinate $i in vector 2 is not a number, using zero", E_USER_WARNING); $c2 = 0.0;} $d += $c2*$c2 - $c1*$c1;} return sqrt($d);} $old_error_handler = set_error_handler("userErrorHandler"); / / undefined constant, generates a warning $t = I_AM_NOT_DEFINED; / / define some "vectors" $a = array(2,3 ,"foo"); $b = array(5.5, 4.3, -1.6); $c = array (1,-3); / / generate a user error $t1 = distance($c,$b) ."\n"; / / generate another user error $t2 = distance($b ,"i am not an array") ."\n"; / / generate a warning $t3 = distance($a,$b) ."\n";?
Prev
Home
Next
Up
PHP Manual
Prev
Next
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to access FrontBase database servers.
This will force PHP to use the client libraries installed by FrontBase, avoiding any conflicts.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
PHP_INI_SYSTEM
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Forms Data Format (FDF) is a format for handling forms within PDF documents.
The FDF toolkit library is available in binary form only, platforms supported by Adobe are Win32, Linux, Solaris and AIX.
Note:
C:\WINNT\SYSTEM32 or C:\WINDOWS\SYSTEM32)
This extension has no configuration directives defined in php.ini.
A fdf resource is a handle to an opened fdf file. fdf resources may be obtained using fdf_create(), fdf_open() and fdf_open_string().
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow read-only access to data stored in filePro databases.
Prev
Home
Next
Up
PHP Manual
Prev
Next
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Filesystem and Streams Configuration Options
Name
Default
Changeable
allow_url_fopen
Here is a short explanation of the configuration directives.
This option enables the URL-aware fopen wrappers that enable accessing URL object like files.
Default wrappers are provided for the access of remote files using the ftp or http protocol, some extensions like zlib may register additional wrappers.
Note:
This option was introduced immediately after the release of version 4.0.3.
For versions up to and including 4.0.3 you can only disable this feature at compile time by using the configuration switch --disable-url-fopen-wrapper.
Warning
On Windows versions prior to PHP 4.3, the following functions do not support remote file accesing: include(), include_once(), require(), require_once() and the imagecreatefromXXX functions in the Reference XLI, Image functions extension.
Define the user agent for PHP to send.
Default timeout (in seconds) for socket based streams.
Note:
This configuration option was introduced in PHP 4.3.
Define the anonymous ftp password (your email address).
When turned on, PHP will examine the data read by fgets() and file() to see if it is using Unix, MS-Dos or Macintosh line-ending conventions.
This enables PHP to interoperate with Macintosh systems, but defaults to Off, as there is a very small performance penalty when detecting the EOL conventions for the first line, and also because people using carriage-returns as item separators under Unix systems would experience non-backwards-compatible behaviour.
Note:
This configuration option was introduced in PHP 4.3.
This extension has no constants defined.
For related functions, see also the Directory and Program Execution sections.
For a list and explanation of the various URL wrappers that can be used as remote files, see also Appendix I.
Prev
Home
Next
Up
PHP Manual
Prev
Next
FriBiDi is a free implementation of the Unicode Bidirectional Algorithm.
You must download and install the FriBiDi package.
To enable FriBiDi support in PHP you must compile --with-fribidi[ =DIR] where DIR is the FriBiDi install directory.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
No external libraries are needed to build this extension.
You do not need to load any additional extension in order to use these functions.
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
FTP example
Prev
Home
Next
Up
PHP Manual
Prev
Next
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no configuration directives defined in php.ini.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Please see the gettext documentation for your system for a thorough explanation of these functions or view the docs at http: / /www.gnu.org / manual / gettext / index.html.
Starting with PHP 4.2.3 the name changed to libintl-1.dll
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to work with arbitrary-length integers using the GNU MP library.
Most GMP functions accept GMP number arguments, defined as resource below.
Warning
Note:
Some functions may require more recent version of the GMP library.
In order to have these functions available, you must compile PHP with GMP support by using the --with-gmp option.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
Factorial function using GMP
Prev
Home
Next
Up
PHP Manual
Prev
Next
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Hyperwave has been developed at IICM in Graz.
Certain attributes are always set by the Hyperwave server, other may be modified by the user.
In order to activate the hwapi support in PHP you will have to install the Hyperwave SDK first.
After installing the Hyperwave SDK, configure PHP with --with-hwapi[ =DIR].
The integration with Apache and possible other servers is already described in the Hyperwave module which has been the first extension to connect a Hyperwave Server.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Hyperwave has been developed at IICM in Graz.
Number of object records.
This extension needs a Hyperwave server downloadable from http: / /www.hyperwave.com /.
As an alternative to the Rewrite Engine, you can also consider using the Apache ErrorDocument directive, but be aware, that ErrorDocument redirected pages cannot receive POST data.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
InterBase is a popular database put out by Borland / Inprise.
Note:
magic_quotes_sybase = On
Therfore you don 't need to copy gds32.dll from the DLL folder.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
PHP_INI_ALL
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This module contains an interface to the iconv library functions.
Starting with PHP 4.2.1 the name changed to iconv.dll
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
Table 2. iconv constants
Note:
Writing implementation-dependent scripts with these constants should be discouraged.
Prev
Home
Next
Up
PHP Manual
Prev
Next
IUS 9.x support is partly finished: the new data types are there, but SLOB and CLOB support is still under construction.
Make sure that the "INFORMIXDIR" variable has been set, and that $INFORMIXDIR / bin is in your PATH before you run the "configure "script.
To be able to use the functions defined in this module you must compile your PHP interpreter using the configure line --with_informix[ =DIR], where DIR is the Informix base install directory, defaults to nothing.
The behaviour of these functions is affected by settings in php.ini.
Note:
Table 1.
You can override this setting at runtime with ifx_nullformat().
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
PHP is not limited to creating just HTML output.
Note:
Read requirements section about how to expand image capabilities to read, write and modify images and to read meta data of pictures taken by digital cameras.
Note:
Table 1.
Table 2.
Note:
Table 3.
Table 4.
To enable support for native TrueType string function add --enable-gd-native-ttf.
The behaviour of these functions is affected by settings in php.ini.
Table 5.
The default is JIS.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
PNG creation with PHP
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions are not limited to the IMAP protocol, despite their name.
Note:
Note:
Warning
This is due to the fact that they both share the same internal symbol.
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The probably best known function of PHP - phpinfo() - can be found here.
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Note:
If magic_quotes_sybase is also on, a single-quote is escaped with a single-quote instead of a backslash.
This extension has no resource types defined.
The constants below are always available as part of the PHP core.
Table 2.
Table 3. phpinfo() constants
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to access Ingres II database servers.
If you already used PHP extensions to access other database servers, note that Ingres doesn' t allow concurrent queries and / or transaction over one connection, thus you won't find any result or transaction handle in this extension.
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Adding "export II_SYSTEM=" / home / ingres / II" in the script that starts Apache, just before launching httpd, should be fine.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
With IRCG you can rapidly stream XML data to thousands of concurrently connected users.
We urge you to use the provided installation script.
This extension has no configuration directives defined in php.ini.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
In order to enable this module on a Windows environment, you must copy jvm.dll from the DLL folder of the PHP / Win32 binary package to the SYSTEM32 folder of your windows machine. (Ex:C:\WINNT\SYSTEM32 or C:\WINDOWS\SYSTEM32)
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
This extension has no constants defined.
Example 1.
Java Example
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
LDAP is the Lightweight Directory Access Protocol, and is a protocol used to access "Directory Servers".
The Netscape SDK contains a helpful Programmer 's Guide in HTML format.
You will need to get and compile LDAP client libraries from either the University of Michigan ldap-3.3 package or the Netscape Directory SDK 3.0 to compile PHP with LDAP support.
C:\WINNT\SYSTEM32 or C:\WINDOWS\SYSTEM32)
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
?php / / basic sequence with LDAP is connect, bind, search, interpret search / / result, close connection echo "h3 LDAP query test / h3"; echo "Connecting.. ."; $ds=ldap_connect("localhost"); / / must be a valid LDAP server! echo "connect result is ".$ds. "p"; if ($ds) {echo "Binding.. ."; $r=ldap_bind($ds); / / this is an "anonymous "bind, typically / / read-only access echo "Bind result is ".$r." p "; echo "Searching for (sn=S*).. ."; / / Search surname entry $sr=ldap_search($ds ,"o=My Company, c=US", "sn=S*"); echo "Search result is ".$sr." p "; echo "Number of entires returned is ".ldap_count_entries($ds,$sr)." p "; echo "Getting entries... p"; $info = ldap_get_entries($ds, $sr); echo "Data for ".$info["count"]. "items returned: p"; for ($i=0; $i $info["count"]; $i++) {echo "dn is: ". $info[$i]["dn"]." br "; echo "first cn entry is:". $info[$i]["cn"][0]. "br"; echo "first email entry is: ". $info[$i]["mail"][0]." p ";} echo "Closing connection"; ldap_close($ds);} else {echo" h4 Unable to connect to LDAP server / h4 ";}?
Prev
Home
Next
Up
PHP Manual
Prev
Next
The mail() function allows you to send mail.
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
Table 1.
Name
Changeable
"localhost"
smtp_port
PHP_INI_ALL
NULL
sendmail_path
PHP_INI_SYSTEM
Here is a short explanation of the configuration directives.
DNS name or IP address of the SMTP server PHP should use for mail sent with the mail() function.
Used under Windows only:
Only available since PHP 4.3.0.
Where the sendmail program can be found, usually / usr / sbin / sendmail or / usr / lib / sendmail. configure does an honest attempt of locating this one for you and set a default, but if it fails, you can set it here.
Systems not using sendmail should set this directive to the sendmail wrapper / replacement their mail system offers, if any.
For example, Qmail users can normally set it to / var / qmail / bin / sendmail or / var / qmail / bin / qmail-inject.
qmail-inject does not require any option to process mail correctly.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These math functions will only handle values within the range of the integer and float types on your computer (this corresponds currently to the C types long resp. double).
If you need to handle bigger numbers, take a look at the arbitrary precision math functions.
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are always available as part of the PHP core.
Table 1.
Math constants
Constant
Value
Description
sqrt( pi) [4.0.2]
2 / sqrt( pi)
sqrt( 2)
sqrt( 3) [4.0.2]
1 / sqrt( 2)
Euler constant [4.0.2]
Prev
Home
Next
Up
PHP Manual
Prev
Next
There are many languages in which all characters can be expressed by single byte.
Note:
Note:
See the PostgreSQL manual for details.
Note:
Note:
Enable regular expression functions with multibyte character support.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Example 1. php.ini setting example
Example 2. php.ini setting for EUC-JP users
Example 3. php.ini setting for SJIS users
;; Enable Output Buffering output_buffering = On;; Set mb_output_handler to enable output conversion output_handler = mb_output_handler;; Set HTTP header charset default_charset = Shift_JIS;; Set default language to Japanese mbstring.language = Japanese;; Set http input encoding conversion to auto mbstring.http_input = auto;; Convert to SJIS mbstring.http_output = SJIS;; Set internal encoding to EUC-JP mbstring.internal_encoding = EUC-JP;; Do not print invalid characters mbstring.substitute_character = none
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 4.
Note:
Example 5. php.ini setting example
Example 6.
?php / / Enable output character encoding conversion only for this page / / Set HTTP output character encoding to SJIS mb_http_output( 'SJIS'); / / Start buffering and specify "mb_output_handler "as / / callback function ob_start('mb_output_handler');?
Note: "Supported character encoding" does not mean that it works as internal character code.
Table 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
MCAL stands for Modular Calendar Access Library.
Note:
Note:
Grab the latest version from http: / /mcal.chek.com / and compile and install it.
After you installed the mcal library, to get these functions to work, you have to compile PHP -with-mcal[ =DIR].
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Additionally, it supports RC6 and IDEA which are considered "non-free".
Make sure you compile libmcrypt with the option --disable-posix-threads.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Alternatively, you can transmit the IV together with the encrypted data (see chapter 9.3 of Applied Cryptography by Schneier (ISBN 0-471-11709-9) for a discussion of this topic).
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions interface the MCVE API (libmcve), allowing you to work directly with MCVE from your PHP scripts.
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions are intended to work with mhash.
Mhash can be used to create checksums, message digests, message authentication codes, and more.
This is an interface to the mhash library. mhash supports a wide variety of hash algorithms such as MD5, SHA1, GOST, and many others.
For a complete list of supported hashes, refer to the documentation of mhash.
The general rule is that you can access the hash algorithm from PHP with MHASH_HASHNAME.
For example, to access TIGER you use the PHP constant MHASH_TIGER.
To use it, download the mhash distribution from its web site and follow the included installation instructions.
You need to compile PHP with the --with-mhash[ =DIR] parameter to enable this extension.
DIR is the mhash install directory.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Here is a list of hashes which are currently supported by mhash.
If a hash is not listed here, but is listed by mhash as supported, you can safely assume that this documentation is outdated.
Example 1.
Compute the MD5 digest and hmac and print it out as hex
?php $input = "what do ya want for nothing ?"; $hash = mhash (MHASH_MD5, $input); print "The hash is ".bin2hex ($hash)." br / \n"; $hash = mhash (MHASH_MD5, $input, "Jefe"); print "The hmac is ".bin2hex ($hash). "br / \n";?
This will produce:
The hash is d03cb659cbf9192dcd066272249f8412 The hmac is 750c783e6ab0b503eaa86e310a5db738
Prev
Home
Next
Up
PHP Manual
Prev
Next
See the source code for further historic and copyright information.
No external libraries are needed to build this extension.
This file also part of most recent Linux distributions and usually stored in the / usr / share / misc directory.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
PHP_INI_SYSTEM
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Ming provides some insulation from the mundane details of the SWF file format, wrapping the movie elements in PHP objects.
Also, Ming is still being maintained; if there's a feature that you want to see, just let us know ming@opaque.net.
Ming was added in PHP 4.0.5.
To use Ming with PHP, you first need to build and install the Ming library.
Source code and installation instructions are available at the Ming home page: http: / /ming.sourceforge.net / along with examples, a small tutorial, and the latest news.
Download the ming archive.
Unpack the archive.
Go in the Ming directory. make. make install.
This will build libming.so and install it into / usr / lib /, and copy ming.h into / usr / include /.
Edit the PREFIX= line in the Makefile to change the installation directory.
Example 1. built into php (unix)
mkdir phpdir / ext / ming cp php_ext / * phpdir / ext / ming cd phpdir. / buildconf. / configure --with-ming other config options
Now either just add extension=php_ming.so to your php.ini file, or put dl( 'php_ming.so'); at the head of all of your Ming scripts.
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
The classes below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Ming introduces 13 new objects in PHP, all with matching methods and attributes.
To use them, you need to know about objects.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions were placed here because none of the other categories seemed to fit.
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Misc.
Configuration Options
Name
Default
Changeable
Here is a short explanation of the configuration directives.
TRUE by default.
If changed to FALSE scripts will be terminated as soon as they try to output something after a client has aborted their connection.
See also ignore_user_abort().
Colors for Syntax Highlighting mode.
Anything that' s acceptable in font color="?????? "would work.
Name (e.g.: browscap.ini )and location of browser capabilities file.
See also get_browser().
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Thus, if you use mnoGoSearch with MySQL, during PHP configuration you have to indicate the directory of your MySQL installation, that was used during mnoGoSearch configuration, i.e. for example: --with-mnogosearch --with-mysql= / usr.
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
msession is an interface to a high speed session daemon which can run either locally or remotely.
Note:
This extension is not available on Windows platforms.
To enable Msession support configure PHP --with-msession[ =DIR], where DIR is the Msession install directory.
Prev
Home
Next
Up
PHP Manual
Prev
Next
More information about mSQL can be found at http: / /www.hughes.com.au /.
C:\WINNT\SYSTEM32 or C:\WINDOWS\SYSTEM32)
The behaviour of these functions is affected by settings in php.ini.
Table 1. mSQL configuration options
The maximum number of mSQL connections per process, including persistent connections.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to access MS SQL Server database.
Requirements for WIn32 platforms.
The extension requires the MS SQL Client Tools to be installed on the system where PHP is installed.
The Client Tools can be installed from the MS SQL Server CD or by copying ntwdblib.dll from \winnt\system32 on the server to \winnt\system32 on the PHP box.
Copying ntwdblib.dll will only provide access.
Requirements for Unix / Linux platforms.
Source code and installation instructions are available at the FreeTDS home page: http: / /www.freetds.org /
The MSSQL extension is enabled by adding extension=php_mssql.dll to php.ini.
To get these functions to work, you have to compile PHP with --with-mssql[ =DIR], where DIR is the FreeTDS install prefix.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
MS SQL Server configuration options
Name
Default
Changeable
PHP_INI_ALL
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to access MySQL database servers.
More information about MySQL can be found at http: / /www.mysql.com /.
Documentation for MySQL can be found at http: / /www.mysql.com / documentation /.
In order to have these functions available, you must compile PHP with MySQL support.
By using the --with-mysql[ =DIR] configuration option you enable PHP to access MySQL databases.
If you use this option without specifying the path to MySQL, PHP will use the built-in MySQL client libraries.
With PHP 4 MySQL support is always enabled; if you don't specify the configure option, the bundled libraries are used.
Users who run other applications that use MySQL (for example, running PHP 3 and PHP 4 as concurrent apache modules, or auth-mysql) should always specify the path to MySQL: --with-mysql= / path / to / mysql.
The windows version of PHP The windows version of PHP has built in support for this extension.
You do not need to load any additional extension in order to use these functions.
Warning
Crashes and startup problems of PHP may be encountered when loading this extension in conjunction with the recode extension.
See the recode extension for more information.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
MySQL Configuration Options
Name
Default
Changeable
Here is a short explanation of the configuration directives.
Whether to allow persistent connections to MySQL.
The maximum number of persistent MySQL connections per process.
The maximum number of MySQL connections per process, including persistent connections.
The default TCP port number to use when connecting to the database server if no other port is specified.
If no default is specified, the port will be obtained from the MYSQL_TCP_PORT environment variable, the mysql-tcp entry in / etc / services or the compile-time MYSQL_PORT constant, in that order.
Win32 will only use the MYSQL_PORT constant.
The default socket name to use when connecting to a local database server if no other socket name is specified.
The default server host to use when connecting to the database server if no other host is specified.
Doesn 't apply in safe mode.
The default user name to use when connecting to the database server if no other name is specified.
Doesn 't apply in safe mode.
The default password to use when connecting to the database server if no other password is specified.
Doesn 't apply in safe mode.
Connect timeout in seconds.
On Linux this timeout is also used for waiting for the first answer from the server.
There are two resource types used in the MySQL module.
The first one is the link identifier for a database connection, the second a resource which holds the result of a query.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
The following constants are defined:
Table 2.
MySQL client constants
constant
description
use compression protocol
Allow space after function names
Allow interactive_timeout seconds (instead of wait_timeout) of inactivity before closing the connection.
The function mysql_fetch_array() uses a constant for the different types of result arrays.
The following constants are defined:
Table 3.
constant
description
Columns are returned into the array having the fieldname as the array index.
Columns are returned into the array having both a numerical index and the fieldname as the array index.
Columns are returned into the array having a numerical index to the fields.
This index starts with 0, the first field in the result.
This simple example shows how to connect, execute a query, print resulting rows and disconnect from a MySQL database.
Example 1.
MySQL extension overview example
?php / * Connecting, selecting database * / $link = mysql_connect( "mysql_host", "mysql_user", "mysql_password") or die("Could not connect"); print "Connected successfully"; mysql_select_db("my_database") or die("Could not select database"); / * Performing SQL query * / $query = "SELECT * FROM my_table"; $result = mysql_query($query) or die("Query failed"); / * Printing results in HTML * / print "table \n"; while ($line = mysql_fetch_array($result, MYSQL_ASSOC)) {print "\t tr \n"; foreach ($line as $col_value) {print "\t\t td $col_value / td \n";} print "\t / tr \n";} print" / table \n"; / * Free resultset * / mysql_free_result($result); / * Closing connection * / mysql_close($link);?
Prev
Home
Next
Up
PHP Manual
Prev
Next
ncurses (new curses) is a free software emulation of curses in System V Rel 4.0 (and above).
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Download the latest version from the ftp: / /ftp.gnu.org / pub / gnu / ncurses / or from an other GNU-Mirror.
To get these functions to work, you have to compile the CGI or CLI version of PHP with --with-ncurses[ =DIR].
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Table 2. ncurses color constants
magenta - supported when terminal is in color mod
Table 3. ncurses key constants
Table 4. mouse constants
Prev
Home
Next
Up
PHP Manual
Prev
Next
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Network Configuration Options
Name
At runtime, you can define these variables by calling define_syslog_variables().
This extension has no resource types defined.
The constants below are always available as part of the PHP core.
Table 2. openlog() Options
Table 3. syslog() Priorities (in descending order)
Table 4. dns_get_record() Options
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
This extension is not available on Windows platforms.
None besides functions from standard Unix libraries which are always available (either libc or libnsl, configure will detect which one to use).
To get these functions to work, you have to configure PHP with --enable-yp.
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Example 1.
Example 2.
In fact object aggregation can be more flexible, in which we can select what methods or properties to "inherit" in the aggregated object.
Example 3. storage_classes.inc
Example 4. test_aggregation.php
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions allow you to access Oracle8 and Oracle7 databases.
It supports binding of global and local PHP variables to Oracle placeholders, has full LOB, FILE and ROWID support and allows you to use user-supplied define variables.
Please note that on some systems like UnixWare it is libthread instead of libpthread.
You have to compile PHP with the option --with-oci8[ =DIR], where DIR defaults to your environmment variable ORACLE_HOME.
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
You do not need to load any additional extension in order to use these functions.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Note:
Specifies the number of bytes returned to variables.
Handling of binary data.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
PHP-4.0.4pl1 requires OpenSSL = 0.9.6, but PHP-4.0.5 and greater will also work with OpenSSL = 0.9.5.
Note that it is possible to override the default path from the script using the configargs of the functions that require a configuration file.
This extension has no configuration directives defined in php.ini.
For private keys, you may also use the syntax array( $key, $passphrase) where $key represents a key specified using the file: / / or textual content notation above, and $passphrase represents a string containing the passphrase for that private key
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Table 1.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
This extension adds support for Oracle database server access.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The Output Control functions allow you to control when output is sent from the script.
The Output Control functions do not affect headers sent using header() or setcookie(), only functions such as echo() and data between blocks of PHP code.
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
Note:
This value defaults to TRUE when operating under the CLI SAPI.
See also ob_implicit_flush().
This extension has no resource types defined.
This extension has no constants defined.
Example 1.
Output Control example
Note:
When upgrading from PHP 4.1 (and 4.2) to 4.3 that due to a bug in earlier versions you must ensure that implict_flush is OFF in your php.ini, otherwise any output with ob_start() will be not be hidden from output.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The purpose of this extension is to allow overloading of object property access and method calls.
Only one function is defined in this extension, overload() which takes the name of the class that should have this functionality enabled.
The class named has to define appropriate methods if it wants to have this functionality: __get(), __set() and __call() respectively for getting / setting a property, or calling a method.
This way overloading can be selective.
Inside these handler functions the overloading is disabled so you can access object properties normally.
Warning
This extension is EXPERIMENTAL.
Use this extension at your own risk.
No external libraries are needed to build this extension.
In order to use these functions, you must compile PHP with the --enable-overload In order to use these functions, you must compile PHP with the --enable-overload option.
Starting with PHP 4.3.0 this extension is enabled by default.
The windows version of PHP The windows version of PHP has built in support for this extension.
You do not need to load any additional extension in order to use these functions.
Note:
Builtin support for overload is available with PHP 4.3.0.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Some simple examples on using the overload() function:
Example 1.
Overloading a PHP class
?php class OO {var $a = 111; var $elem = array('b '= 9, 'c' = 42); / / Callback method for getting a property function __get($prop_name, $prop_value) {if (isset($this - elem[$prop_name])) {$prop_value = $this - elem[$prop_name]; return true;} else {return false;}} / / Callback method for setting a property function __set($prop_name, $prop_value) {$this - elem[$prop_name] = $prop_value; return true;}} / / Here we overload the OO object overload('OO'); $o = new OO; print "\$o - a: $o - a\n"; / / print: $o - a: print "\$o - b: $o - b\n"; / / print: $o - b:
9 print "\$o - c: $o - c\n"; / / print: $o - c:
42 print "\$o - d: $o - d\n"; / / print: $o - d: / / add a new item to the $elem array in OO $o - x = 56; / / instantiate stdclass (it is built-in in PHP 4) / / $val is not overloaded! $val = new stdclass; $val - prop = 555; / / Set "a" to be an array with the $val object in it / / But __set() will put this in the $elem array $o - a = array($val); var_dump($o - a[0] - prop);?
Warning
As this is an experimental extension, not all things work.
There is no __call() support currently, you can only overload the get and set operations for properties.
You cannot invoke the original overloading handlers of the class, and __set() only works to one level of property access.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
You 'll need to install the sqlcli library available in the Ovrimos SQL Server distribution.
DIR is the Ovrimos' libsqlcli install directory.
This extension has no configuration directives defined in php.ini.
Example 1.
Connect to Ovrimos SQL Server and select from a system table
Prev
Home
Next
Up
PHP Manual
Prev
Next
Process Control support in PHP implements the Unix style of process creation, program execution, signal handling and process termination.
Note:
This extension is not available on Windows platforms.
No external libraries are needed to build this extension.
Note:
Currently, this module will not function on non-Unix platforms (Windows).
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
Please see your systems signal( 7) man page for details of the default behavior of these signals.
Example 1.
?php declare( ticks=1); $pid = pcntl_fork(); if ($pid == -1) {die("could not fork");} else if ($pid) {exit(); / / we are the parent} else {/ / we are the child} / / detatch from the controlling terminal if (!posix_setsid()) {die("could not detach from terminal");} / / setup signal handlers pcntl_signal(SIGTERM, "sig_handler"); pcntl_signal(SIGHUP, "sig_handler"); / / loop forever performing tasks while(1) {/ / do something interesting here} function sig_handler($signo) {switch($signo) {case SIGTERM: / / handle shutdown tasks exit; break; case SIGHUP: / / handle restart tasks break; default: / / handle all other signals}}?
Prev
Home
Next
Up
PHP Manual
Prev
Next
The syntax for patterns used in these functions closely resembles Perl.
It is available at ftp: / /ftp.csx.cam.ac.uk / pub / software / programming / pcre /.
You do not need to load any additional extension in order to use these functions.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Table 1.
This flag is available since PHP 4.3.0 and is only used for preg_split().
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The PDF functions in PHP can create PDF files using the PDFlib library created by Thomas Merz.
When using version 3.x of PDFlib, you should configure PDFlib with the option --enable-shared-pdflib.
This extension has no configuration directives defined in php.ini.
Table 1.
pdf_get_value() passing "imageheight "as the second parameter and the image as the third parameter.
Example 1.
Example 2. pdfclock example from PDFlib distribution
?php $radius = 200; $margin = 20; $pagecount = 10; $pdf = pdf_new(); if (!pdf_open_file($pdf, "")) {print error; exit;}; pdf_set_parameter($pdf, "warning", "true"); pdf_set_info($pdf, "Creator", "pdf_clock.php"); pdf_set_info($pdf, "Author", "Uwe Steinmann"); pdf_set_info($pdf, "Title", "Analog Clock"); while($pagecount- - 0) {pdf_begin_page($pdf, 2 * ($radius + $margin), 2 * ($radius + $margin)); pdf_set_parameter($pdf, "transition", "wipe"); pdf_set_value($pdf, "duration", 0.5); pdf_translate($pdf, $radius + $margin, $radius + $margin); pdf_save($pdf); pdf_setrgbcolor($pdf, 0.0, 0.0, 1.0); / * minute strokes * / pdf_setlinewidth($pdf, 2.0); for ($alpha = 0; $alpha 360; $alpha += 6) {pdf_rotate($pdf, 6.0); pdf_moveto($pdf, $radius, 0.0); pdf_lineto($pdf, $radius-$margin / 3, 0.0); pdf_stroke($pdf);} pdf_restore($pdf); pdf_save($pdf); / * 5 minute strokes * / pdf_setlinewidth($pdf, 3.0); for ($alpha = 0; $alpha 360; $alpha += 30) {pdf_rotate($pdf, 30.0); pdf_moveto($pdf, $radius, 0.0); pdf_lineto($pdf, $radius-$margin, 0.0); pdf_stroke($pdf);} $ltime = getdate(); / * draw hour hand * / pdf_save($pdf); pdf_rotate($pdf, -(($ltime['minutes'] / 60.0)+$ltime['hours']-3.0)*30.0); pdf_moveto($pdf, -$radius / 10, -$radius / 20); pdf_lineto($pdf, $radius / 2, 0.0); pdf_lineto($pdf, -$radius / 10, $radius / 20); pdf_closepath($pdf); pdf_fill($pdf); pdf_restore($pdf); / * draw minute hand * / pdf_save($pdf); pdf_rotate($pdf, -(($ltime['seconds'] / 60.0)+$ltime['minutes']-15.0)*6.0); pdf_moveto($pdf, -$radius / 10, -$radius / 20); pdf_lineto($pdf, $radius * 0.8, 0.0); pdf_lineto($pdf, -$radius / 10, $radius / 20); pdf_closepath($pdf); pdf_fill($pdf); pdf_restore($pdf); / * draw second hand * / pdf_setrgbcolor($pdf, 1.0, 0.0, 0.0); pdf_setlinewidth($pdf, 2); pdf_save($pdf); pdf_rotate($pdf, -(($ltime['seconds'] - 15.0) * 6.0)); pdf_moveto($pdf, -$radius / 5, 0.0); pdf_lineto($pdf, $radius, 0.0); pdf_stroke($pdf); pdf_restore($pdf); / * draw little circle at center * / pdf_circle($pdf, 0, 0, $radius / 30); pdf_fill($pdf); pdf_restore($pdf); pdf_end_page($pdf); # to see some difference sleep(1);} pdf_close($pdf); $buf = pdf_get_buffer($pdf); $len = strlen($buf); header("Content-type: application / pdf"); header("Content-Length: $len"); header("Content-Disposition: inline; filename=foo.pdf"); print $buf; pdf_delete($pdf);?
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Copy the header file pfpro.h to / usr / local / include and the library file libpfpro.so to / usr / local / lib.
These functions are only available if PHP has been compiled with the --with-pfpro[ =DIR] option.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
PostgreSQL database is Open Source product and available without cost.
Postgres, developed originally in the UC Berkeley Computer Science Department, pioneered many of the object-relational concepts now becoming available in some commercial databases.
It provides SQL92 / SQL99 language support, transaction integrity and type extensibility.
PostgreSQL is an open source descendant of this original Berkeley code.
To use PostgreSQL support, you need PostgreSQL 6.5 or later, PostgreSQL 7.0 or later to enable all PostgreSQL module features.
PostgreSQL supports many character encoding including multibyte character encoding.
The current version and more information about PostgreSQL is available at http: / /www.postgresql.org /.
In order to enable PostgreSQL support, --with-pgsql[ =DIR] is required when you compile PHP.
If shared object module is available, PostgreSQL module may be loaded using extension directive in php.ini or dl() function.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
PostgreSQL configuration options
Name
Default
Changeable
Here is a short explanation of the configuration directives.
Whether to allow persistent Postgres connections.
The maximum number of persistent Postgres connections per process.
The maximum number of Postgres connections per process, including persistent connections.
Warning
Using the PostgreSQL module with PHP 4.0.6 is not recommended due to a bug in the notice message handling code.
Use 4.1.0 or later.
Warning
PostgreSQL function names will be changed in 4.2.0 release to confirm to current coding standards.
Most of new names will have additional underscores, e.g. pg_lo_open().
Some functions are renamed to different name for consistency. e.g. pg_exec() to pg_query().
Table 2.
Function names changed
New name
The old pg_connect() / pg_pconnect() syntax will be deprecated to support asynchronous connections in the future.
Please use a connection string for pg_connect() and pg_pconnect().
Not all functions are supported by all builds.
It depends on your libpq (The PostgreSQL C Client interface) version and how libpq is compiled.
If there is missing function, libpq does not support the feature required for the function.
It is also important that you do not use an older libpq than the PostgreSQL Server to which you will be connecting.
If you use libpq older than PostgreSQL Server expects, you may have problems.
Since version 6.3 (03 / 02 / 1998) PostgreSQL uses unix domain sockets by default.
TCP port will NOT be opened by default.
A table is shown below describing these new connection possibilities.
This socket will be found in / tmp / .s.PGSQL.5432.
This option can be enabled with the '-i' flag to postmaster and it's meaning is: "listen on TCP / IP sockets as well as Unix domain sockets ".
Table 3.
Postmaster and PHP
A connection to PostgreSQL server can be established with the following value pairs set in the command string: $conn = pg_connect( "host=myHost port=myPort tty=myTTY options=myOptions dbname=myDB user=myUser password=myPassword ");
The previous syntax of: $conn = pg_connect ("host", "port", "options", "tty", "dbname") has been deprecated.
Environmental variables affect PostgreSQL server / client behavior.
For example, PostgreSQL module will lookup PGHOST environment variable when the hostname is omitted in the connection string.
Supported environment variables are different from version to version.
Refer to PostgreSQL Programmer' s Manual (libpq - Environment Variables) for details.
Make sure you set environment variables for appropriate user.
Use $_ENV or getenv() to check which environment variables are available to the current process.
Example 1.
Setting default parameters
PGHOST=pgsql.example.com PGPORT=7890 PGDATABASE=web-system PGUSER=web-user PGPASSWORD=secret PGDATESTYLE=ISO PGTZ=JST PGCLIENTENCODING=EUC-JP export PGHOST PGPORT PGDATABASE PGUSER PGPASSWORD PGDATESTYLE PGTZ PGCLIENTENCODING
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Starting with PostgreSQL 7.1.0, you can store up to 1GB into a field of type text.
In older versions, this was limited to the block size (default was 8KB, maximum was 32KB, defined at compile time)
To use the large object (lo) interface, it is required to enclose large object functions within a transaction block.
A transaction block starts with a SQL statement BEGIN and if the transaction was valid ends with COMMIT or END.
If the transaction fails the transaction should be closed with ROLLBACK or ABORT.
Example 2.
Using Large Objects
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
Note:
This extension is not available on Windows platforms.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions are only available under Windows 9.x, ME, NT4 and 2000.
They have been added in PHP 4.0.4.
Table 1.
Printer configuration options
Name
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
This extension is not available on Windows platforms.
To compile PHP with pspell support, you need the aspell and pspell libraries, available from http: / /aspell.sourceforge.net / and http: / /aspell.net / respectively.
If you have the libraries needed add the --with-pspell[ =dir] option when compiling PHP.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Note:
This extension is not available on Windows platforms.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The readline() functions implement an interface to the GNU Readline library.
Note:
The libedit library is BSD licensend and available for download from http: / /sourceforge.net / projects / libedit /.
In order you want to use the libedit readline replacement, configure PHP --with-libedit[ =DIR].
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This module contains an interface to the GNU Recode library, version 3.5.
Note:
Warning
Warning
This is due to the fact that they both share the same internal symbol.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
PHP also supports regular expressions using a Perl-compatible syntax using the PCRE functions.
Warning
No external libraries are needed to build this extension.
Note:
You do not need to load any additional extension in order to use these functions.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Example 1.
ereg ("abc", $string); / * Returns true if"abc "is found anywhere in $string. * / ereg ("^abc", $string); / * Returns true if "abc"; is found at the beginning of $string. * / ereg ("abc$", $string); / * Returns true if "abc" is found at the end of $string. * / eregi ("(ozilla .[23]_BAR_MSIE.3)", $HTTP_USER_AGENT); / * Returns true if client browser is Netscape 2, 3 or MSIE 3. * / ereg ("([[:alnum :]]+) ([[:alnum :]]+) ([[:alnum :]]+)", $string,$regs); / * Places three space separated words into $regs[1], $regs[2] and $regs[3]. * / $string = ereg_replace ("^", "br /", $string); / * Put a br / tag at the beginning of $string. * / $string = ereg_replace ("$", "br /", $string); / * Put a br /; tag at the end of $string. * / $string = ereg_replace ("\n", "", $string); / * Get rid of any newline characters in $string. * /
Prev
Home
Next
Up
PHP Manual
Prev
Next
This module provides wrappers for the System V IPC family of functions.
Table 1.
Note:
This extension is not available on Windows platforms.
No external libraries are needed to build this extension.
To enable the System V messages support compile PHP with the option --enable-sysvmsg.
The behaviour of these functions is affected by settings in php.ini.
Table 2.
PHP_INI_ALL
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
SESAM / SQL-Server is a mainframe database system, developed by Fujitsu Siemens Computers, Germany.
Note:
PHP 4 does not support the SESAM database.
The behaviour of these functions is affected by settings in php.ini.
The message catalog must be set ACCESS=READ,SHARE=YES because it must be readable by the apache server 's user id.
Table 1.
Because the SQL command quoting for single quotes uses duplicated single quotes (as opposed to a single quote preceded by a backslash, used in some other databases), it is advisable to set the PHP configuration directives php3_magic_quotes_gpc and php3_magic_quotes_sybase to On for all PHP scripts using the SESAM interface.
Table 2.
Restrict access to php scripts which must administer the database by using password control and / or SSL security.
When specifying RESTRICT, an error is returned if there are dependent objects (e.g., VIEWs), while with CASCADE, dependent objects will be deleted along with the specified table.
Table 3.
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Session support in PHP consists of a way to preserve certain data across subsequent accesses.
This enables you to build more customized applications and increase the appeal of your web site.
A visitor accessing your web site is assigned an unique id, the so-called session id.
The session support allows you to register arbitrary numbers of variables to be preserved across requests.
All registered variables are serialized after the request finishes.
On subsequent accesses, these are not defined by the session module unless the user defines them later.
Please note when working with sessions that a record of a session is not created until a variable has been registered using the session_register() function or by adding a new key to the $_SESSION superglobal array.
External links:
The session module cannot guarantee that the information you store in a session is only viewed by the user who created the session.
Assess the importance of the data carried by your sessions and deploy addditional protections - - this usually comes at a price, reduced convenience for the user.
For example, if you want to protect users from simple social engineering tactics, you need to enable session.use_only_cookies.
There are several ways to leak an existing session id to third parties.
First, URLs carrying session ids.
Second, a more active attacker might listen to your network traffic.
If it is not encrypted, session ids will flow in plain text over the network.
The solution here is to implement SSL on your server and make it mandatory for users.
Note:
Engelschall, for session storage.
This option is not available for Windows platforms.
Note that the session storage module for mm does not guarantee that concurrent accesses to the same session are properly locked.
Session support is enabled in PHP by default.
If you would not like to build your PHP with session support, you should specify the --disable-session option to configure.
The windows version of PHP The windows version of PHP has built in support for this extension.
The behaviour of these functions is affected by settings in php.ini.
Session configuration options
session.save_path
session.save_handler
session.auto_start
session.gc_probability
session.gc_maxlifetime
session.serialize_handler
session.cookie_lifetime
session.cookie_path
session.cookie_domain
session.cookie_secure
session.use_cookies
session.use_only_cookies
session.referer_check
session.entropy_file
session.entropy_length
session.cache_limiter
session.cache_expire
session.use_trans_sid
PHP_INI_SYSTEM _BAR_ PHP_INI_PERDIR
"a=href,area=href,frame=src,input=src,form=fakeentry"
The session management system supports a number of configuration options which you can place in your php.ini file.
session.save_handler defines the name of the handler which is used for storing and retrieving data associated with a session.
See also session_set_save_handler().
If you choose the default files handler, this is the path where the files are created.
See also session_save_path().
If you leave this set to a world-readable directory, such as / tmp (the default), other users on the server may be able to hijack sessions by getting the list of files in that directory.
Windows users have to change this variable in order to use PHP 's session functions.
session.name session.name specifies the name of the session which is used as cookie name.
Defaults to PHPSESSID.
session.auto_start specifies whether the session module starts a session automatically on request startup.
Defaults to 0 (disabled).
Currently, a PHP internal format (name php) and WDDX is supported (name wddx).
WDDX is only available, if PHP is compiled with WDDX support.
session.gc_probability specifies the probability that the gc (garbage collection) routine is started on each request in percent.
Defaults to 1.
Note:
Windows FAT does not so you will have to come up with another way to handle garbage collecting your session if you are stuck with a FAT filesystem or any other fs where atime tracking is not available.
If the Referer was sent by the client and the substring was not found, the embedded session id will be marked as invalid.
Defaults to the empty string.
Examples are / dev / random or / dev / urandom which are available on many Unix systems.
session.entropy_length specifies the number of bytes which will be read from the file specified above.
session.use_cookies session.use_cookies specifies whether the module will use cookies to store the session id on the client side.
Defaults to 1 (enabled).
Defaults to 0 (disabled, for backward compatibility).
This setting was added in PHP 4.3.0.
The value 0 means "until the browser is closed." Defaults to 0 .See also session_get_cookie_params() and session_set_cookie_params().
session.cookie_path session.cookie_path specifies path to set in session_cookie.
session.cookie_domain specifies the domain to set in session_cookie.
See also session_get_cookie_params() and session_set_cookie_params().
Defaults to off.
See also session_get_cookie_params() and session_set_cookie_params().
Defaults to nocache.
Defaults to 180.
See also session_cache_expire().
Defaults to 0 (disabled).
For PHP 4.1.2 or less, it is enabled by compiling with --enable-trans-sid.
URL based session management has additional security risks compared to cookie based session management.
url_rewriter.tags url_rewriter.tags specifies which html tags are rewritten to include session id if transparent sid support is enabled.
The track_vars and register_globals configuration settings influence how the session variables get stored and restored.
Note:
As of PHP 4.0.3, track_vars is always turned on.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Note:
Unlike $HTTP_SESSION_VARS, $_SESSION is always global.
Therefore, you do not need to use the global keyword for $_SESSION.
Please note that this documentation has been changed to use $_SESSION everywhere.
You can substitute $HTTP_SESSION_VARS for $_SESSION, if you prefer the former.
For more details see the section on variables in this manual.
If register_globals is disabled, only members of the global associative array $_SESSION can be registered as session variables.
Session variables are accessible like any other variables.
?php session_start(); / / Use $HTTP_SESSION_VARS with PHP 4.0.6 or less if (!isset($_SESSION['count'])) {$_SESSION['count'] = 0;} else {$_SESSION['count']++;}?
Example 2.
?php session_start(); / / Use $HTTP_SESSION_VARS with PHP 4.0.6 or less unset($_SESSION['count']);?
?php session_start(); / / With PHP 4.3 and later, you can also simply use the prior example. session_unregister('count');?
If register_globals is enabled, then each global variable can be registered as session variable.
Upon a restart of a session, these variables will be restored to corresponding global variables.
If you are using $_SESSION and disable register_globals, do not use session_register(), session_is_registered() and session_unregister(), if your scripts shall work in PHP 4.2 and earlier.
If you enable register_globals, session_unregister() If you enable register_globals, session_unregister() should be used since session variables are registered as global variables when session data is deserialized.
Disabling register_globals is recommended for both security and performance reasons.
Registering a variable with register_globals enabled
There is a defect in PHP 4.2.3 and earlier.
If you register a new session variable by using session_register(), the entry in the global scope and the $_SESSION entry will not reference the same value until the next session_start().
This has been corrected in PHP 4.3.
Cookies
The session module supports both methods.
Cookies are optimal, but because they are not always available, we also provide an alternative way.
PHP is capable of transforming links transparently.
Unless you are using PHP 4.2 or later, you need to enable it manually when building PHP.
Under UNIX, pass --enable-trans-sid to configure.
If this build option and the run-time option session.use_trans_sid are enabled, relative URIs will be changed to contain the session id automatically.
The arg_separator.output php.ini directive allows to customize the argument seperator.
For full XHTML conformance, specify amp; there.
Alternatively, you can use the constant SID which is always defined.
The following example demonstrates how to register a variable, and how to link correctly to another page using SID.
Counting the number of hits of a single user
?php if (!session_is_registered('count')) {session_register('count'); $count = 1;} else {$count++;}?
The ?php echo SID? (?=SID? can be used if short_open_tag is enabled) is necessary to preserve the session id in the case that the user has disabled cookies.
Note:
To implement database storage, or any other storage method, you will need to use session_set_save_handler() to create a set of user-level storage functions.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Shmop is an easy to use set of functions that allows PHP to read, write, create and delete UNIX shared memory segments.
Note:
In PHP 4.0.3, these functions were prefixed by shm rather than shmop.
No external libraries are needed to build this extension.
To use shmop you will need to compile PHP with the --enable-shmop parameter in your configure line.
This extension has no configuration directives defined in php.ini.
This extension has no constants defined.
Example 1.
Shared Memory Operations Overview
Prev
Home
Next
Up
PHP Manual
Prev
Next
In order to use the SNMP functions on Unix you need to install the UCD SNMP package.
On Windows these functions are only available on NT and not on Win95 / 98.
In order to use the UCD SNMP package, you need to define NO_ZEROLENGTH_COMMUNITY to 1 before compiling it.
This directory should be moved to DRIVE:\usr\mibs, where DRIVE must be replaced with the driveletter where PHP is installed on, e.g.: c:\usr\mibs.
This extension has no configuration directives defined in php.ini.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
No external libraries are needed to build this extension.
The socket functions described here are part of an extension to PHP which must be enabled at compile time by giving the --enable-sockets option to configure.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Note:
Die Adresse wird bereits verwendet
Example 1.
Example 2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
There are many wrappers built into PHP by default (See Appendix I), and additional, custom wrappers may be added either within a PHP script using stream_register_wrapper(), or directly from an extension using the API Reference in Chapter 43.
Custom filters can be defined in a PHP script using stream_register_filter() or in an extension using the API Reference in Chapter 43.
See Appendix I for a list of PHP builtin wrappers.
Again, see Appendix I for a description of targets for builtin streams.
No external libraries are needed to build this extension.
No steps are required to enable them.
This extension has no configuration directives defined in php.ini.
See the manual page for stream_register_filter() for details on implementing user defined filters.
As with most PHP internal functions if a failure occours an E_WARNING message will be generated describing the nature of the error.
Example 1.
Example 2.
Example 3.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions all manipulate strings in various ways.
Some more specialized sections can be found in the regular expression and URL handling sections.
For information on how strings behave, especially with regard to usage of single quotes, double quotes, and escape sequences, see the Strings entry in the Types section of the manual.
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no constants defined.
For even more powerful string handling and manipulating functions take a look at the POSIX regular expression functions and the Perl compatible regular expression functions.
Prev
Home
Next
Up
PHP Manual
Prev
Next
PHP offers the ability to create Shockwave Flash files via Paul Haeberli 's libswf module.
Note:
The libswf does not have support for Windows.
Consequently you will have to copy the files to the proper location manually.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
If magic_quotes_sybase is on, a single-quote is escaped with a single-quote instead of a backslash if magic_quotes_gpc or magic_quotes_runtime are enabled.
This value can also be set from a script by calling sybase_min_client_severity().
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
No external libraries are needed to build this extension.
Note:
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
No external libraries are needed to build this extension.
This extension has no configuration directives defined in php.ini.
Prev
Home
Next
Up
PHP Manual
Prev
Next
No external libraries are needed to build this extension.
There is no installation needed to use these functions; they are part of the PHP core.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
See also unserialize().
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This extension is a generic extension API to DLLs.
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
There is no installation needed to use these functions; they are part of the PHP core.
This extension has no configuration directives defined in php.ini.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions are intended for work with WDDX.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Example 1.
Example 2.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
XML (eXtensible Markup Language) is a data format for structured document interchange on the Web.
The windows version of PHP The windows version of PHP has built in support for this extension.
You do not need to load any additional extension in order to use these functions.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Table 1.
This behaviour can be queried and controlled per XML parser with the xml_parser_get_option() and xml_parser_set_option() functions, respectively.
Currently, this means that such characters are replaced by a question mark.
Example 1.
$file = "data.xml"; $depth = array(); function startElement($parser, $name, $attrs) {global $depth; for ($i = 0; $i $depth[$parser]; $i++) {print" ";} print "$name\n"; $depth[$parser]++;} function endElement($parser, $name) {global $depth; $depth[$parser]--;} $xml_parser = xml_parser_create(); xml_set_element_handler($xml_parser, "startElement", "endElement"); if (!($fp = fopen($file, "r"))) {die("could not open XML input");} while ($data = fread($fp, 4096)) {if (!xml_parse($xml_parser, $data, feof($fp))) {die(sprintf("XML error: %s at line %d", xml_error_string(xml_get_error_code($xml_parser)), xml_get_current_line_number($xml_parser)));}} xml_parser_free($xml_parser);
Example 2.
$file = "data.xml"; $map_array = array ("BOLD" = "B", "EMPHASIS "= "I", "LITERAL" = "TT "); function startElement($parser, $name, $attrs) {global $map_array; if ($htmltag = $map_array[$name]) {print" $htmltag ";}} function endElement($parser, $name) {global $map_array; if ($htmltag = $map_array[$name]) {print" / $htmltag ";}} function characterData($parser, $data) {print $data;} $xml_parser = xml_parser_create(); / / use case-folding so we are sure to find the tag in $map_array xml_parser_set_option($xml_parser, XML_OPTION_CASE_FOLDING, true); xml_set_element_handler($xml_parser, "startElement", "endElement"); xml_set_character_data_handler($xml_parser, "characterData"); if (!($fp = fopen($file, "r"))) {die("could not open XML input");} while ($data = fread($fp, 4096)) {if (!xml_parse($xml_parser, $data, feof($fp))) {die(sprintf("XML error: %s at line %d", xml_error_string(xml_get_error_code($xml_parser)), xml_get_current_line_number($xml_parser)));}} xml_parser_free($xml_parser);
Example 3.
Example 4. xmltest.xml
Example 5. xmltest2.xml
Prev
Home
Next
Up
PHP Manual
Prev
Next
These functions can be used to write XML-RPC servers and clients.
Warning
This extension is EXPERIMENTAL.
The behaviour of this extension - - including the names of its functions and anything else documented about this extension - - may change without notice in a future release of PHP.
Use this extension at your own risk.
No external libraries are needed to build this extension.
This extension is bundled into PHP as of 4.1.0.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
This extension has no constants defined.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This PHP extension provides a processor independent API to XSLT transformations.
Note:
C:\WINNT\SYSTEM32 or C:\WINDOWS\SYSTEM32)
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Up
PHP Manual
Prev
Next
You can find news information, example scripts, etc. for this extension at http: / /www.indexdata.dk / phpyaz /.
Warning
This is due to the fact that they both share the same internal symbol.
The behaviour of these functions is affected by settings in php.ini.
Table 1.
This extension has no resource types defined.
This extension has no constants defined.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This module enables you to transparently read ZIP compressed archives and the files inside them.
A normal ZIP utility is needed to create the ZIP file archives read by this library.
Note:
This section reflects the Zip extension as it exists in PHP 4.1.0 and later.
This extension has no configuration directives defined in php.ini.
This extension has no resource types defined.
This extension has no constants defined.
Example 1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This module enables you to transparently read and write gzip (.gz) compressed files, through versions of most of the filesystem functions which work with gzip-compressed files (and uncompressed files, too, but not with sockets).
Note:
Version 4.0.4 introduced a fopen-wrapper for .gz-files, so that you can use a special 'zlib:' URL to access compressed files transparently using the normal f*() file access functions if you prepend the filename or path with a'zlib: 'prefix when calling fopen().
This feature requires a C runtime library that provides the fopencookie() This feature requires a C runtime library that provides the fopencookie() function.
To my current knowledge the GNU libc is the only library that provides this feature.
This module uses the functions of zlib by Jean-loup Gailly and Mark Adler.
Zlib support in PHP is not enabled by default.
You will need to configure PHP --with-zlib[ =DIR]
The windows version of PHP The windows version of PHP has built in support for this extension.
You do not need to load any additional extension in order to use these functions.
Builtin support for zlib is available with PHP 4.3.0.
The behaviour of these functions is affected by settings in php.ini.
The zlib extension offers the option to transparently compress your pages on-the-fly, if the requesting browser supports this.
Therefore there are three options in the configuration file php.ini.
Table 1.
Zlib Configuration Options
Name
Default
Changeable
Here is a short explanation of the configuration directives.
Whether to transparently compress pages.
If this option is set to "On" in php.ini or the Apache configuration, pages are compressed if the browser sends an "Accept-Encoding: gzip "or "deflate" header. "Content-Encoding: gzip "(respectively "deflate") and "Vary:
Accept-Encoding "headers are added to the output.
You can use ini_set() to disable this in your script if the headers aren't already sent.
If you output a "Content-Type: image /" header the compression is disabled, too (in order to circumvent a Netscape bug).
You can reenable it, if you add "ini_set('zlib.output_compression', 'On')" after the header call which added the image content-type.
This option also accepts integer values instead of boolean "On" / "Off", using this you can set the output buffer size (default is 4KB).
Instead you must use zlib.output_handler.
Compression level used for transparent output compression.
You cannot specify additional output handlers if zlib.output_compression is activated here.
This setting does the same as output_handler but in a different order.
This extension has no resource types defined.
The constants below are defined by this extension, and will only be available when the extension has either been compiled into PHP or dynamically loaded at runtime.
This example opens a temporary file and writes a test string to it, then it prints out the content of this file twice.
Example 1.
Small Zlib Example
?php $filename = tempnam ('/ tmp', 'zlibtest') .'.gz'; print "html \n head / head \n body \n pre \n"; $s = "Only a test, test, test, test, test, test, test, test!\n"; / / open file for writing with maximum compression $zp = gzopen($filename, "w9"); / / write string to file gzwrite($zp, $s); / / close file gzclose($zp); / / open file for reading $zp = gzopen($filename, "r"); / / read 3 char print gzread($zp, 3); / / output until end of the file and close it. gzpassthru($zp); print "\n"; / / open file and print content (the 2nd time). if (readgzfile($filename) != strlen($s)) {echo "Error with zlib functions !";} unlink($filename); print" / pre \n / h1 / body \n / html \n";?
Prev
Home
Next
Up
PHP Manual
Prev
Appendix G.
List of Reserved Words
Next
These classes are defined in the standard set of functions included in the PHP build.
The class from which dir() is instantiated.
These classes are defined in the Ming extension, and will only be available when that extension has either been compiled into PHP or dynamically loaded at runtime.
These classes are defined in the Oracle 8 extension, and will only be available when that extension has either been compiled into PHP or dynamically loaded at runtime.
These classes are defined in the qtdom extension, and will only be available when that extension has either been compiled into PHP or dynamically loaded at runtime.
Prev
Home
Next
Predefined Variables
Up
Predefined Constants
PHP Manual
Prev
Next
These constants are defined by the PHP core.
Prev
Home
Next
Predefined Constants
Up
PHP Manual
Prev
Appendix G.
List of Reserved Words
Next
Prev
Home
Next
Predefined Classes
Up
PHP Manual
Prev
Next
These constants are defined in PHP by default.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The following is a listing of predefined identifiers in PHP.
None of the identifiers listed here should be used as identifiers in a your scripts.
These lists include keywords and predefined variable, constant, and class names.
These lists are neither exhaustive or complete.
These words have special meaning in PHP.
Some of them represent things which look like functions, some look like constants, and so on--but they 're not, really: they are language constructs.
You cannot use any of the following words as constants, class names, or function names.
Using them as variable names is generally OK, but could lead to confusion.
Table G-1.
PHP Keywords
Prev
Home
Next
List of Function Aliases
Up
Predefined Variables
PHP Manual
Prev
Appendix G.
List of Reserved Words
Next
Note:
Introduced in 4.1.0.
In earlier versions, use $HTTP_SERVER_VARS.
$_SERVER is an array containing information such as headers, paths, and script locations.
The entries in this array are created by the webserver.
There is no guarantee that every webserver will provide any of these; servers may omit some, or provide others not listed here.
That said, a large number of these variables are accounted for in the CGI 1.1 specification, so you should be able to expect those.
This is a 'superglobal', or automatic global, variable.
This simply means that it is available in all scopes throughout a script.
You don' t need to do a global $_SERVER; to access it within functions or methods, as you do with $HTTP_SERVER_VARS.
$HTTP_SERVER_VARS contains the same initial information, but is not an autoglobal. (Note that $HTTP_SERVER_VARS and $_SERVER are different variables and that PHP handles them as such)
If the register_globals directive is set, then these variables will also be made available in the global scope of the script; i.e., separate from the $_SERVER and $HTTP_SERVER_VARS arrays.
For related information, see the security chapter titled Using Register Globals.
These individual globals are not autoglobals.
You may or may not find any of the following elements in $_SERVER.
Note that few, if any, of these will be available (or indeed have any meaning) if running PHP on the command line.
The filename of the currently executing script, relative to the document root.
For instance, $_SERVER[ 'PHP_SELF'] in a script at the address http: / /example.com / test.php / foo.bar would be / test.php / foo.bar.
If PHP is running as a command-line processor, this variable is not available.
Array of arguments passed to the script.
When the script is run on the command line, this gives C-style access to the command line parameters.
When called via the GET method, this will contain the query string.
Contains the number of command line parameters passed to the script (if run on the command line).
What revision of the CGI specification the server is using; i.e. 'CGI / 1.1'.
The name of the server host under which the current script is executing.
If the script is running on a virtual host, this will be the value defined for that virtual host.
Server identification string, given in the headers when responding to requests.
Name and revision of the information protocol via which the page was requested; i.e. 'HTTP / 1.0';
Which request method was used to access the page; i.e. 'GET', 'HEAD', 'POST', 'PUT'.
The query string, if any, via which the page was accessed.
The document root directory under which the current script is executing, as defined in the server 's configuration file.
Contents of the Accept: header from the current request, if there is one.
Contents of the Accept-Charset: header from the current request, if there is one.
Example: 'iso-8859-1,*,utf-8'.
Contents of the Accept-Encoding: header from the current request, if there is one.
Example: 'gzip'.
Contents of the Accept-Language: header from the current request, if there is one.
Example: 'en'.
Contents of the Connection: header from the current request, if there is one.
Example: 'Keep-Alive'.
Contents of the Host: header from the current request, if there is one.
The address of the page (if any) which referred the user agent to the current page.
This is set by the user agent.
Not all user agents will set this, and some provide the ability to modify HTTP_REFERER as a feature.
In short, it cannot really be trusted.
Contents of the User_Agent: header from the current request, if there is one.
This is a string denoting the user agent being which is accessing the page.
A typical example is:
Among other things, you can use this value with get_browser() to tailor your page's output to the capabilities of the user agent.
The IP address from which the user is viewing the current page.
The Host name from which the user is viewing the current page.
The reverse dns lookup is based off the REMOTE_ADDR of the user.
Your web server must be configured to create this variable.
See also gethostbyaddr().
The port being used on the user 's machine to communicate with the web server.
The absolute pathname of the currently executing script.
The value given to the SERVER_ADMIN (for Apache) directive in the web server configuration file.
The port on the server machine being used by the web server for communication.
String containing the server version and virtual host name which are added to server-generated pages, if enabled.
Contains the current script 's path.
The URI which was given in order to access this page; for instance, '/ index.html'.
When running under Apache as module doing HTTP authentication this variable is set to the username provided by the user.
When running under Apache as module doing HTTP authentication this variable is set to the password provided by the user.
When running under Apache as module doing HTTP authenticated this variable is set to the authentication type.
Note:
Introduced in 4.1.0.
In earlier versions, use $HTTP_ENV_VARS.
These variables are imported into PHP 's global namespace from the environment under which the PHP parser is running.
Many are provided by the shell under which PHP is running and different systems are likely running different kinds of shells, a definitive list is impossible.
Please see your shell 's documentation for a list of defined environment variables.
Other environment variables include the CGI variables, placed there regardless of whether PHP is running as a server module or CGI processor.
This is a 'superglobal', or automatic global, variable.
This simply means that it is available in all scopes throughout a script.
You don' t need to do a global $_ENV; to access it within functions or methods, as you do with $HTTP_ENV_VARS.
$HTTP_ENV_VARS contains the same initial information, but is not an autoglobal. (Note that HTTP_ENV_VARS and $_ENV are different variables and that PHP handles them as such)
If the register_globals directive is set, then these variables will also be made available in the global scope of the script; i.e., separate from the $_ENV and $HTTP_ENV_VARS If the register_globals directive is set, then these variables will also be made available in the global scope of the script; i.e., separate from the $_ENV and $HTTP_ENV_VARS arrays.
For related information, see the security chapter titled Using Register Globals.
These individual globals are not autoglobals.
Note:
Introduced in 4.1.0.
In earlier versions, use $HTTP_COOKIE_VARS.
Automatically global in any scope.
This is a 'superglobal', or automatic global, variable.
This simply means that it is available in all scopes throughout a script.
You don' t need to do a global $_COOKIE; to access it within functions or methods, as you do with $HTTP_COOKIE_VARS.
$HTTP_COOKIE_VARS contains the same initial information, but is not an autoglobal. (Note that HTTP_COOKIE_VARS and $_COOKIE are different variables and that PHP handles them as such)
If the register_globals directive is set, then these variables will also be made available in the global scope of the script; i.e., separate from the $_COOKIE and $HTTP_COOKIE_VARS arrays.
For related information, see the security chapter titled Using Register Globals.
These individual globals are not autoglobals.
Note:
Introduced in 4.1.0.
In earlier versions, use $HTTP_GET_VARS.
Automatically global in any scope.
This is a 'superglobal', or automatic global, variable.
This simply means that it is available in all scopes throughout a script.
You don' t need to do a global $_GET; to access it within functions or methods, as you do with $HTTP_GET_VARS.
$HTTP_GET_VARS contains the same initial information, but is not an autoglobal. (Note that HTTP_GET_VARS and $_GET are different variables and that PHP handles them as such)
If the register_globals directive is set, then these variables will also be made available in the global scope of the script; i.e., separate from the $_GET and $HTTP_GET_VARS If the register_globals directive is set, then these variables will also be made available in the global scope of the script; i.e., separate from the $_GET and $HTTP_GET_VARS arrays.
For related information, see the security chapter titled Using Register Globals.
These individual globals are not autoglobals.
Note:
Introduced in 4.1.0.
In earlier versions, use $HTTP_POST_VARS.
Automatically global in any scope.
This is a 'superglobal', or automatic global, variable.
This simply means that it is available in all scopes throughout a script.
You don' t need to do a global $_POST; to access it within functions or methods, as you do with $HTTP_POST_VARS.
$HTTP_POST_VARS contains the same initial information, but is not an autoglobal. (Note that HTTP_POST_VARS and $_POST are different variables and that PHP handles them as such)
If the register_globals directive is set, then these variables will also be made available in the global scope of the script; i.e., separate from the $_POST and $HTTP_POST_VARS If the register_globals directive is set, then these variables will also be made available in the global scope of the script; i.e., separate from the $_POST and $HTTP_POST_VARS arrays.
For related information, see the security chapter titled Using Register Globals.
These individual globals are not autoglobals.
Note:
Introduced in 4.1.0.
In earlier versions, use $HTTP_POST_FILES.
Automatically global in any scope.
This is a 'superglobal', or automatic global, variable.
This simply means that it is available in all scopes throughout a script.
You don' t need to do a global $_FILES; to access it within functions or methods, as you do with $HTTP_POST_FILES.
$HTTP_POST_FILES contains the same information, but is not an autoglobal.
If the register_globals directive is set, then these variables will also be made available in the global scope of the script; i.e., separate from the $_FILES and $HTTP_POST_FILES If the register_globals directive is set, then these variables will also be made available in the global scope of the script; i.e., separate from the $_FILES and $HTTP_POST_FILES arrays.
For related information, see the security chapter titled Using Register Globals.
These individual globals are not autoglobals.
Note:
Introduced in 4.1.0.
There is no equivalent array in earlier versions.
Note:
Prior to PHP 4.3.0, $_FILES information was also included into $_REQUEST.
This is a 'superglobal', or automatic global, variable.
This simply means that it is available in all scopes throughout a script.
If the register_globals directive is set, then these variables will also be made available in the global scope of the script; i.e., separate from the $_REQUEST array.
For related information, see the security chapter titled Using Register Globals.
These individual globals are not autoglobals.
Note:
Introduced in 4.1.0.
In earlier versions, use $HTTP_SESSION_VARS.
An associative array containing session variables available to the current script.
See the Session functions documentation for more information on how this is used.
This is a 'superglobal', or automatic global, variable.
This simply means that it is available in all scopes throughout a script.
You don' t need to do a global $_SESSION; to access it within functions or methods, as you do with $HTTP_SESSION_VARS.
$HTTP_SESSION_VARS contains the same information, but is not an autoglobal.
If the register_globals directive is set, then these variables will also be made available in the global scope of the script; i.e., separate from the $_SESSION and $HTTP_SESSION_VARS arrays.
For related information, see the security chapter titled Using Register Globals.
These individual globals are not autoglobals.
An associative array containing references to all variables which are currently defined in the global scope of the script.
The variable names are the keys of the array.
This is a 'superglobal', or automatic global, variable.
This simply means that it is available in all scopes throughout a script.
You don' t need to do a global $GLOBALS; to access it within functions or methods.
$php_errormsg is a variable containing the text of the last error message generated by PHP.
This variable will only be available within the scope in which the error occurred, and only if the track_errors configuration option is turned on (it defaults to off).
Prev
Home
Next
List of Reserved Words
Up
Predefined Classes
PHP Manual
Prev
Next
Table H-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 5.
Security
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 5.
Next
See below for full the explanation of the different combinations.
If your web server does not support any way of telling if the request is direct or redirected, you cannot use this option and you must use one of the other ways of running the CGI version documented here.
user_dir expansion happens regardless of the doc_root setting, so you can control the document root and user directory access separately.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 5.
Security
Next
Prev
Home
Next
Up
Language Reference
PHP Manual
Prev
Chapter 5.
Next
Example 5-5.
/ / storing password hash $query = sprintf( "INSERT INTO users(name,pwd) VALUES('%s' ,'%s') ;", addslashes($username), md5($password)); $result = pg_exec($connection, $query); / / querying if user submitted the right password $query = sprintf("SELECT 1 FROM users WHERE name='%s' AND pwd='%s' ;", addslashes($username), md5($password)); $result = pg_exec($connection, $query); if (pg_numrows($result) 0) {echo "Welcome, $username !";} else {echo "Authentication failed for $username .";}
Example 5-6.
Note:
Example 5-7.
Example 5-8.
Example 5-9.
Note:
Example 5-10.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 5.
Security
Next
Example 5-11.
Example 5-12.
Example 5-13.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 5.
Security
Next
Example 5-1.
Example 5-2....
Example 5-3.
Example 5-4.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 5.
Security
Next
Example 5-18.
Example 5-19.
Example 5-20.
Prev
Home
Next
Up
PHP Manual
Prev
Next
This chapter starts with some general security advice, explains the different configuration option combinations and the situations they can be safely used, and describes different considerations in coding for different levels of security.
Prev
Home
Next
Configuration directives
Up
PHP Manual
Prev
Chapter 5.
Security
Next
Example 5-14.
Example 5-15.
Example 5-16.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 5.
Security
Next
Example 5-17.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Streams API for PHP Extension Authors
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Streams API for PHP Extension Authors
Next
Example 43-1. simple stream example that displays the PHP home page
Table 43-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Streams API for PHP Extension Authors
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Streams API for PHP Extension Authors
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Streams API for PHP Extension Authors
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The PHP Streams API introduces a unified approach to the handling of files and sockets in PHP extension.
Note:
Prev
Home
Next
PHP Manual
Prev
Next
One or more of these values can be combined using the OR operator.
Note:
Prev
Home
Next
Up
Frequently Asked Questions
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Table 43-1.
Table 43-2.
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table 43-1.
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
(no version information, might be only in CVS)
php_stream_make_seekable() checks if origstream is seekable.
Table 43-1. php_stream_make_seekable() return values
Note:
Note:
Note:
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Streams API for PHP Extension Authors
Next
Example 43-2.
Example 43-3.
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Streams API for PHP Extension Authors
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
php_stream_dirent char d_name[ MAXPATHLEN]
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
php_stream_statbuf struct stat sb
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 43.
Streams API for PHP Extension Authors
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Table J-1.
Prev
Home
Next
Up
About the manual
PHP Manual
Prev
Chapter 2.
A simple tutorial
Next
Example 2-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 2.
A simple tutorial
Next
Example 2-6.
Example 2-7.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Here we would like to show the very basics of PHP in a short simple tutorial.
PHP-enabled web pages are treated just like regular HTML pages and you can create and edit them the same way you normally create regular HTML pages.
Prev
Home
Next
What can PHP do?
Up
PHP Manual
Prev
Chapter 2.
A simple tutorial
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 2.
A simple tutorial
Next
Example 2-2.
Example 2-3.
Example 2-4.
Example 2-5.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 2.
A simple tutorial
Next
Prev
Home
Next
Up
Installation
PHP Manual
Prev
Appendix I.
List of Supported Protocols / Wrappers
Next
Prev
Home
Next
Up
PHP Manual
Prev
Appendix I.
List of Supported Protocols / Wrappers
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Next
In addition to these wrappers, as of PHP 4.3, you can write your own wrappers using PHP script and stream_register_wrapper().
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Appendix I.
List of Supported Protocols / Wrappers
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
A set of macros was introduced into Zend' s API that simplify access to zval containers (see Table 42-1).
Table 42-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 32.
Accepting Arguments
Next
To work around this, you have to use a set of API functions to force a type conversion on every argument that' s being passed (see Table 32-1).
Table 32-1.
Note:
Figure 32-2 shows the output.
Figure 32-2.
Example 32-2.
For a description of both structures, see Table 32-2, Table 32-3 and Table 32-4.
Table 32-2.
See Table 32-3 for a description.
For a list of available types, see Table 32-4.
Table 32-3.
Table 32-4.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 32.
Accepting Arguments
Next
Examples are given in in Example 32-3.
Example 32-3.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 32.
Accepting Arguments
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
One of the most important issues for language extensions is accepting and dealing with data passed via arguments.
Figure 32-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 32.
Accepting Arguments
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 32.
Accepting Arguments
Next
A very clever implementation of this can be found in the code handling PHP' s fsockopen() located in ext / standard / fsock.c, as shown in Example 32-1.
Example 32-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 32.
Accepting Arguments
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
The default config.m4 shown in Example 27-1 is a bit more complex:
Example 27-1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 38-1 shows a small demonstration of calling a user function.
Example 38-1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
The file config.m4 is processed by buildconf and must contain all the instructions to be executed during configuration.
For example, these can include tests for required external files, such as header files, libraries, and so on.
M4 Macros for config.m4
Macro
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 28-1 shows the source.
Example 28-1.
Note:
The example source makes use of some features introduced with the Zend version used in PHP 4.1.0 and above, it won 't compile with older PHP 4.0.x versions.
The module shown earlier in Example 28-1 can be enabled with --enable-first_module or --enable-first_module=yes.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Those who know don 't talk.
Those who talk don 't know.
As soon as this point is reached, it 's time to touch the heart of PHP and take a look at its core, the C code that makes PHP go.
Prev
Home
Next
PHP Manual
Prev
Next
Access to initialization entries can also be handled with the macros shown in Table 39-1.
Table 39-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 26.
Source Layout
Next
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 26.
Source Layout
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Note:
Prior to working through the rest of this chapter, you should retrieve clean, unmodified source trees of your favorite Web server.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 26.
Source Layout
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 26.
Source Layout
Next
Warning
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 26.
Source Layout
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
"Extending PHP" is easier said than done.
PHP is such a huge and complex package that its inner workings can only be understood if you make yourself familiar with it by practicing, so we encourage you to work with the source.
This might sound a bit confusing at first, but it' s not that complicated (see Figure 24-1).
Figure 24-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 25.
Extension Possibilities
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 25.
Extension Possibilities
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
As shown in Figure 24-1 As shown in Figure 24-1 above, PHP can be extended primarily at three points: external modules, built-in modules, and the Zend engine.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 36.
Printing Information
Next
For examples of these functions, see Example 36-2.
Example 36-2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 36.
Printing Information
Next
Example 36-1 Example 36-1 shows a source example and its output.
Example 36-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 36.
Printing Information
Next
Table 36-1.
Figure 36-1.
Prev
Home
Next
Up
PHP Manual
Prev
Next
These macros automatically set the correspondent type and value, as described in Table 35-1 and Table 35-2.
Note:
The macros in Table 35-1 automatically return from your function, those in Table 35-2 only set the return value; they don't return from your function.
Table 35-1.
Table 35-2.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 31.
Source Discussion
Next
The parameter list of this declaration is very important; you should keep these parameters in mind (see Table 31-1 for descriptions).
Table 31-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 31.
Source Discussion
Next
Internally, zend_function_entry is defined as shown in Example 31-1.
Example 31-1.
Note:
Table 31-2 shows a list of all the macros that you can use to define functions.
Table 31-2.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 31.
Source Discussion
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 31.
Source Discussion
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
All PHP modules follow a common structure:
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 31.
Source Discussion
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 31.
Source Discussion
Next
You can see the internal definition of this module in Example 31-2.
Example 31-2.
For reference purposes, you can find a list of the macros involved in declared startup and shutdown functions in Table 31-3.
Table 31-3.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 31.
Source Discussion
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
For a simple test procedure, you can copy it to your htdocs directory and try it with the source in Example 29-1.
Warning
Example 29-1.
Calling this PHP file in your Web browser should give you the output shown in Figure 29-1.
Figure 29-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Creating Variables
Next
Table 33-1, Table 33-2 and Table 33-3 describe these functions.
Table 33-1.
Table 33-2.
Table 33-3.
This is done using zend_hash_update( )() for associative arrays (see Example 33-3) and zend_hash_index_update() for indexed arrays (see Example 33-4):
Example 33-3.
Example 33-4.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Creating Variables
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Creating Variables
Next
To create your own constants, you can use the macros in Table 33-6.
Table 33-6.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Creating Variables
Next
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Creating Variables
Next
This is somewhat bad practice, but Table Table 33-5 describes macros that do exactly this task.
Table 33-5.
Prev
Home
Next
Up
PHP Manual
Prev
Next
Example 33-1.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Creating Variables
Next
The corresponding type value for longs is IS_LONG (see Example 33-2).
Example 33-2.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Creating Variables
Next
Table 33-4.
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Creating Variables
Next
Note:
Note:
Note:
Prev
Home
Next
Up
PHP Manual
Prev
Chapter 33.
Creating Variables
Next
Prev
Home
Next
Up
PHP Manual
Prev
Next
Prev
Home
Next
Up
